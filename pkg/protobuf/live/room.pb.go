// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v3.19.4
// source: live/room.proto

package live

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 开播请求信息
type RoomStartBroadcastReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title          string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`                    // 直播间标题
	Cover          string `protobuf:"bytes,2,opt,name=cover,proto3" json:"cover,omitempty"`                    // 封面图片
	VideoClarity   int32  `protobuf:"varint,3,opt,name=videoClarity,proto3" json:"videoClarity,omitempty"`     // 视屏清晰度 1- 480p 2-540p 3-720p
	PayRules       int32  `protobuf:"varint,4,opt,name=payRules,proto3" json:"payRules,omitempty"`             // 付费规则 1- 免费 2-分钟付费 3-场次付费
	TrialDuration  int32  `protobuf:"varint,5,opt,name=trialDuration,proto3" json:"trialDuration,omitempty"`   // 试看时长/秒
	UnitPrice      int32  `protobuf:"varint,6,opt,name=unitPrice,proto3" json:"unitPrice,omitempty"`           // 单价 每分钟单价/每场单价，根据付费规则
	Summary        string `protobuf:"bytes,7,opt,name=summary,proto3" json:"summary,omitempty"`                // 简介
	GameId         int32  `protobuf:"varint,8,opt,name=gameId,proto3" json:"gameId,omitempty"`                 // 快捷游戏id
	IsOpenVibrator int32  `protobuf:"varint,9,opt,name=isOpenVibrator,proto3" json:"isOpenVibrator,omitempty"` // 是否开启跳蛋
}

func (x *RoomStartBroadcastReq) Reset() {
	*x = RoomStartBroadcastReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_live_room_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoomStartBroadcastReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoomStartBroadcastReq) ProtoMessage() {}

func (x *RoomStartBroadcastReq) ProtoReflect() protoreflect.Message {
	mi := &file_live_room_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoomStartBroadcastReq.ProtoReflect.Descriptor instead.
func (*RoomStartBroadcastReq) Descriptor() ([]byte, []int) {
	return file_live_room_proto_rawDescGZIP(), []int{0}
}

func (x *RoomStartBroadcastReq) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *RoomStartBroadcastReq) GetCover() string {
	if x != nil {
		return x.Cover
	}
	return ""
}

func (x *RoomStartBroadcastReq) GetVideoClarity() int32 {
	if x != nil {
		return x.VideoClarity
	}
	return 0
}

func (x *RoomStartBroadcastReq) GetPayRules() int32 {
	if x != nil {
		return x.PayRules
	}
	return 0
}

func (x *RoomStartBroadcastReq) GetTrialDuration() int32 {
	if x != nil {
		return x.TrialDuration
	}
	return 0
}

func (x *RoomStartBroadcastReq) GetUnitPrice() int32 {
	if x != nil {
		return x.UnitPrice
	}
	return 0
}

func (x *RoomStartBroadcastReq) GetSummary() string {
	if x != nil {
		return x.Summary
	}
	return ""
}

func (x *RoomStartBroadcastReq) GetGameId() int32 {
	if x != nil {
		return x.GameId
	}
	return 0
}

func (x *RoomStartBroadcastReq) GetIsOpenVibrator() int32 {
	if x != nil {
		return x.IsOpenVibrator
	}
	return 0
}

// 开播响应
type RoomStartBroadcastResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token      string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	ChatRoomId string `protobuf:"bytes,2,opt,name=chatRoomId,proto3" json:"chatRoomId,omitempty"`
}

func (x *RoomStartBroadcastResp) Reset() {
	*x = RoomStartBroadcastResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_live_room_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoomStartBroadcastResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoomStartBroadcastResp) ProtoMessage() {}

func (x *RoomStartBroadcastResp) ProtoReflect() protoreflect.Message {
	mi := &file_live_room_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoomStartBroadcastResp.ProtoReflect.Descriptor instead.
func (*RoomStartBroadcastResp) Descriptor() ([]byte, []int) {
	return file_live_room_proto_rawDescGZIP(), []int{1}
}

func (x *RoomStartBroadcastResp) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *RoomStartBroadcastResp) GetChatRoomId() string {
	if x != nil {
		return x.ChatRoomId
	}
	return ""
}

// 主播添加禁言、踢出、黑名单
type RoomManageChangeReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status int32 `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"` // 操作状态 1- 添加 2-移除
	UserId int32 `protobuf:"varint,2,opt,name=userId,proto3" json:"userId,omitempty"` // 被操作用户id
	Type   int32 `protobuf:"varint,3,opt,name=type,proto3" json:"type,omitempty"`     // 类型 1-禁言 2-踢出 3-拉黑
}

func (x *RoomManageChangeReq) Reset() {
	*x = RoomManageChangeReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_live_room_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoomManageChangeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoomManageChangeReq) ProtoMessage() {}

func (x *RoomManageChangeReq) ProtoReflect() protoreflect.Message {
	mi := &file_live_room_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoomManageChangeReq.ProtoReflect.Descriptor instead.
func (*RoomManageChangeReq) Descriptor() ([]byte, []int) {
	return file_live_room_proto_rawDescGZIP(), []int{2}
}

func (x *RoomManageChangeReq) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *RoomManageChangeReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *RoomManageChangeReq) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

// 主播直播间管理列表请求
type RoomManageListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type int32 `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"` // 类型 1-禁言 2-踢出 3-拉黑
}

func (x *RoomManageListReq) Reset() {
	*x = RoomManageListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_live_room_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoomManageListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoomManageListReq) ProtoMessage() {}

func (x *RoomManageListReq) ProtoReflect() protoreflect.Message {
	mi := &file_live_room_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoomManageListReq.ProtoReflect.Descriptor instead.
func (*RoomManageListReq) Descriptor() ([]byte, []int) {
	return file_live_room_proto_rawDescGZIP(), []int{3}
}

func (x *RoomManageListReq) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

// 房管房间管理操作请求
type HomeManageChangeReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status int32 `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"` // 操作状态 1- 添加 2-移除
	RoomId int32 `protobuf:"varint,2,opt,name=roomId,proto3" json:"roomId,omitempty"` // 直播间id
	UserId int32 `protobuf:"varint,3,opt,name=userId,proto3" json:"userId,omitempty"` // 被操作用户id
	Type   int32 `protobuf:"varint,4,opt,name=type,proto3" json:"type,omitempty"`     // 类型 1-禁言 2-踢出 3-拉黑
}

func (x *HomeManageChangeReq) Reset() {
	*x = HomeManageChangeReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_live_room_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HomeManageChangeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HomeManageChangeReq) ProtoMessage() {}

func (x *HomeManageChangeReq) ProtoReflect() protoreflect.Message {
	mi := &file_live_room_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HomeManageChangeReq.ProtoReflect.Descriptor instead.
func (*HomeManageChangeReq) Descriptor() ([]byte, []int) {
	return file_live_room_proto_rawDescGZIP(), []int{4}
}

func (x *HomeManageChangeReq) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *HomeManageChangeReq) GetRoomId() int32 {
	if x != nil {
		return x.RoomId
	}
	return 0
}

func (x *HomeManageChangeReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *HomeManageChangeReq) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

// 房管房间管理列表请求
type HomeManageListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoomId int32 `protobuf:"varint,1,opt,name=roomId,proto3" json:"roomId,omitempty"`
	Type   int32 `protobuf:"varint,2,opt,name=type,proto3" json:"type,omitempty"` // 类型 1-禁言 2-踢出 3-拉黑
}

func (x *HomeManageListReq) Reset() {
	*x = HomeManageListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_live_room_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HomeManageListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HomeManageListReq) ProtoMessage() {}

func (x *HomeManageListReq) ProtoReflect() protoreflect.Message {
	mi := &file_live_room_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HomeManageListReq.ProtoReflect.Descriptor instead.
func (*HomeManageListReq) Descriptor() ([]byte, []int) {
	return file_live_room_proto_rawDescGZIP(), []int{5}
}

func (x *HomeManageListReq) GetRoomId() int32 {
	if x != nil {
		return x.RoomId
	}
	return 0
}

func (x *HomeManageListReq) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

// 禁言、踢出、黑名单列表响应
type RoomOpListResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*RoomOpListResp_RoomOpListItem `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *RoomOpListResp) Reset() {
	*x = RoomOpListResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_live_room_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoomOpListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoomOpListResp) ProtoMessage() {}

func (x *RoomOpListResp) ProtoReflect() protoreflect.Message {
	mi := &file_live_room_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoomOpListResp.ProtoReflect.Descriptor instead.
func (*RoomOpListResp) Descriptor() ([]byte, []int) {
	return file_live_room_proto_rawDescGZIP(), []int{6}
}

func (x *RoomOpListResp) GetList() []*RoomOpListResp_RoomOpListItem {
	if x != nil {
		return x.List
	}
	return nil
}

// 获取首页直播间列表
type ListLiveRoomsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Category int32 `protobuf:"varint,1,opt,name=category,proto3" json:"category,omitempty"`
	LastId   int32 `protobuf:"varint,2,opt,name=lastId,proto3" json:"lastId,omitempty"`
	PageSize int32 `protobuf:"varint,3,opt,name=pageSize,proto3" json:"pageSize,omitempty"`
}

func (x *ListLiveRoomsReq) Reset() {
	*x = ListLiveRoomsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_live_room_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListLiveRoomsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListLiveRoomsReq) ProtoMessage() {}

func (x *ListLiveRoomsReq) ProtoReflect() protoreflect.Message {
	mi := &file_live_room_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListLiveRoomsReq.ProtoReflect.Descriptor instead.
func (*ListLiveRoomsReq) Descriptor() ([]byte, []int) {
	return file_live_room_proto_rawDescGZIP(), []int{7}
}

func (x *ListLiveRoomsReq) GetCategory() int32 {
	if x != nil {
		return x.Category
	}
	return 0
}

func (x *ListLiveRoomsReq) GetLastId() int32 {
	if x != nil {
		return x.LastId
	}
	return 0
}

func (x *ListLiveRoomsReq) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

// 首页直播间
type ListLiveRoomsResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*ListLiveRoomsResp_ListLiveRoomsItem `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *ListLiveRoomsResp) Reset() {
	*x = ListLiveRoomsResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_live_room_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListLiveRoomsResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListLiveRoomsResp) ProtoMessage() {}

func (x *ListLiveRoomsResp) ProtoReflect() protoreflect.Message {
	mi := &file_live_room_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListLiveRoomsResp.ProtoReflect.Descriptor instead.
func (*ListLiveRoomsResp) Descriptor() ([]byte, []int) {
	return file_live_room_proto_rawDescGZIP(), []int{8}
}

func (x *ListLiveRoomsResp) GetList() []*ListLiveRoomsResp_ListLiveRoomsItem {
	if x != nil {
		return x.List
	}
	return nil
}

// 搜索主播
type SearchAnchorReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Nickname string `protobuf:"bytes,1,opt,name=nickname,proto3" json:"nickname,omitempty"` // 搜索主播昵称
	LastId   int32  `protobuf:"varint,2,opt,name=lastId,proto3" json:"lastId,omitempty"`
	PageSize int32  `protobuf:"varint,3,opt,name=pageSize,proto3" json:"pageSize,omitempty"`
}

func (x *SearchAnchorReq) Reset() {
	*x = SearchAnchorReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_live_room_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchAnchorReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchAnchorReq) ProtoMessage() {}

func (x *SearchAnchorReq) ProtoReflect() protoreflect.Message {
	mi := &file_live_room_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchAnchorReq.ProtoReflect.Descriptor instead.
func (*SearchAnchorReq) Descriptor() ([]byte, []int) {
	return file_live_room_proto_rawDescGZIP(), []int{9}
}

func (x *SearchAnchorReq) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

func (x *SearchAnchorReq) GetLastId() int32 {
	if x != nil {
		return x.LastId
	}
	return 0
}

func (x *SearchAnchorReq) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

// 搜索主播响应
type SearchAnchorResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*SearchAnchorResp_SearchAnchorItem `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *SearchAnchorResp) Reset() {
	*x = SearchAnchorResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_live_room_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchAnchorResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchAnchorResp) ProtoMessage() {}

func (x *SearchAnchorResp) ProtoReflect() protoreflect.Message {
	mi := &file_live_room_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchAnchorResp.ProtoReflect.Descriptor instead.
func (*SearchAnchorResp) Descriptor() ([]byte, []int) {
	return file_live_room_proto_rawDescGZIP(), []int{10}
}

func (x *SearchAnchorResp) GetList() []*SearchAnchorResp_SearchAnchorItem {
	if x != nil {
		return x.List
	}
	return nil
}

// 直播间详情
type LiveRoomsDetailsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoomId int32 `protobuf:"varint,1,opt,name=roomId,proto3" json:"roomId,omitempty"`
	UserId int32 `protobuf:"varint,2,opt,name=userId,proto3" json:"userId,omitempty"`
}

func (x *LiveRoomsDetailsReq) Reset() {
	*x = LiveRoomsDetailsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_live_room_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LiveRoomsDetailsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LiveRoomsDetailsReq) ProtoMessage() {}

func (x *LiveRoomsDetailsReq) ProtoReflect() protoreflect.Message {
	mi := &file_live_room_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LiveRoomsDetailsReq.ProtoReflect.Descriptor instead.
func (*LiveRoomsDetailsReq) Descriptor() ([]byte, []int) {
	return file_live_room_proto_rawDescGZIP(), []int{11}
}

func (x *LiveRoomsDetailsReq) GetRoomId() int32 {
	if x != nil {
		return x.RoomId
	}
	return 0
}

func (x *LiveRoomsDetailsReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

// 直播间详情
type LiveRoomsDetailsResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                int32  `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`                                // 直播间id
	Name              string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`                             // 直播间名称
	Cover             string `protobuf:"bytes,3,opt,name=cover,proto3" json:"cover,omitempty"`                           // 直播间封面
	CountryCode       string `protobuf:"bytes,4,opt,name=countryCode,proto3" json:"countryCode,omitempty"`               // 国家code
	OnlineNum         int32  `protobuf:"varint,5,opt,name=onlineNum,proto3" json:"onlineNum,omitempty"`                  // 在线人数
	UserId            int32  `protobuf:"varint,6,opt,name=userId,proto3" json:"userId,omitempty"`                        // 主播id
	ChatRoomId        string `protobuf:"bytes,7,opt,name=chatRoomId,proto3" json:"chatRoomId,omitempty"`                 // 聊天室id
	Status            int32  `protobuf:"varint,8,opt,name=status,proto3" json:"status,omitempty"`                        // 房间状态 1-正常  2-禁用 3-删除
	LiveStatus        int32  `protobuf:"varint,9,opt,name=liveStatus,proto3" json:"liveStatus,omitempty"`                // 直播状态 1-直播 2-下播
	PayRules          int32  `protobuf:"varint,10,opt,name=payRules,proto3" json:"payRules,omitempty"`                   // 付费规则 1- 免费 2-分钟付费 3-场次付费
	TrialDuration     int32  `protobuf:"varint,11,opt,name=trialDuration,proto3" json:"trialDuration,omitempty"`         // 试看时长/秒
	UnitPrice         int32  `protobuf:"varint,12,opt,name=unitPrice,proto3" json:"unitPrice,omitempty"`                 // 单价 每分钟单价/每场单价，根据付费规则
	GameId            int32  `protobuf:"varint,13,opt,name=gameId,proto3" json:"gameId,omitempty"`                       // 快捷游戏id
	Summary           string `protobuf:"bytes,14,opt,name=summary,proto3" json:"summary,omitempty"`                      // 简介
	SceneIncome       int32  `protobuf:"varint,15,opt,name=sceneIncome,proto3" json:"sceneIncome,omitempty"`             // 本场钻石收入
	Avatar            string `protobuf:"bytes,16,opt,name=avatar,proto3" json:"avatar,omitempty"`                        // 主播头像
	StartLiveTime     int32  `protobuf:"varint,17,opt,name=startLiveTime,proto3" json:"startLiveTime,omitempty"`         // 开播时间
	PaidPurviewStatus int32  `protobuf:"varint,18,opt,name=paidPurviewStatus,proto3" json:"paidPurviewStatus,omitempty"` // 是否有可以开启付费直播
	IsOpenVibrator    int32  `protobuf:"varint,19,opt,name=isOpenVibrator,proto3" json:"isOpenVibrator,omitempty"`       // 是否开启跳蛋
	IsFollow          int32  `protobuf:"varint,20,opt,name=isFollow,proto3" json:"isFollow,omitempty"`                   // 是否关注
	IsPay             int32  `protobuf:"varint,21,opt,name=isPay,proto3" json:"isPay,omitempty"`                         // 是否付费
	Heat              int32  `protobuf:"varint,22,opt,name=heat,proto3" json:"heat,omitempty"`                           // 热度
}

func (x *LiveRoomsDetailsResp) Reset() {
	*x = LiveRoomsDetailsResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_live_room_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LiveRoomsDetailsResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LiveRoomsDetailsResp) ProtoMessage() {}

func (x *LiveRoomsDetailsResp) ProtoReflect() protoreflect.Message {
	mi := &file_live_room_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LiveRoomsDetailsResp.ProtoReflect.Descriptor instead.
func (*LiveRoomsDetailsResp) Descriptor() ([]byte, []int) {
	return file_live_room_proto_rawDescGZIP(), []int{12}
}

func (x *LiveRoomsDetailsResp) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *LiveRoomsDetailsResp) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *LiveRoomsDetailsResp) GetCover() string {
	if x != nil {
		return x.Cover
	}
	return ""
}

func (x *LiveRoomsDetailsResp) GetCountryCode() string {
	if x != nil {
		return x.CountryCode
	}
	return ""
}

func (x *LiveRoomsDetailsResp) GetOnlineNum() int32 {
	if x != nil {
		return x.OnlineNum
	}
	return 0
}

func (x *LiveRoomsDetailsResp) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *LiveRoomsDetailsResp) GetChatRoomId() string {
	if x != nil {
		return x.ChatRoomId
	}
	return ""
}

func (x *LiveRoomsDetailsResp) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *LiveRoomsDetailsResp) GetLiveStatus() int32 {
	if x != nil {
		return x.LiveStatus
	}
	return 0
}

func (x *LiveRoomsDetailsResp) GetPayRules() int32 {
	if x != nil {
		return x.PayRules
	}
	return 0
}

func (x *LiveRoomsDetailsResp) GetTrialDuration() int32 {
	if x != nil {
		return x.TrialDuration
	}
	return 0
}

func (x *LiveRoomsDetailsResp) GetUnitPrice() int32 {
	if x != nil {
		return x.UnitPrice
	}
	return 0
}

func (x *LiveRoomsDetailsResp) GetGameId() int32 {
	if x != nil {
		return x.GameId
	}
	return 0
}

func (x *LiveRoomsDetailsResp) GetSummary() string {
	if x != nil {
		return x.Summary
	}
	return ""
}

func (x *LiveRoomsDetailsResp) GetSceneIncome() int32 {
	if x != nil {
		return x.SceneIncome
	}
	return 0
}

func (x *LiveRoomsDetailsResp) GetAvatar() string {
	if x != nil {
		return x.Avatar
	}
	return ""
}

func (x *LiveRoomsDetailsResp) GetStartLiveTime() int32 {
	if x != nil {
		return x.StartLiveTime
	}
	return 0
}

func (x *LiveRoomsDetailsResp) GetPaidPurviewStatus() int32 {
	if x != nil {
		return x.PaidPurviewStatus
	}
	return 0
}

func (x *LiveRoomsDetailsResp) GetIsOpenVibrator() int32 {
	if x != nil {
		return x.IsOpenVibrator
	}
	return 0
}

func (x *LiveRoomsDetailsResp) GetIsFollow() int32 {
	if x != nil {
		return x.IsFollow
	}
	return 0
}

func (x *LiveRoomsDetailsResp) GetIsPay() int32 {
	if x != nil {
		return x.IsPay
	}
	return 0
}

func (x *LiveRoomsDetailsResp) GetHeat() int32 {
	if x != nil {
		return x.Heat
	}
	return 0
}

// 下播响应
type CloseBroadcastResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LiveDuration int32  `protobuf:"varint,1,opt,name=liveDuration,proto3" json:"liveDuration,omitempty"` // 直播时长
	ViewersNum   int32  `protobuf:"varint,2,opt,name=viewersNum,proto3" json:"viewersNum,omitempty"`     // 观看人数
	GiftAmount   int32  `protobuf:"varint,3,opt,name=giftAmount,proto3" json:"giftAmount,omitempty"`     // 收到礼物金额 /钻石
	FollowerNum  int32  `protobuf:"varint,4,opt,name=followerNum,proto3" json:"followerNum,omitempty"`   // 收到关注数量
	LikeNum      int32  `protobuf:"varint,5,opt,name=likeNum,proto3" json:"likeNum,omitempty"`           // 收到点赞数量
	RoomId       int32  `protobuf:"varint,6,opt,name=roomId,proto3" json:"roomId,omitempty"`
	ChatRoomId   string `protobuf:"bytes,7,opt,name=chatRoomId,proto3" json:"chatRoomId,omitempty"`
}

func (x *CloseBroadcastResp) Reset() {
	*x = CloseBroadcastResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_live_room_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CloseBroadcastResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloseBroadcastResp) ProtoMessage() {}

func (x *CloseBroadcastResp) ProtoReflect() protoreflect.Message {
	mi := &file_live_room_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloseBroadcastResp.ProtoReflect.Descriptor instead.
func (*CloseBroadcastResp) Descriptor() ([]byte, []int) {
	return file_live_room_proto_rawDescGZIP(), []int{13}
}

func (x *CloseBroadcastResp) GetLiveDuration() int32 {
	if x != nil {
		return x.LiveDuration
	}
	return 0
}

func (x *CloseBroadcastResp) GetViewersNum() int32 {
	if x != nil {
		return x.ViewersNum
	}
	return 0
}

func (x *CloseBroadcastResp) GetGiftAmount() int32 {
	if x != nil {
		return x.GiftAmount
	}
	return 0
}

func (x *CloseBroadcastResp) GetFollowerNum() int32 {
	if x != nil {
		return x.FollowerNum
	}
	return 0
}

func (x *CloseBroadcastResp) GetLikeNum() int32 {
	if x != nil {
		return x.LikeNum
	}
	return 0
}

func (x *CloseBroadcastResp) GetRoomId() int32 {
	if x != nil {
		return x.RoomId
	}
	return 0
}

func (x *CloseBroadcastResp) GetChatRoomId() string {
	if x != nil {
		return x.ChatRoomId
	}
	return ""
}

// 管理员列表
type RoomListManageResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*RoomListManageResp_RoomListManageItem `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *RoomListManageResp) Reset() {
	*x = RoomListManageResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_live_room_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoomListManageResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoomListManageResp) ProtoMessage() {}

func (x *RoomListManageResp) ProtoReflect() protoreflect.Message {
	mi := &file_live_room_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoomListManageResp.ProtoReflect.Descriptor instead.
func (*RoomListManageResp) Descriptor() ([]byte, []int) {
	return file_live_room_proto_rawDescGZIP(), []int{14}
}

func (x *RoomListManageResp) GetList() []*RoomListManageResp_RoomListManageItem {
	if x != nil {
		return x.List
	}
	return nil
}

// 新增房管
type RoomAddManageReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId int32 `protobuf:"varint,1,opt,name=userId,proto3" json:"userId,omitempty"`
}

func (x *RoomAddManageReq) Reset() {
	*x = RoomAddManageReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_live_room_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoomAddManageReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoomAddManageReq) ProtoMessage() {}

func (x *RoomAddManageReq) ProtoReflect() protoreflect.Message {
	mi := &file_live_room_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoomAddManageReq.ProtoReflect.Descriptor instead.
func (*RoomAddManageReq) Descriptor() ([]byte, []int) {
	return file_live_room_proto_rawDescGZIP(), []int{15}
}

func (x *RoomAddManageReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

// 取消房管
type RoomCancelManageReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId int32 `protobuf:"varint,1,opt,name=userId,proto3" json:"userId,omitempty"`
}

func (x *RoomCancelManageReq) Reset() {
	*x = RoomCancelManageReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_live_room_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoomCancelManageReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoomCancelManageReq) ProtoMessage() {}

func (x *RoomCancelManageReq) ProtoReflect() protoreflect.Message {
	mi := &file_live_room_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoomCancelManageReq.ProtoReflect.Descriptor instead.
func (*RoomCancelManageReq) Descriptor() ([]byte, []int) {
	return file_live_room_proto_rawDescGZIP(), []int{16}
}

func (x *RoomCancelManageReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

// 直播间用户管理状态请求
type RoomManageStatusReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoomId int32 `protobuf:"varint,1,opt,name=roomId,proto3" json:"roomId,omitempty"`
}

func (x *RoomManageStatusReq) Reset() {
	*x = RoomManageStatusReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_live_room_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoomManageStatusReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoomManageStatusReq) ProtoMessage() {}

func (x *RoomManageStatusReq) ProtoReflect() protoreflect.Message {
	mi := &file_live_room_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoomManageStatusReq.ProtoReflect.Descriptor instead.
func (*RoomManageStatusReq) Descriptor() ([]byte, []int) {
	return file_live_room_proto_rawDescGZIP(), []int{17}
}

func (x *RoomManageStatusReq) GetRoomId() int32 {
	if x != nil {
		return x.RoomId
	}
	return 0
}

// 直播间用户管理状态响应
type RoomManageStatusResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SuperManageStatus int32 `protobuf:"varint,1,opt,name=superManageStatus,proto3" json:"superManageStatus,omitempty"`
	RoomManageStatus  int32 `protobuf:"varint,2,opt,name=roomManageStatus,proto3" json:"roomManageStatus,omitempty"`
}

func (x *RoomManageStatusResp) Reset() {
	*x = RoomManageStatusResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_live_room_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoomManageStatusResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoomManageStatusResp) ProtoMessage() {}

func (x *RoomManageStatusResp) ProtoReflect() protoreflect.Message {
	mi := &file_live_room_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoomManageStatusResp.ProtoReflect.Descriptor instead.
func (*RoomManageStatusResp) Descriptor() ([]byte, []int) {
	return file_live_room_proto_rawDescGZIP(), []int{18}
}

func (x *RoomManageStatusResp) GetSuperManageStatus() int32 {
	if x != nil {
		return x.SuperManageStatus
	}
	return 0
}

func (x *RoomManageStatusResp) GetRoomManageStatus() int32 {
	if x != nil {
		return x.RoomManageStatus
	}
	return 0
}

// 直播间历史纪录响应
type RoomSceneHistoryResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*RoomSceneHistoryResp_RoomSceneHistoryItem `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *RoomSceneHistoryResp) Reset() {
	*x = RoomSceneHistoryResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_live_room_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoomSceneHistoryResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoomSceneHistoryResp) ProtoMessage() {}

func (x *RoomSceneHistoryResp) ProtoReflect() protoreflect.Message {
	mi := &file_live_room_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoomSceneHistoryResp.ProtoReflect.Descriptor instead.
func (*RoomSceneHistoryResp) Descriptor() ([]byte, []int) {
	return file_live_room_proto_rawDescGZIP(), []int{19}
}

func (x *RoomSceneHistoryResp) GetList() []*RoomSceneHistoryResp_RoomSceneHistoryItem {
	if x != nil {
		return x.List
	}
	return nil
}

// 直播间收到礼物列表请求
type RoomSceneHistoryIncomeReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SceneId int32 `protobuf:"varint,1,opt,name=sceneId,proto3" json:"sceneId,omitempty"` // 场次id
}

func (x *RoomSceneHistoryIncomeReq) Reset() {
	*x = RoomSceneHistoryIncomeReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_live_room_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoomSceneHistoryIncomeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoomSceneHistoryIncomeReq) ProtoMessage() {}

func (x *RoomSceneHistoryIncomeReq) ProtoReflect() protoreflect.Message {
	mi := &file_live_room_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoomSceneHistoryIncomeReq.ProtoReflect.Descriptor instead.
func (*RoomSceneHistoryIncomeReq) Descriptor() ([]byte, []int) {
	return file_live_room_proto_rawDescGZIP(), []int{20}
}

func (x *RoomSceneHistoryIncomeReq) GetSceneId() int32 {
	if x != nil {
		return x.SceneId
	}
	return 0
}

// 直播间收到礼物列表响应
type RoomSceneHistoryIncomeResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*RoomSceneHistoryIncomeResp_RoomSceneHistoryIncomeItem `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *RoomSceneHistoryIncomeResp) Reset() {
	*x = RoomSceneHistoryIncomeResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_live_room_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoomSceneHistoryIncomeResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoomSceneHistoryIncomeResp) ProtoMessage() {}

func (x *RoomSceneHistoryIncomeResp) ProtoReflect() protoreflect.Message {
	mi := &file_live_room_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoomSceneHistoryIncomeResp.ProtoReflect.Descriptor instead.
func (*RoomSceneHistoryIncomeResp) Descriptor() ([]byte, []int) {
	return file_live_room_proto_rawDescGZIP(), []int{21}
}

func (x *RoomSceneHistoryIncomeResp) GetList() []*RoomSceneHistoryIncomeResp_RoomSceneHistoryIncomeItem {
	if x != nil {
		return x.List
	}
	return nil
}

// 直播间礼物收益请求
type RoomReceiveGiftListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LastId   int32 `protobuf:"varint,1,opt,name=lastId,proto3" json:"lastId,omitempty"`
	PageSize int32 `protobuf:"varint,2,opt,name=pageSize,proto3" json:"pageSize,omitempty"`
}

func (x *RoomReceiveGiftListReq) Reset() {
	*x = RoomReceiveGiftListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_live_room_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoomReceiveGiftListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoomReceiveGiftListReq) ProtoMessage() {}

func (x *RoomReceiveGiftListReq) ProtoReflect() protoreflect.Message {
	mi := &file_live_room_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoomReceiveGiftListReq.ProtoReflect.Descriptor instead.
func (*RoomReceiveGiftListReq) Descriptor() ([]byte, []int) {
	return file_live_room_proto_rawDescGZIP(), []int{22}
}

func (x *RoomReceiveGiftListReq) GetLastId() int32 {
	if x != nil {
		return x.LastId
	}
	return 0
}

func (x *RoomReceiveGiftListReq) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

// 直播间收到礼物列表
type RoomReceiveGiftListResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*RoomReceiveGiftListResp_RoomReceiveGiftListItem `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *RoomReceiveGiftListResp) Reset() {
	*x = RoomReceiveGiftListResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_live_room_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoomReceiveGiftListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoomReceiveGiftListResp) ProtoMessage() {}

func (x *RoomReceiveGiftListResp) ProtoReflect() protoreflect.Message {
	mi := &file_live_room_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoomReceiveGiftListResp.ProtoReflect.Descriptor instead.
func (*RoomReceiveGiftListResp) Descriptor() ([]byte, []int) {
	return file_live_room_proto_rawDescGZIP(), []int{23}
}

func (x *RoomReceiveGiftListResp) GetList() []*RoomReceiveGiftListResp_RoomReceiveGiftListItem {
	if x != nil {
		return x.List
	}
	return nil
}

// 直播间弹幕纪录
type RoomReceiveBarrageListResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*RoomReceiveBarrageListResp_RoomReceiveBarrageListItem `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *RoomReceiveBarrageListResp) Reset() {
	*x = RoomReceiveBarrageListResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_live_room_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoomReceiveBarrageListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoomReceiveBarrageListResp) ProtoMessage() {}

func (x *RoomReceiveBarrageListResp) ProtoReflect() protoreflect.Message {
	mi := &file_live_room_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoomReceiveBarrageListResp.ProtoReflect.Descriptor instead.
func (*RoomReceiveBarrageListResp) Descriptor() ([]byte, []int) {
	return file_live_room_proto_rawDescGZIP(), []int{24}
}

func (x *RoomReceiveBarrageListResp) GetList() []*RoomReceiveBarrageListResp_RoomReceiveBarrageListItem {
	if x != nil {
		return x.List
	}
	return nil
}

// 首页推荐直播间
type HomeTopLiveRoomsResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*HomeTopLiveRoomsResp_HomeTopLiveRoomsItem `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *HomeTopLiveRoomsResp) Reset() {
	*x = HomeTopLiveRoomsResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_live_room_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HomeTopLiveRoomsResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HomeTopLiveRoomsResp) ProtoMessage() {}

func (x *HomeTopLiveRoomsResp) ProtoReflect() protoreflect.Message {
	mi := &file_live_room_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HomeTopLiveRoomsResp.ProtoReflect.Descriptor instead.
func (*HomeTopLiveRoomsResp) Descriptor() ([]byte, []int) {
	return file_live_room_proto_rawDescGZIP(), []int{25}
}

func (x *HomeTopLiveRoomsResp) GetList() []*HomeTopLiveRoomsResp_HomeTopLiveRoomsItem {
	if x != nil {
		return x.List
	}
	return nil
}

// 直播间推荐位
type TopLiveRoomReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Location int32 `protobuf:"varint,1,opt,name=location,proto3" json:"location,omitempty"` // 位置 默认0 1- 我的关注 2-搜索 3-直播间未开播
}

func (x *TopLiveRoomReq) Reset() {
	*x = TopLiveRoomReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_live_room_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TopLiveRoomReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TopLiveRoomReq) ProtoMessage() {}

func (x *TopLiveRoomReq) ProtoReflect() protoreflect.Message {
	mi := &file_live_room_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TopLiveRoomReq.ProtoReflect.Descriptor instead.
func (*TopLiveRoomReq) Descriptor() ([]byte, []int) {
	return file_live_room_proto_rawDescGZIP(), []int{26}
}

func (x *TopLiveRoomReq) GetLocation() int32 {
	if x != nil {
		return x.Location
	}
	return 0
}

// 推荐位直播间响应
type TopLiveRoomResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*TopLiveRoomResp_TopLiveRoomItem `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *TopLiveRoomResp) Reset() {
	*x = TopLiveRoomResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_live_room_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TopLiveRoomResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TopLiveRoomResp) ProtoMessage() {}

func (x *TopLiveRoomResp) ProtoReflect() protoreflect.Message {
	mi := &file_live_room_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TopLiveRoomResp.ProtoReflect.Descriptor instead.
func (*TopLiveRoomResp) Descriptor() ([]byte, []int) {
	return file_live_room_proto_rawDescGZIP(), []int{27}
}

func (x *TopLiveRoomResp) GetList() []*TopLiveRoomResp_TopLiveRoomItem {
	if x != nil {
		return x.List
	}
	return nil
}

// 我关注的主播直播间
type FollowLiveRoomResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*FollowLiveRoomResp_FollowLiveRoomItem `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *FollowLiveRoomResp) Reset() {
	*x = FollowLiveRoomResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_live_room_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FollowLiveRoomResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FollowLiveRoomResp) ProtoMessage() {}

func (x *FollowLiveRoomResp) ProtoReflect() protoreflect.Message {
	mi := &file_live_room_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FollowLiveRoomResp.ProtoReflect.Descriptor instead.
func (*FollowLiveRoomResp) Descriptor() ([]byte, []int) {
	return file_live_room_proto_rawDescGZIP(), []int{28}
}

func (x *FollowLiveRoomResp) GetList() []*FollowLiveRoomResp_FollowLiveRoomItem {
	if x != nil {
		return x.List
	}
	return nil
}

// 主播今日直播信息
type AnchorTodayBarrageInfoResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Duration    int32  `protobuf:"varint,1,opt,name=duration,proto3" json:"duration,omitempty"`      // 时长
	CountryCode string `protobuf:"bytes,2,opt,name=countryCode,proto3" json:"countryCode,omitempty"` // 直播间国家编码
}

func (x *AnchorTodayBarrageInfoResp) Reset() {
	*x = AnchorTodayBarrageInfoResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_live_room_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AnchorTodayBarrageInfoResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnchorTodayBarrageInfoResp) ProtoMessage() {}

func (x *AnchorTodayBarrageInfoResp) ProtoReflect() protoreflect.Message {
	mi := &file_live_room_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnchorTodayBarrageInfoResp.ProtoReflect.Descriptor instead.
func (*AnchorTodayBarrageInfoResp) Descriptor() ([]byte, []int) {
	return file_live_room_proto_rawDescGZIP(), []int{29}
}

func (x *AnchorTodayBarrageInfoResp) GetDuration() int32 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *AnchorTodayBarrageInfoResp) GetCountryCode() string {
	if x != nil {
		return x.CountryCode
	}
	return ""
}

// 分钟扣费收益通知
type LiveMinutePaidIncomeReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoomId     int32  `protobuf:"varint,1,opt,name=roomId,proto3" json:"roomId,omitempty"`        // 直播间id
	ChatRoomId string `protobuf:"bytes,2,opt,name=chatRoomId,proto3" json:"chatRoomId,omitempty"` // 聊天室id
	UserId     int32  `protobuf:"varint,3,opt,name=userId,proto3" json:"userId,omitempty"`        // 用户id
	AnchorId   int32  `protobuf:"varint,4,opt,name=anchorId,proto3" json:"anchorId,omitempty"`    // 主播id
	Amount     int32  `protobuf:"varint,5,opt,name=amount,proto3" json:"amount,omitempty"`        // 钻石金额
}

func (x *LiveMinutePaidIncomeReq) Reset() {
	*x = LiveMinutePaidIncomeReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_live_room_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LiveMinutePaidIncomeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LiveMinutePaidIncomeReq) ProtoMessage() {}

func (x *LiveMinutePaidIncomeReq) ProtoReflect() protoreflect.Message {
	mi := &file_live_room_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LiveMinutePaidIncomeReq.ProtoReflect.Descriptor instead.
func (*LiveMinutePaidIncomeReq) Descriptor() ([]byte, []int) {
	return file_live_room_proto_rawDescGZIP(), []int{30}
}

func (x *LiveMinutePaidIncomeReq) GetRoomId() int32 {
	if x != nil {
		return x.RoomId
	}
	return 0
}

func (x *LiveMinutePaidIncomeReq) GetChatRoomId() string {
	if x != nil {
		return x.ChatRoomId
	}
	return ""
}

func (x *LiveMinutePaidIncomeReq) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *LiveMinutePaidIncomeReq) GetAnchorId() int32 {
	if x != nil {
		return x.AnchorId
	}
	return 0
}

func (x *LiveMinutePaidIncomeReq) GetAmount() int32 {
	if x != nil {
		return x.Amount
	}
	return 0
}

// 后台开播请求信息
type GMRoomStartBroadcastReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title         string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`                  // 直播间标题
	Cover         string `protobuf:"bytes,2,opt,name=cover,proto3" json:"cover,omitempty"`                  // 封面图片
	PayRules      int32  `protobuf:"varint,3,opt,name=payRules,proto3" json:"payRules,omitempty"`           // 付费规则 1- 免费 2-分钟付费 3-场次付费
	TrialDuration int32  `protobuf:"varint,4,opt,name=trialDuration,proto3" json:"trialDuration,omitempty"` // 试看时长/秒
	UnitPrice     int32  `protobuf:"varint,5,opt,name=unitPrice,proto3" json:"unitPrice,omitempty"`         // 单价 每分钟单价/每场单价，根据付费规则
	Summary       string `protobuf:"bytes,6,opt,name=summary,proto3" json:"summary,omitempty"`              // 简介
	StreamUrl     string `protobuf:"bytes,7,opt,name=streamUrl,proto3" json:"streamUrl,omitempty"`          // 流地址
	RoomId        int32  `protobuf:"varint,8,opt,name=roomId,proto3" json:"roomId,omitempty"`               // 直播间id
}

func (x *GMRoomStartBroadcastReq) Reset() {
	*x = GMRoomStartBroadcastReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_live_room_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GMRoomStartBroadcastReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GMRoomStartBroadcastReq) ProtoMessage() {}

func (x *GMRoomStartBroadcastReq) ProtoReflect() protoreflect.Message {
	mi := &file_live_room_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GMRoomStartBroadcastReq.ProtoReflect.Descriptor instead.
func (*GMRoomStartBroadcastReq) Descriptor() ([]byte, []int) {
	return file_live_room_proto_rawDescGZIP(), []int{31}
}

func (x *GMRoomStartBroadcastReq) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *GMRoomStartBroadcastReq) GetCover() string {
	if x != nil {
		return x.Cover
	}
	return ""
}

func (x *GMRoomStartBroadcastReq) GetPayRules() int32 {
	if x != nil {
		return x.PayRules
	}
	return 0
}

func (x *GMRoomStartBroadcastReq) GetTrialDuration() int32 {
	if x != nil {
		return x.TrialDuration
	}
	return 0
}

func (x *GMRoomStartBroadcastReq) GetUnitPrice() int32 {
	if x != nil {
		return x.UnitPrice
	}
	return 0
}

func (x *GMRoomStartBroadcastReq) GetSummary() string {
	if x != nil {
		return x.Summary
	}
	return ""
}

func (x *GMRoomStartBroadcastReq) GetStreamUrl() string {
	if x != nil {
		return x.StreamUrl
	}
	return ""
}

func (x *GMRoomStartBroadcastReq) GetRoomId() int32 {
	if x != nil {
		return x.RoomId
	}
	return 0
}

// 主播开播转付费
type AnchorRoomTransferPayReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PayRules      int32 `protobuf:"varint,1,opt,name=payRules,proto3" json:"payRules,omitempty"`           // 付费规则 1- 免费 2-分钟付费 3-场次付费
	UnitPrice     int32 `protobuf:"varint,2,opt,name=unitPrice,proto3" json:"unitPrice,omitempty"`         // 单价 每分钟单价/每场单价，根据付费规则
	TrialDuration int32 `protobuf:"varint,3,opt,name=trialDuration,proto3" json:"trialDuration,omitempty"` // 试看时长/秒
}

func (x *AnchorRoomTransferPayReq) Reset() {
	*x = AnchorRoomTransferPayReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_live_room_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AnchorRoomTransferPayReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnchorRoomTransferPayReq) ProtoMessage() {}

func (x *AnchorRoomTransferPayReq) ProtoReflect() protoreflect.Message {
	mi := &file_live_room_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnchorRoomTransferPayReq.ProtoReflect.Descriptor instead.
func (*AnchorRoomTransferPayReq) Descriptor() ([]byte, []int) {
	return file_live_room_proto_rawDescGZIP(), []int{32}
}

func (x *AnchorRoomTransferPayReq) GetPayRules() int32 {
	if x != nil {
		return x.PayRules
	}
	return 0
}

func (x *AnchorRoomTransferPayReq) GetUnitPrice() int32 {
	if x != nil {
		return x.UnitPrice
	}
	return 0
}

func (x *AnchorRoomTransferPayReq) GetTrialDuration() int32 {
	if x != nil {
		return x.TrialDuration
	}
	return 0
}

type RoomOpListResp_RoomOpListItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId   int32  `protobuf:"varint,1,opt,name=userId,proto3" json:"userId,omitempty"`
	Nickname string `protobuf:"bytes,2,opt,name=nickname,proto3" json:"nickname,omitempty"`
	LevelId  int32  `protobuf:"varint,3,opt,name=levelId,proto3" json:"levelId,omitempty"`
	Avatar   string `protobuf:"bytes,4,opt,name=avatar,proto3" json:"avatar,omitempty"`
	Sex      int32  `protobuf:"varint,5,opt,name=sex,proto3" json:"sex,omitempty"`
}

func (x *RoomOpListResp_RoomOpListItem) Reset() {
	*x = RoomOpListResp_RoomOpListItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_live_room_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoomOpListResp_RoomOpListItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoomOpListResp_RoomOpListItem) ProtoMessage() {}

func (x *RoomOpListResp_RoomOpListItem) ProtoReflect() protoreflect.Message {
	mi := &file_live_room_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoomOpListResp_RoomOpListItem.ProtoReflect.Descriptor instead.
func (*RoomOpListResp_RoomOpListItem) Descriptor() ([]byte, []int) {
	return file_live_room_proto_rawDescGZIP(), []int{6, 0}
}

func (x *RoomOpListResp_RoomOpListItem) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *RoomOpListResp_RoomOpListItem) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

func (x *RoomOpListResp_RoomOpListItem) GetLevelId() int32 {
	if x != nil {
		return x.LevelId
	}
	return 0
}

func (x *RoomOpListResp_RoomOpListItem) GetAvatar() string {
	if x != nil {
		return x.Avatar
	}
	return ""
}

func (x *RoomOpListResp_RoomOpListItem) GetSex() int32 {
	if x != nil {
		return x.Sex
	}
	return 0
}

type ListLiveRoomsResp_ListLiveRoomsItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             int32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                         // 直播间id
	Name           string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`                      // 直播间名称
	Cover          string `protobuf:"bytes,3,opt,name=cover,proto3" json:"cover,omitempty"`                    // 直播间封面
	CountryCode    string `protobuf:"bytes,4,opt,name=countryCode,proto3" json:"countryCode,omitempty"`        // 国家code
	OnlineNum      int32  `protobuf:"varint,5,opt,name=onlineNum,proto3" json:"onlineNum,omitempty"`           // 在线人数
	UserId         int32  `protobuf:"varint,6,opt,name=userId,proto3" json:"userId,omitempty"`                 // 主播id
	ChatRoomId     string `protobuf:"bytes,7,opt,name=chatRoomId,proto3" json:"chatRoomId,omitempty"`          // 聊天室id
	IsOpenVibrator int32  `protobuf:"varint,8,opt,name=isOpenVibrator,proto3" json:"isOpenVibrator,omitempty"` // 是否开启跳蛋
	PayRules       int32  `protobuf:"varint,9,opt,name=payRules,proto3" json:"payRules,omitempty"`             // 付费规则 1- 免费 2-分钟付费 3-场次付费
	TrialDuration  int32  `protobuf:"varint,10,opt,name=trialDuration,proto3" json:"trialDuration,omitempty"`  // 试看时长/秒
	UnitPrice      int32  `protobuf:"varint,11,opt,name=unitPrice,proto3" json:"unitPrice,omitempty"`          // 单价 每分钟单价/每场单价，根据付费规则
	Heat           int32  `protobuf:"varint,12,opt,name=heat,proto3" json:"heat,omitempty"`                    // 热度
}

func (x *ListLiveRoomsResp_ListLiveRoomsItem) Reset() {
	*x = ListLiveRoomsResp_ListLiveRoomsItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_live_room_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListLiveRoomsResp_ListLiveRoomsItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListLiveRoomsResp_ListLiveRoomsItem) ProtoMessage() {}

func (x *ListLiveRoomsResp_ListLiveRoomsItem) ProtoReflect() protoreflect.Message {
	mi := &file_live_room_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListLiveRoomsResp_ListLiveRoomsItem.ProtoReflect.Descriptor instead.
func (*ListLiveRoomsResp_ListLiveRoomsItem) Descriptor() ([]byte, []int) {
	return file_live_room_proto_rawDescGZIP(), []int{8, 0}
}

func (x *ListLiveRoomsResp_ListLiveRoomsItem) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ListLiveRoomsResp_ListLiveRoomsItem) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ListLiveRoomsResp_ListLiveRoomsItem) GetCover() string {
	if x != nil {
		return x.Cover
	}
	return ""
}

func (x *ListLiveRoomsResp_ListLiveRoomsItem) GetCountryCode() string {
	if x != nil {
		return x.CountryCode
	}
	return ""
}

func (x *ListLiveRoomsResp_ListLiveRoomsItem) GetOnlineNum() int32 {
	if x != nil {
		return x.OnlineNum
	}
	return 0
}

func (x *ListLiveRoomsResp_ListLiveRoomsItem) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ListLiveRoomsResp_ListLiveRoomsItem) GetChatRoomId() string {
	if x != nil {
		return x.ChatRoomId
	}
	return ""
}

func (x *ListLiveRoomsResp_ListLiveRoomsItem) GetIsOpenVibrator() int32 {
	if x != nil {
		return x.IsOpenVibrator
	}
	return 0
}

func (x *ListLiveRoomsResp_ListLiveRoomsItem) GetPayRules() int32 {
	if x != nil {
		return x.PayRules
	}
	return 0
}

func (x *ListLiveRoomsResp_ListLiveRoomsItem) GetTrialDuration() int32 {
	if x != nil {
		return x.TrialDuration
	}
	return 0
}

func (x *ListLiveRoomsResp_ListLiveRoomsItem) GetUnitPrice() int32 {
	if x != nil {
		return x.UnitPrice
	}
	return 0
}

func (x *ListLiveRoomsResp_ListLiveRoomsItem) GetHeat() int32 {
	if x != nil {
		return x.Heat
	}
	return 0
}

type SearchAnchorResp_SearchAnchorItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId      int32  `protobuf:"varint,1,opt,name=userId,proto3" json:"userId,omitempty"`
	CountryCode string `protobuf:"bytes,2,opt,name=countryCode,proto3" json:"countryCode,omitempty"`
	Avatar      string `protobuf:"bytes,3,opt,name=avatar,proto3" json:"avatar,omitempty"`
	Nickname    string `protobuf:"bytes,4,opt,name=nickname,proto3" json:"nickname,omitempty"`
	Category    int32  `protobuf:"varint,5,opt,name=category,proto3" json:"category,omitempty"`      // 类型 1-用户 2-主播 3-机器人
	Status      int32  `protobuf:"varint,6,opt,name=status,proto3" json:"status,omitempty"`          // 账号状态 1-正常 2-禁用 3-删除
	ChatUUID    string `protobuf:"bytes,7,opt,name=chatUUID,proto3" json:"chatUUID,omitempty"`       // 聊天室uuid
	LevelId     int32  `protobuf:"varint,8,opt,name=levelId,proto3" json:"levelId,omitempty"`        // 等级id
	Sign        string `protobuf:"bytes,9,opt,name=sign,proto3" json:"sign,omitempty"`               // 签名
	Sex         int32  `protobuf:"varint,10,opt,name=sex,proto3" json:"sex,omitempty"`               // 性别 1-男 2-女
	SetLevelId  int32  `protobuf:"varint,11,opt,name=setLevelId,proto3" json:"setLevelId,omitempty"` // 后台设置等级
}

func (x *SearchAnchorResp_SearchAnchorItem) Reset() {
	*x = SearchAnchorResp_SearchAnchorItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_live_room_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchAnchorResp_SearchAnchorItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchAnchorResp_SearchAnchorItem) ProtoMessage() {}

func (x *SearchAnchorResp_SearchAnchorItem) ProtoReflect() protoreflect.Message {
	mi := &file_live_room_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchAnchorResp_SearchAnchorItem.ProtoReflect.Descriptor instead.
func (*SearchAnchorResp_SearchAnchorItem) Descriptor() ([]byte, []int) {
	return file_live_room_proto_rawDescGZIP(), []int{10, 0}
}

func (x *SearchAnchorResp_SearchAnchorItem) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *SearchAnchorResp_SearchAnchorItem) GetCountryCode() string {
	if x != nil {
		return x.CountryCode
	}
	return ""
}

func (x *SearchAnchorResp_SearchAnchorItem) GetAvatar() string {
	if x != nil {
		return x.Avatar
	}
	return ""
}

func (x *SearchAnchorResp_SearchAnchorItem) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

func (x *SearchAnchorResp_SearchAnchorItem) GetCategory() int32 {
	if x != nil {
		return x.Category
	}
	return 0
}

func (x *SearchAnchorResp_SearchAnchorItem) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *SearchAnchorResp_SearchAnchorItem) GetChatUUID() string {
	if x != nil {
		return x.ChatUUID
	}
	return ""
}

func (x *SearchAnchorResp_SearchAnchorItem) GetLevelId() int32 {
	if x != nil {
		return x.LevelId
	}
	return 0
}

func (x *SearchAnchorResp_SearchAnchorItem) GetSign() string {
	if x != nil {
		return x.Sign
	}
	return ""
}

func (x *SearchAnchorResp_SearchAnchorItem) GetSex() int32 {
	if x != nil {
		return x.Sex
	}
	return 0
}

func (x *SearchAnchorResp_SearchAnchorItem) GetSetLevelId() int32 {
	if x != nil {
		return x.SetLevelId
	}
	return 0
}

type RoomListManageResp_RoomListManageItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       int32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	UserId   int32  `protobuf:"varint,2,opt,name=userId,proto3" json:"userId,omitempty"`    // 用户id
	Nickname string `protobuf:"bytes,3,opt,name=nickname,proto3" json:"nickname,omitempty"` // 昵称
	Avatar   string `protobuf:"bytes,4,opt,name=avatar,proto3" json:"avatar,omitempty"`     // 头像
	LevelId  int32  `protobuf:"varint,5,opt,name=levelId,proto3" json:"levelId,omitempty"`  // 等级id
	Sex      int32  `protobuf:"varint,6,opt,name=sex,proto3" json:"sex,omitempty"`          // 性别
}

func (x *RoomListManageResp_RoomListManageItem) Reset() {
	*x = RoomListManageResp_RoomListManageItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_live_room_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoomListManageResp_RoomListManageItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoomListManageResp_RoomListManageItem) ProtoMessage() {}

func (x *RoomListManageResp_RoomListManageItem) ProtoReflect() protoreflect.Message {
	mi := &file_live_room_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoomListManageResp_RoomListManageItem.ProtoReflect.Descriptor instead.
func (*RoomListManageResp_RoomListManageItem) Descriptor() ([]byte, []int) {
	return file_live_room_proto_rawDescGZIP(), []int{14, 0}
}

func (x *RoomListManageResp_RoomListManageItem) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *RoomListManageResp_RoomListManageItem) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *RoomListManageResp_RoomListManageItem) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

func (x *RoomListManageResp_RoomListManageItem) GetAvatar() string {
	if x != nil {
		return x.Avatar
	}
	return ""
}

func (x *RoomListManageResp_RoomListManageItem) GetLevelId() int32 {
	if x != nil {
		return x.LevelId
	}
	return 0
}

func (x *RoomListManageResp_RoomListManageItem) GetSex() int32 {
	if x != nil {
		return x.Sex
	}
	return 0
}

type RoomSceneHistoryResp_RoomSceneHistoryItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartTime    int32 `protobuf:"varint,1,opt,name=startTime,proto3" json:"startTime,omitempty"`       // 开播时间
	EndTime      int32 `protobuf:"varint,2,opt,name=endTime,proto3" json:"endTime,omitempty"`           // 下播时间
	Duration     int32 `protobuf:"varint,3,opt,name=duration,proto3" json:"duration,omitempty"`         // 时长
	ViewersCount int32 `protobuf:"varint,4,opt,name=viewersCount,proto3" json:"viewersCount,omitempty"` // 观看人数
	GiftAmount   int32 `protobuf:"varint,5,opt,name=giftAmount,proto3" json:"giftAmount,omitempty"`     // 礼物金额
	FollowCount  int32 `protobuf:"varint,6,opt,name=followCount,proto3" json:"followCount,omitempty"`   // 礼物金额
	SceneId      int32 `protobuf:"varint,7,opt,name=sceneId,proto3" json:"sceneId,omitempty"`           // 场次id
}

func (x *RoomSceneHistoryResp_RoomSceneHistoryItem) Reset() {
	*x = RoomSceneHistoryResp_RoomSceneHistoryItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_live_room_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoomSceneHistoryResp_RoomSceneHistoryItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoomSceneHistoryResp_RoomSceneHistoryItem) ProtoMessage() {}

func (x *RoomSceneHistoryResp_RoomSceneHistoryItem) ProtoReflect() protoreflect.Message {
	mi := &file_live_room_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoomSceneHistoryResp_RoomSceneHistoryItem.ProtoReflect.Descriptor instead.
func (*RoomSceneHistoryResp_RoomSceneHistoryItem) Descriptor() ([]byte, []int) {
	return file_live_room_proto_rawDescGZIP(), []int{19, 0}
}

func (x *RoomSceneHistoryResp_RoomSceneHistoryItem) GetStartTime() int32 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *RoomSceneHistoryResp_RoomSceneHistoryItem) GetEndTime() int32 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *RoomSceneHistoryResp_RoomSceneHistoryItem) GetDuration() int32 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *RoomSceneHistoryResp_RoomSceneHistoryItem) GetViewersCount() int32 {
	if x != nil {
		return x.ViewersCount
	}
	return 0
}

func (x *RoomSceneHistoryResp_RoomSceneHistoryItem) GetGiftAmount() int32 {
	if x != nil {
		return x.GiftAmount
	}
	return 0
}

func (x *RoomSceneHistoryResp_RoomSceneHistoryItem) GetFollowCount() int32 {
	if x != nil {
		return x.FollowCount
	}
	return 0
}

func (x *RoomSceneHistoryResp_RoomSceneHistoryItem) GetSceneId() int32 {
	if x != nil {
		return x.SceneId
	}
	return 0
}

type RoomSceneHistoryIncomeResp_RoomSceneHistoryIncomeItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Nickname     string `protobuf:"bytes,1,opt,name=nickname,proto3" json:"nickname,omitempty"`          // 用户昵称
	Category     int32  `protobuf:"varint,2,opt,name=category,proto3" json:"category,omitempty"`         // 类别 1-礼物 2-弹幕 3-游戏 4-直播收费 5-道具
	Num          int32  `protobuf:"varint,3,opt,name=num,proto3" json:"num,omitempty"`                   // 礼物数量
	ProjectTotal int32  `protobuf:"varint,4,opt,name=projectTotal,proto3" json:"projectTotal,omitempty"` // 金额
	SendTime     int32  `protobuf:"varint,5,opt,name=sendTime,proto3" json:"sendTime,omitempty"`         // 收益时间
}

func (x *RoomSceneHistoryIncomeResp_RoomSceneHistoryIncomeItem) Reset() {
	*x = RoomSceneHistoryIncomeResp_RoomSceneHistoryIncomeItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_live_room_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoomSceneHistoryIncomeResp_RoomSceneHistoryIncomeItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoomSceneHistoryIncomeResp_RoomSceneHistoryIncomeItem) ProtoMessage() {}

func (x *RoomSceneHistoryIncomeResp_RoomSceneHistoryIncomeItem) ProtoReflect() protoreflect.Message {
	mi := &file_live_room_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoomSceneHistoryIncomeResp_RoomSceneHistoryIncomeItem.ProtoReflect.Descriptor instead.
func (*RoomSceneHistoryIncomeResp_RoomSceneHistoryIncomeItem) Descriptor() ([]byte, []int) {
	return file_live_room_proto_rawDescGZIP(), []int{21, 0}
}

func (x *RoomSceneHistoryIncomeResp_RoomSceneHistoryIncomeItem) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

func (x *RoomSceneHistoryIncomeResp_RoomSceneHistoryIncomeItem) GetCategory() int32 {
	if x != nil {
		return x.Category
	}
	return 0
}

func (x *RoomSceneHistoryIncomeResp_RoomSceneHistoryIncomeItem) GetNum() int32 {
	if x != nil {
		return x.Num
	}
	return 0
}

func (x *RoomSceneHistoryIncomeResp_RoomSceneHistoryIncomeItem) GetProjectTotal() int32 {
	if x != nil {
		return x.ProjectTotal
	}
	return 0
}

func (x *RoomSceneHistoryIncomeResp_RoomSceneHistoryIncomeItem) GetSendTime() int32 {
	if x != nil {
		return x.SendTime
	}
	return 0
}

type RoomReceiveGiftListResp_RoomReceiveGiftListItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         int32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	UserId     int32  `protobuf:"varint,2,opt,name=userId,proto3" json:"userId,omitempty"`         // 用户id
	Nickname   string `protobuf:"bytes,3,opt,name=nickname,proto3" json:"nickname,omitempty"`      // 昵称
	Avatar     string `protobuf:"bytes,4,opt,name=avatar,proto3" json:"avatar,omitempty"`          // 头像
	LevelId    int32  `protobuf:"varint,5,opt,name=levelId,proto3" json:"levelId,omitempty"`       // 等级id
	Sex        int32  `protobuf:"varint,6,opt,name=sex,proto3" json:"sex,omitempty"`               // 性别
	GiftId     int32  `protobuf:"varint,7,opt,name=giftId,proto3" json:"giftId,omitempty"`         // 礼物id
	GiftNum    int32  `protobuf:"varint,8,opt,name=giftNum,proto3" json:"giftNum,omitempty"`       // 礼物数量
	GiftAmount int32  `protobuf:"varint,9,opt,name=giftAmount,proto3" json:"giftAmount,omitempty"` // 礼物金额
	SendTime   int32  `protobuf:"varint,10,opt,name=sendTime,proto3" json:"sendTime,omitempty"`    // 送礼物时间
}

func (x *RoomReceiveGiftListResp_RoomReceiveGiftListItem) Reset() {
	*x = RoomReceiveGiftListResp_RoomReceiveGiftListItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_live_room_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoomReceiveGiftListResp_RoomReceiveGiftListItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoomReceiveGiftListResp_RoomReceiveGiftListItem) ProtoMessage() {}

func (x *RoomReceiveGiftListResp_RoomReceiveGiftListItem) ProtoReflect() protoreflect.Message {
	mi := &file_live_room_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoomReceiveGiftListResp_RoomReceiveGiftListItem.ProtoReflect.Descriptor instead.
func (*RoomReceiveGiftListResp_RoomReceiveGiftListItem) Descriptor() ([]byte, []int) {
	return file_live_room_proto_rawDescGZIP(), []int{23, 0}
}

func (x *RoomReceiveGiftListResp_RoomReceiveGiftListItem) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *RoomReceiveGiftListResp_RoomReceiveGiftListItem) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *RoomReceiveGiftListResp_RoomReceiveGiftListItem) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

func (x *RoomReceiveGiftListResp_RoomReceiveGiftListItem) GetAvatar() string {
	if x != nil {
		return x.Avatar
	}
	return ""
}

func (x *RoomReceiveGiftListResp_RoomReceiveGiftListItem) GetLevelId() int32 {
	if x != nil {
		return x.LevelId
	}
	return 0
}

func (x *RoomReceiveGiftListResp_RoomReceiveGiftListItem) GetSex() int32 {
	if x != nil {
		return x.Sex
	}
	return 0
}

func (x *RoomReceiveGiftListResp_RoomReceiveGiftListItem) GetGiftId() int32 {
	if x != nil {
		return x.GiftId
	}
	return 0
}

func (x *RoomReceiveGiftListResp_RoomReceiveGiftListItem) GetGiftNum() int32 {
	if x != nil {
		return x.GiftNum
	}
	return 0
}

func (x *RoomReceiveGiftListResp_RoomReceiveGiftListItem) GetGiftAmount() int32 {
	if x != nil {
		return x.GiftAmount
	}
	return 0
}

func (x *RoomReceiveGiftListResp_RoomReceiveGiftListItem) GetSendTime() int32 {
	if x != nil {
		return x.SendTime
	}
	return 0
}

type RoomReceiveBarrageListResp_RoomReceiveBarrageListItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId   int32  `protobuf:"varint,2,opt,name=userId,proto3" json:"userId,omitempty"`    // 用户id
	Nickname string `protobuf:"bytes,3,opt,name=nickname,proto3" json:"nickname,omitempty"` // 昵称
	Avatar   string `protobuf:"bytes,4,opt,name=avatar,proto3" json:"avatar,omitempty"`     // 头像
	LevelId  int32  `protobuf:"varint,5,opt,name=levelId,proto3" json:"levelId,omitempty"`  // 等级id
	Sex      int32  `protobuf:"varint,6,opt,name=sex,proto3" json:"sex,omitempty"`          // 性别
	Message  string `protobuf:"bytes,7,opt,name=message,proto3" json:"message,omitempty"`   // 消息
}

func (x *RoomReceiveBarrageListResp_RoomReceiveBarrageListItem) Reset() {
	*x = RoomReceiveBarrageListResp_RoomReceiveBarrageListItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_live_room_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoomReceiveBarrageListResp_RoomReceiveBarrageListItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoomReceiveBarrageListResp_RoomReceiveBarrageListItem) ProtoMessage() {}

func (x *RoomReceiveBarrageListResp_RoomReceiveBarrageListItem) ProtoReflect() protoreflect.Message {
	mi := &file_live_room_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoomReceiveBarrageListResp_RoomReceiveBarrageListItem.ProtoReflect.Descriptor instead.
func (*RoomReceiveBarrageListResp_RoomReceiveBarrageListItem) Descriptor() ([]byte, []int) {
	return file_live_room_proto_rawDescGZIP(), []int{24, 0}
}

func (x *RoomReceiveBarrageListResp_RoomReceiveBarrageListItem) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *RoomReceiveBarrageListResp_RoomReceiveBarrageListItem) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

func (x *RoomReceiveBarrageListResp_RoomReceiveBarrageListItem) GetAvatar() string {
	if x != nil {
		return x.Avatar
	}
	return ""
}

func (x *RoomReceiveBarrageListResp_RoomReceiveBarrageListItem) GetLevelId() int32 {
	if x != nil {
		return x.LevelId
	}
	return 0
}

func (x *RoomReceiveBarrageListResp_RoomReceiveBarrageListItem) GetSex() int32 {
	if x != nil {
		return x.Sex
	}
	return 0
}

func (x *RoomReceiveBarrageListResp_RoomReceiveBarrageListItem) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type HomeTopLiveRoomsResp_HomeTopLiveRoomsItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             int32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                         // 直播间id
	Name           string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`                      // 直播间名称
	Cover          string `protobuf:"bytes,3,opt,name=cover,proto3" json:"cover,omitempty"`                    // 直播间封面
	CountryCode    string `protobuf:"bytes,4,opt,name=countryCode,proto3" json:"countryCode,omitempty"`        // 国家code
	OnlineNum      int32  `protobuf:"varint,5,opt,name=onlineNum,proto3" json:"onlineNum,omitempty"`           // 在线人数
	UserId         int32  `protobuf:"varint,6,opt,name=userId,proto3" json:"userId,omitempty"`                 // 主播id
	ChatRoomId     string `protobuf:"bytes,7,opt,name=chatRoomId,proto3" json:"chatRoomId,omitempty"`          // 聊天室id
	IsOpenVibrator int32  `protobuf:"varint,8,opt,name=isOpenVibrator,proto3" json:"isOpenVibrator,omitempty"` // 是否开启跳蛋
	PayRules       int32  `protobuf:"varint,9,opt,name=payRules,proto3" json:"payRules,omitempty"`             // 付费规则 1- 免费 2-分钟付费 3-场次付费
	TrialDuration  int32  `protobuf:"varint,10,opt,name=trialDuration,proto3" json:"trialDuration,omitempty"`  // 试看时长/秒
	UnitPrice      int32  `protobuf:"varint,11,opt,name=unitPrice,proto3" json:"unitPrice,omitempty"`          // 单价 每分钟单价/每场单价，根据付费规则
	Heat           int32  `protobuf:"varint,12,opt,name=heat,proto3" json:"heat,omitempty"`                    // 热度
}

func (x *HomeTopLiveRoomsResp_HomeTopLiveRoomsItem) Reset() {
	*x = HomeTopLiveRoomsResp_HomeTopLiveRoomsItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_live_room_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HomeTopLiveRoomsResp_HomeTopLiveRoomsItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HomeTopLiveRoomsResp_HomeTopLiveRoomsItem) ProtoMessage() {}

func (x *HomeTopLiveRoomsResp_HomeTopLiveRoomsItem) ProtoReflect() protoreflect.Message {
	mi := &file_live_room_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HomeTopLiveRoomsResp_HomeTopLiveRoomsItem.ProtoReflect.Descriptor instead.
func (*HomeTopLiveRoomsResp_HomeTopLiveRoomsItem) Descriptor() ([]byte, []int) {
	return file_live_room_proto_rawDescGZIP(), []int{25, 0}
}

func (x *HomeTopLiveRoomsResp_HomeTopLiveRoomsItem) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *HomeTopLiveRoomsResp_HomeTopLiveRoomsItem) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *HomeTopLiveRoomsResp_HomeTopLiveRoomsItem) GetCover() string {
	if x != nil {
		return x.Cover
	}
	return ""
}

func (x *HomeTopLiveRoomsResp_HomeTopLiveRoomsItem) GetCountryCode() string {
	if x != nil {
		return x.CountryCode
	}
	return ""
}

func (x *HomeTopLiveRoomsResp_HomeTopLiveRoomsItem) GetOnlineNum() int32 {
	if x != nil {
		return x.OnlineNum
	}
	return 0
}

func (x *HomeTopLiveRoomsResp_HomeTopLiveRoomsItem) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *HomeTopLiveRoomsResp_HomeTopLiveRoomsItem) GetChatRoomId() string {
	if x != nil {
		return x.ChatRoomId
	}
	return ""
}

func (x *HomeTopLiveRoomsResp_HomeTopLiveRoomsItem) GetIsOpenVibrator() int32 {
	if x != nil {
		return x.IsOpenVibrator
	}
	return 0
}

func (x *HomeTopLiveRoomsResp_HomeTopLiveRoomsItem) GetPayRules() int32 {
	if x != nil {
		return x.PayRules
	}
	return 0
}

func (x *HomeTopLiveRoomsResp_HomeTopLiveRoomsItem) GetTrialDuration() int32 {
	if x != nil {
		return x.TrialDuration
	}
	return 0
}

func (x *HomeTopLiveRoomsResp_HomeTopLiveRoomsItem) GetUnitPrice() int32 {
	if x != nil {
		return x.UnitPrice
	}
	return 0
}

func (x *HomeTopLiveRoomsResp_HomeTopLiveRoomsItem) GetHeat() int32 {
	if x != nil {
		return x.Heat
	}
	return 0
}

type TopLiveRoomResp_TopLiveRoomItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             int32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                         // 直播间id
	Name           string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`                      // 直播间名称
	Cover          string `protobuf:"bytes,3,opt,name=cover,proto3" json:"cover,omitempty"`                    // 直播间封面
	CountryCode    string `protobuf:"bytes,4,opt,name=countryCode,proto3" json:"countryCode,omitempty"`        // 国家code
	OnlineNum      int32  `protobuf:"varint,5,opt,name=onlineNum,proto3" json:"onlineNum,omitempty"`           // 在线人数
	UserId         int32  `protobuf:"varint,6,opt,name=userId,proto3" json:"userId,omitempty"`                 // 主播id
	ChatRoomId     string `protobuf:"bytes,7,opt,name=chatRoomId,proto3" json:"chatRoomId,omitempty"`          // 聊天室id
	IsOpenVibrator int32  `protobuf:"varint,8,opt,name=isOpenVibrator,proto3" json:"isOpenVibrator,omitempty"` // 是否开启跳蛋
	PayRules       int32  `protobuf:"varint,9,opt,name=payRules,proto3" json:"payRules,omitempty"`             // 付费规则 1- 免费 2-分钟付费 3-场次付费
	TrialDuration  int32  `protobuf:"varint,10,opt,name=trialDuration,proto3" json:"trialDuration,omitempty"`  // 试看时长/秒
	UnitPrice      int32  `protobuf:"varint,11,opt,name=unitPrice,proto3" json:"unitPrice,omitempty"`          // 单价 每分钟单价/每场单价，根据付费规则
	Heat           int32  `protobuf:"varint,12,opt,name=heat,proto3" json:"heat,omitempty"`                    // 热度
}

func (x *TopLiveRoomResp_TopLiveRoomItem) Reset() {
	*x = TopLiveRoomResp_TopLiveRoomItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_live_room_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TopLiveRoomResp_TopLiveRoomItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TopLiveRoomResp_TopLiveRoomItem) ProtoMessage() {}

func (x *TopLiveRoomResp_TopLiveRoomItem) ProtoReflect() protoreflect.Message {
	mi := &file_live_room_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TopLiveRoomResp_TopLiveRoomItem.ProtoReflect.Descriptor instead.
func (*TopLiveRoomResp_TopLiveRoomItem) Descriptor() ([]byte, []int) {
	return file_live_room_proto_rawDescGZIP(), []int{27, 0}
}

func (x *TopLiveRoomResp_TopLiveRoomItem) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *TopLiveRoomResp_TopLiveRoomItem) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TopLiveRoomResp_TopLiveRoomItem) GetCover() string {
	if x != nil {
		return x.Cover
	}
	return ""
}

func (x *TopLiveRoomResp_TopLiveRoomItem) GetCountryCode() string {
	if x != nil {
		return x.CountryCode
	}
	return ""
}

func (x *TopLiveRoomResp_TopLiveRoomItem) GetOnlineNum() int32 {
	if x != nil {
		return x.OnlineNum
	}
	return 0
}

func (x *TopLiveRoomResp_TopLiveRoomItem) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *TopLiveRoomResp_TopLiveRoomItem) GetChatRoomId() string {
	if x != nil {
		return x.ChatRoomId
	}
	return ""
}

func (x *TopLiveRoomResp_TopLiveRoomItem) GetIsOpenVibrator() int32 {
	if x != nil {
		return x.IsOpenVibrator
	}
	return 0
}

func (x *TopLiveRoomResp_TopLiveRoomItem) GetPayRules() int32 {
	if x != nil {
		return x.PayRules
	}
	return 0
}

func (x *TopLiveRoomResp_TopLiveRoomItem) GetTrialDuration() int32 {
	if x != nil {
		return x.TrialDuration
	}
	return 0
}

func (x *TopLiveRoomResp_TopLiveRoomItem) GetUnitPrice() int32 {
	if x != nil {
		return x.UnitPrice
	}
	return 0
}

func (x *TopLiveRoomResp_TopLiveRoomItem) GetHeat() int32 {
	if x != nil {
		return x.Heat
	}
	return 0
}

type FollowLiveRoomResp_FollowLiveRoomItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             int32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                         // 直播间id
	Name           string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`                      // 直播间名称
	Cover          string `protobuf:"bytes,3,opt,name=cover,proto3" json:"cover,omitempty"`                    // 直播间封面
	CountryCode    string `protobuf:"bytes,4,opt,name=countryCode,proto3" json:"countryCode,omitempty"`        // 国家code
	OnlineNum      int32  `protobuf:"varint,5,opt,name=onlineNum,proto3" json:"onlineNum,omitempty"`           // 在线人数
	UserId         int32  `protobuf:"varint,6,opt,name=userId,proto3" json:"userId,omitempty"`                 // 主播id
	ChatRoomId     string `protobuf:"bytes,7,opt,name=chatRoomId,proto3" json:"chatRoomId,omitempty"`          // 聊天室id
	IsOpenVibrator int32  `protobuf:"varint,8,opt,name=isOpenVibrator,proto3" json:"isOpenVibrator,omitempty"` // 是否开启跳蛋
	PayRules       int32  `protobuf:"varint,9,opt,name=payRules,proto3" json:"payRules,omitempty"`             // 付费规则 1- 免费 2-分钟付费 3-场次付费
	TrialDuration  int32  `protobuf:"varint,10,opt,name=trialDuration,proto3" json:"trialDuration,omitempty"`  // 试看时长/秒
	UnitPrice      int32  `protobuf:"varint,11,opt,name=unitPrice,proto3" json:"unitPrice,omitempty"`          // 单价 每分钟单价/每场单价，根据付费规则
	Heat           int32  `protobuf:"varint,12,opt,name=heat,proto3" json:"heat,omitempty"`                    // 热度
}

func (x *FollowLiveRoomResp_FollowLiveRoomItem) Reset() {
	*x = FollowLiveRoomResp_FollowLiveRoomItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_live_room_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FollowLiveRoomResp_FollowLiveRoomItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FollowLiveRoomResp_FollowLiveRoomItem) ProtoMessage() {}

func (x *FollowLiveRoomResp_FollowLiveRoomItem) ProtoReflect() protoreflect.Message {
	mi := &file_live_room_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FollowLiveRoomResp_FollowLiveRoomItem.ProtoReflect.Descriptor instead.
func (*FollowLiveRoomResp_FollowLiveRoomItem) Descriptor() ([]byte, []int) {
	return file_live_room_proto_rawDescGZIP(), []int{28, 0}
}

func (x *FollowLiveRoomResp_FollowLiveRoomItem) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *FollowLiveRoomResp_FollowLiveRoomItem) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *FollowLiveRoomResp_FollowLiveRoomItem) GetCover() string {
	if x != nil {
		return x.Cover
	}
	return ""
}

func (x *FollowLiveRoomResp_FollowLiveRoomItem) GetCountryCode() string {
	if x != nil {
		return x.CountryCode
	}
	return ""
}

func (x *FollowLiveRoomResp_FollowLiveRoomItem) GetOnlineNum() int32 {
	if x != nil {
		return x.OnlineNum
	}
	return 0
}

func (x *FollowLiveRoomResp_FollowLiveRoomItem) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *FollowLiveRoomResp_FollowLiveRoomItem) GetChatRoomId() string {
	if x != nil {
		return x.ChatRoomId
	}
	return ""
}

func (x *FollowLiveRoomResp_FollowLiveRoomItem) GetIsOpenVibrator() int32 {
	if x != nil {
		return x.IsOpenVibrator
	}
	return 0
}

func (x *FollowLiveRoomResp_FollowLiveRoomItem) GetPayRules() int32 {
	if x != nil {
		return x.PayRules
	}
	return 0
}

func (x *FollowLiveRoomResp_FollowLiveRoomItem) GetTrialDuration() int32 {
	if x != nil {
		return x.TrialDuration
	}
	return 0
}

func (x *FollowLiveRoomResp_FollowLiveRoomItem) GetUnitPrice() int32 {
	if x != nil {
		return x.UnitPrice
	}
	return 0
}

func (x *FollowLiveRoomResp_FollowLiveRoomItem) GetHeat() int32 {
	if x != nil {
		return x.Heat
	}
	return 0
}

var File_live_room_proto protoreflect.FileDescriptor

var file_live_room_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x6c, 0x69, 0x76, 0x65, 0x2f, 0x72, 0x6f, 0x6f, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x05, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xa1, 0x02, 0x0a, 0x15, 0x52, 0x6f, 0x6f,
	0x6d, 0x53, 0x74, 0x61, 0x72, 0x74, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x52,
	0x65, 0x71, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x76, 0x65,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x12, 0x22,
	0x0a, 0x0c, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x43, 0x6c, 0x61, 0x72, 0x69, 0x74, 0x79, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x43, 0x6c, 0x61, 0x72, 0x69,
	0x74, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x79, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x79, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x24,
	0x0a, 0x0d, 0x74, 0x72, 0x69, 0x61, 0x6c, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x74, 0x72, 0x69, 0x61, 0x6c, 0x44, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x6e, 0x69, 0x74, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x75, 0x6e, 0x69, 0x74, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x16, 0x0a, 0x06,
	0x67, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x67, 0x61,
	0x6d, 0x65, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x69, 0x73, 0x4f, 0x70, 0x65, 0x6e, 0x56, 0x69,
	0x62, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x69, 0x73,
	0x4f, 0x70, 0x65, 0x6e, 0x56, 0x69, 0x62, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x22, 0x4e, 0x0a, 0x16,
	0x52, 0x6f, 0x6f, 0x6d, 0x53, 0x74, 0x61, 0x72, 0x74, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61,
	0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1e, 0x0a, 0x0a,
	0x63, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x63, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x22, 0x59, 0x0a, 0x13,
	0x52, 0x6f, 0x6f, 0x6d, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x27, 0x0a, 0x11, 0x52, 0x6f, 0x6f, 0x6d, 0x4d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x22, 0x71, 0x0a, 0x13, 0x48, 0x6f, 0x6d, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x16, 0x0a, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x22, 0x3f, 0x0a, 0x11, 0x48, 0x6f, 0x6d, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x6f, 0x6f, 0x6d,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x22, 0xd5, 0x01, 0x0a, 0x0e, 0x52, 0x6f, 0x6f, 0x6d, 0x4f, 0x70, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x38, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x6f,
	0x6f, 0x6d, 0x4f, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x2e, 0x52, 0x6f, 0x6f,
	0x6d, 0x4f, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x04, 0x6c, 0x69, 0x73,
	0x74, 0x1a, 0x88, 0x01, 0x0a, 0x0e, 0x52, 0x6f, 0x6f, 0x6d, 0x4f, 0x70, 0x4c, 0x69, 0x73, 0x74,
	0x49, 0x74, 0x65, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x6c, 0x65, 0x76, 0x65, 0x6c,
	0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x65,
	0x78, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x73, 0x65, 0x78, 0x22, 0x62, 0x0a, 0x10,
	0x4c, 0x69, 0x73, 0x74, 0x4c, 0x69, 0x76, 0x65, 0x52, 0x6f, 0x6f, 0x6d, 0x73, 0x52, 0x65, 0x71,
	0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x16, 0x0a, 0x06,
	0x6c, 0x61, 0x73, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6c, 0x61,
	0x73, 0x74, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65,
	0x22, 0xb7, 0x03, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x4c, 0x69, 0x76, 0x65, 0x52, 0x6f, 0x6f,
	0x6d, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x3e, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x4c, 0x69, 0x76, 0x65, 0x52, 0x6f, 0x6f, 0x6d, 0x73, 0x52, 0x65, 0x73, 0x70, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x4c, 0x69, 0x76, 0x65, 0x52, 0x6f, 0x6f, 0x6d, 0x73, 0x49, 0x74, 0x65, 0x6d,
	0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x1a, 0xe1, 0x02, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x4c,
	0x69, 0x76, 0x65, 0x52, 0x6f, 0x6f, 0x6d, 0x73, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72,
	0x79, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6f, 0x6e, 0x6c, 0x69,
	0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6f, 0x6e, 0x6c,
	0x69, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1e,
	0x0a, 0x0a, 0x63, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x63, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x26,
	0x0a, 0x0e, 0x69, 0x73, 0x4f, 0x70, 0x65, 0x6e, 0x56, 0x69, 0x62, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x69, 0x73, 0x4f, 0x70, 0x65, 0x6e, 0x56, 0x69,
	0x62, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x79, 0x52, 0x75, 0x6c,
	0x65, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x79, 0x52, 0x75, 0x6c,
	0x65, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x74, 0x72, 0x69, 0x61, 0x6c, 0x44, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x74, 0x72, 0x69, 0x61, 0x6c,
	0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x6e, 0x69, 0x74,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x75, 0x6e, 0x69,
	0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x65, 0x61, 0x74, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x68, 0x65, 0x61, 0x74, 0x22, 0x61, 0x0a, 0x0f, 0x53, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x41, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x12, 0x1a, 0x0a,
	0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x61, 0x73,
	0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6c, 0x61, 0x73, 0x74, 0x49,
	0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x22, 0x83, 0x03,
	0x0a, 0x10, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x41, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x3c, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x28, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x41,
	0x6e, 0x63, 0x68, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x41, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74,
	0x1a, 0xb0, 0x02, 0x0a, 0x10, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x41, 0x6e, 0x63, 0x68, 0x6f,
	0x72, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x20, 0x0a,
	0x0b, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x74, 0x55,
	0x55, 0x49, 0x44, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x68, 0x61, 0x74, 0x55,
	0x55, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x49, 0x64, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x73, 0x69, 0x67, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x69, 0x67,
	0x6e, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x65, 0x78, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03,
	0x73, 0x65, 0x78, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x65, 0x74, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x49,
	0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x65, 0x74, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x49, 0x64, 0x22, 0x45, 0x0a, 0x13, 0x4c, 0x69, 0x76, 0x65, 0x52, 0x6f, 0x6f, 0x6d, 0x73,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x6f,
	0x6f, 0x6d, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x72, 0x6f, 0x6f, 0x6d,
	0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x8e, 0x05, 0x0a, 0x14, 0x4c,
	0x69, 0x76, 0x65, 0x52, 0x6f, 0x6f, 0x6d, 0x73, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x02, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x76, 0x65, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x12, 0x20, 0x0a,
	0x0b, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x09, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x12, 0x16, 0x0a,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f,
	0x6d, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x68, 0x61, 0x74, 0x52,
	0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1e, 0x0a,
	0x0a, 0x6c, 0x69, 0x76, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0a, 0x6c, 0x69, 0x76, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1a, 0x0a,
	0x08, 0x70, 0x61, 0x79, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x70, 0x61, 0x79, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x74, 0x72, 0x69,
	0x61, 0x6c, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0d, 0x74, 0x72, 0x69, 0x61, 0x6c, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x1c, 0x0a, 0x09, 0x75, 0x6e, 0x69, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x09, 0x75, 0x6e, 0x69, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x67, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x67,
	0x61, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12,
	0x20, 0x0a, 0x0b, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x49, 0x6e, 0x63, 0x6f, 0x6d,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x4c, 0x69, 0x76, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0d, 0x73, 0x74, 0x61, 0x72, 0x74, 0x4c, 0x69, 0x76, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x2c, 0x0a, 0x11, 0x70, 0x61, 0x69, 0x64, 0x50, 0x75, 0x72, 0x76, 0x69, 0x65, 0x77, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x70, 0x61, 0x69, 0x64,
	0x50, 0x75, 0x72, 0x76, 0x69, 0x65, 0x77, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x26, 0x0a,
	0x0e, 0x69, 0x73, 0x4f, 0x70, 0x65, 0x6e, 0x56, 0x69, 0x62, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18,
	0x13, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x69, 0x73, 0x4f, 0x70, 0x65, 0x6e, 0x56, 0x69, 0x62,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x73, 0x46, 0x6f, 0x6c, 0x6c, 0x6f,
	0x77, 0x18, 0x14, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x69, 0x73, 0x46, 0x6f, 0x6c, 0x6c, 0x6f,
	0x77, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x73, 0x50, 0x61, 0x79, 0x18, 0x15, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x69, 0x73, 0x50, 0x61, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x65, 0x61, 0x74, 0x18,
	0x16, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x68, 0x65, 0x61, 0x74, 0x22, 0xec, 0x01, 0x0a, 0x12,
	0x43, 0x6c, 0x6f, 0x73, 0x65, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x22, 0x0a, 0x0c, 0x6c, 0x69, 0x76, 0x65, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x6c, 0x69, 0x76, 0x65, 0x44, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x76, 0x69, 0x65, 0x77, 0x65, 0x72,
	0x73, 0x4e, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x76, 0x69, 0x65, 0x77,
	0x65, 0x72, 0x73, 0x4e, 0x75, 0x6d, 0x12, 0x1e, 0x0a, 0x0a, 0x67, 0x69, 0x66, 0x74, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x67, 0x69, 0x66, 0x74,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77,
	0x65, 0x72, 0x4e, 0x75, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x66, 0x6f, 0x6c,
	0x6c, 0x6f, 0x77, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x6c, 0x69, 0x6b, 0x65,
	0x4e, 0x75, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x6c, 0x69, 0x6b, 0x65, 0x4e,
	0x75, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x68,
	0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x63, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x22, 0xf5, 0x01, 0x0a, 0x12, 0x52,
	0x6f, 0x6f, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x40, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x6f, 0x6f, 0x6d, 0x4c, 0x69, 0x73, 0x74,
	0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x2e, 0x52, 0x6f, 0x6f, 0x6d, 0x4c,
	0x69, 0x73, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x04, 0x6c,
	0x69, 0x73, 0x74, 0x1a, 0x9c, 0x01, 0x0a, 0x12, 0x52, 0x6f, 0x6f, 0x6d, 0x4c, 0x69, 0x73, 0x74,
	0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x49,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x49, 0x64,
	0x12, 0x10, 0x0a, 0x03, 0x73, 0x65, 0x78, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x73,
	0x65, 0x78, 0x22, 0x2a, 0x0a, 0x10, 0x52, 0x6f, 0x6f, 0x6d, 0x41, 0x64, 0x64, 0x4d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x2d,
	0x0a, 0x13, 0x52, 0x6f, 0x6f, 0x6d, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x4d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x2d, 0x0a,
	0x13, 0x52, 0x6f, 0x6f, 0x6d, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x22, 0x70, 0x0a, 0x14,
	0x52, 0x6f, 0x6f, 0x6d, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x2c, 0x0a, 0x11, 0x73, 0x75, 0x70, 0x65, 0x72, 0x4d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x11, 0x73, 0x75, 0x70, 0x65, 0x72, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x72, 0x6f, 0x6f, 0x6d, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x72, 0x6f,
	0x6f, 0x6d, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xc9,
	0x02, 0x0a, 0x14, 0x52, 0x6f, 0x6f, 0x6d, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x48, 0x69, 0x73, 0x74,
	0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x12, 0x44, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x6f,
	0x6f, 0x6d, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65,
	0x73, 0x70, 0x2e, 0x52, 0x6f, 0x6f, 0x6d, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x48, 0x69, 0x73, 0x74,
	0x6f, 0x72, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x1a, 0xea, 0x01,
	0x0a, 0x14, 0x52, 0x6f, 0x6f, 0x6d, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x48, 0x69, 0x73, 0x74, 0x6f,
	0x72, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x76, 0x69,
	0x65, 0x77, 0x65, 0x72, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0c, 0x76, 0x69, 0x65, 0x77, 0x65, 0x72, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1e,
	0x0a, 0x0a, 0x67, 0x69, 0x66, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0a, 0x67, 0x69, 0x66, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x20,
	0x0a, 0x0b, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0b, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x18, 0x0a, 0x07, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x07, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x49, 0x64, 0x22, 0x35, 0x0a, 0x19, 0x52, 0x6f,
	0x6f, 0x6d, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x6e,
	0x63, 0x6f, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x63, 0x65, 0x6e, 0x65,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x49,
	0x64, 0x22, 0x97, 0x02, 0x0a, 0x1a, 0x52, 0x6f, 0x6f, 0x6d, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x48,
	0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x50, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3c,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x6f, 0x6f, 0x6d, 0x53, 0x63, 0x65, 0x6e, 0x65,
	0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x2e, 0x52, 0x6f, 0x6f, 0x6d, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x48, 0x69, 0x73, 0x74, 0x6f,
	0x72, 0x79, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x04, 0x6c, 0x69,
	0x73, 0x74, 0x1a, 0xa6, 0x01, 0x0a, 0x1a, 0x52, 0x6f, 0x6f, 0x6d, 0x53, 0x63, 0x65, 0x6e, 0x65,
	0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x49, 0x74, 0x65,
	0x6d, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6e, 0x75, 0x6d,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6e, 0x75, 0x6d, 0x12, 0x22, 0x0a, 0x0c, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12,
	0x1a, 0x0a, 0x08, 0x73, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x08, 0x73, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x4c, 0x0a, 0x16, 0x52,
	0x6f, 0x6f, 0x6d, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x47, 0x69, 0x66, 0x74, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x61, 0x73, 0x74, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6c, 0x61, 0x73, 0x74, 0x49, 0x64, 0x12, 0x1a, 0x0a,
	0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x22, 0xf7, 0x02, 0x0a, 0x17, 0x52, 0x6f,
	0x6f, 0x6d, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x47, 0x69, 0x66, 0x74, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x4a, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x6f, 0x6f, 0x6d,
	0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x47, 0x69, 0x66, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x2e, 0x52, 0x6f, 0x6f, 0x6d, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x47,
	0x69, 0x66, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x04, 0x6c, 0x69, 0x73,
	0x74, 0x1a, 0x8f, 0x02, 0x0a, 0x17, 0x52, 0x6f, 0x6f, 0x6d, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x47, 0x69, 0x66, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x6c, 0x65, 0x76,
	0x65, 0x6c, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x65, 0x78, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x03, 0x73, 0x65, 0x78, 0x12, 0x16, 0x0a, 0x06, 0x67, 0x69, 0x66, 0x74, 0x49, 0x64, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x67, 0x69, 0x66, 0x74, 0x49, 0x64, 0x12, 0x18, 0x0a,
	0x07, 0x67, 0x69, 0x66, 0x74, 0x4e, 0x75, 0x6d, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07,
	0x67, 0x69, 0x66, 0x74, 0x4e, 0x75, 0x6d, 0x12, 0x1e, 0x0a, 0x0a, 0x67, 0x69, 0x66, 0x74, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x67, 0x69, 0x66,
	0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x6e, 0x64, 0x54,
	0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x73, 0x65, 0x6e, 0x64, 0x54,
	0x69, 0x6d, 0x65, 0x22, 0x9f, 0x02, 0x0a, 0x1a, 0x52, 0x6f, 0x6f, 0x6d, 0x52, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x42, 0x61, 0x72, 0x72, 0x61, 0x67, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x50, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x3c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x6f, 0x6f, 0x6d, 0x52, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x42, 0x61, 0x72, 0x72, 0x61, 0x67, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x2e, 0x52, 0x6f, 0x6f, 0x6d, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x42,
	0x61, 0x72, 0x72, 0x61, 0x67, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x04,
	0x6c, 0x69, 0x73, 0x74, 0x1a, 0xae, 0x01, 0x0a, 0x1a, 0x52, 0x6f, 0x6f, 0x6d, 0x52, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x42, 0x61, 0x72, 0x72, 0x61, 0x67, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x49,
	0x74, 0x65, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6e,
	0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e,
	0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61,
	0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x12,
	0x18, 0x0a, 0x07, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x07, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x65, 0x78,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x73, 0x65, 0x78, 0x12, 0x18, 0x0a, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xc3, 0x03, 0x0a, 0x14, 0x48, 0x6f, 0x6d, 0x65, 0x54, 0x6f,
	0x70, 0x4c, 0x69, 0x76, 0x65, 0x52, 0x6f, 0x6f, 0x6d, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x44,
	0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x48, 0x6f, 0x6d, 0x65, 0x54, 0x6f, 0x70, 0x4c, 0x69, 0x76, 0x65,
	0x52, 0x6f, 0x6f, 0x6d, 0x73, 0x52, 0x65, 0x73, 0x70, 0x2e, 0x48, 0x6f, 0x6d, 0x65, 0x54, 0x6f,
	0x70, 0x4c, 0x69, 0x76, 0x65, 0x52, 0x6f, 0x6f, 0x6d, 0x73, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x04,
	0x6c, 0x69, 0x73, 0x74, 0x1a, 0xe4, 0x02, 0x0a, 0x14, 0x48, 0x6f, 0x6d, 0x65, 0x54, 0x6f, 0x70,
	0x4c, 0x69, 0x76, 0x65, 0x52, 0x6f, 0x6f, 0x6d, 0x73, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6f, 0x6e, 0x6c,
	0x69, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6f, 0x6e,
	0x6c, 0x69, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x1e, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x12,
	0x26, 0x0a, 0x0e, 0x69, 0x73, 0x4f, 0x70, 0x65, 0x6e, 0x56, 0x69, 0x62, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x69, 0x73, 0x4f, 0x70, 0x65, 0x6e, 0x56,
	0x69, 0x62, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x79, 0x52, 0x75,
	0x6c, 0x65, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x79, 0x52, 0x75,
	0x6c, 0x65, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x74, 0x72, 0x69, 0x61, 0x6c, 0x44, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x74, 0x72, 0x69, 0x61,
	0x6c, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x6e, 0x69,
	0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x75, 0x6e,
	0x69, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x65, 0x61, 0x74, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x68, 0x65, 0x61, 0x74, 0x22, 0x2c, 0x0a, 0x0e, 0x54,
	0x6f, 0x70, 0x4c, 0x69, 0x76, 0x65, 0x52, 0x6f, 0x6f, 0x6d, 0x52, 0x65, 0x71, 0x12, 0x1a, 0x0a,
	0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xaf, 0x03, 0x0a, 0x0f, 0x54, 0x6f,
	0x70, 0x4c, 0x69, 0x76, 0x65, 0x52, 0x6f, 0x6f, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x12, 0x3a, 0x0a,
	0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x6f, 0x70, 0x4c, 0x69, 0x76, 0x65, 0x52, 0x6f, 0x6f, 0x6d, 0x52,
	0x65, 0x73, 0x70, 0x2e, 0x54, 0x6f, 0x70, 0x4c, 0x69, 0x76, 0x65, 0x52, 0x6f, 0x6f, 0x6d, 0x49,
	0x74, 0x65, 0x6d, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x1a, 0xdf, 0x02, 0x0a, 0x0f, 0x54, 0x6f,
	0x70, 0x4c, 0x69, 0x76, 0x65, 0x52, 0x6f, 0x6f, 0x6d, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6f, 0x6e, 0x6c,
	0x69, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6f, 0x6e,
	0x6c, 0x69, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x1e, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x12,
	0x26, 0x0a, 0x0e, 0x69, 0x73, 0x4f, 0x70, 0x65, 0x6e, 0x56, 0x69, 0x62, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x69, 0x73, 0x4f, 0x70, 0x65, 0x6e, 0x56,
	0x69, 0x62, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x79, 0x52, 0x75,
	0x6c, 0x65, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x79, 0x52, 0x75,
	0x6c, 0x65, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x74, 0x72, 0x69, 0x61, 0x6c, 0x44, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x74, 0x72, 0x69, 0x61,
	0x6c, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x6e, 0x69,
	0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x75, 0x6e,
	0x69, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x65, 0x61, 0x74, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x68, 0x65, 0x61, 0x74, 0x22, 0xbb, 0x03, 0x0a, 0x12,
	0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x4c, 0x69, 0x76, 0x65, 0x52, 0x6f, 0x6f, 0x6d, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x40, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x4c,
	0x69, 0x76, 0x65, 0x52, 0x6f, 0x6f, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x2e, 0x46, 0x6f, 0x6c, 0x6c,
	0x6f, 0x77, 0x4c, 0x69, 0x76, 0x65, 0x52, 0x6f, 0x6f, 0x6d, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x04,
	0x6c, 0x69, 0x73, 0x74, 0x1a, 0xe2, 0x02, 0x0a, 0x12, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x4c,
	0x69, 0x76, 0x65, 0x52, 0x6f, 0x6f, 0x6d, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x63, 0x6f, 0x76, 0x65, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79,
	0x43, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6f, 0x6e, 0x6c, 0x69, 0x6e,
	0x65, 0x4e, 0x75, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6f, 0x6e, 0x6c, 0x69,
	0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1e, 0x0a,
	0x0a, 0x63, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x63, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x26, 0x0a,
	0x0e, 0x69, 0x73, 0x4f, 0x70, 0x65, 0x6e, 0x56, 0x69, 0x62, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x69, 0x73, 0x4f, 0x70, 0x65, 0x6e, 0x56, 0x69, 0x62,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x79, 0x52, 0x75, 0x6c, 0x65,
	0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x79, 0x52, 0x75, 0x6c, 0x65,
	0x73, 0x12, 0x24, 0x0a, 0x0d, 0x74, 0x72, 0x69, 0x61, 0x6c, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x74, 0x72, 0x69, 0x61, 0x6c, 0x44,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x6e, 0x69, 0x74, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x75, 0x6e, 0x69, 0x74,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x65, 0x61, 0x74, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x04, 0x68, 0x65, 0x61, 0x74, 0x22, 0x5a, 0x0a, 0x1a, 0x41, 0x6e, 0x63,
	0x68, 0x6f, 0x72, 0x54, 0x6f, 0x64, 0x61, 0x79, 0x42, 0x61, 0x72, 0x72, 0x61, 0x67, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x43, 0x6f,
	0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72,
	0x79, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x9d, 0x01, 0x0a, 0x17, 0x4c, 0x69, 0x76, 0x65, 0x4d, 0x69,
	0x6e, 0x75, 0x74, 0x65, 0x50, 0x61, 0x69, 0x64, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x52, 0x65,
	0x71, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x68, 0x61,
	0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63,
	0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x49, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a,
	0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xf5, 0x01, 0x0a, 0x17, 0x47, 0x4d, 0x52, 0x6f, 0x6f, 0x6d,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x52, 0x65,
	0x71, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x76, 0x65, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x12, 0x1a, 0x0a,
	0x08, 0x70, 0x61, 0x79, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x70, 0x61, 0x79, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x74, 0x72, 0x69,
	0x61, 0x6c, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0d, 0x74, 0x72, 0x69, 0x61, 0x6c, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x1c, 0x0a, 0x09, 0x75, 0x6e, 0x69, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x09, 0x75, 0x6e, 0x69, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x55, 0x72, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x55, 0x72, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x22, 0x7a, 0x0a,
	0x18, 0x41, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x52, 0x6f, 0x6f, 0x6d, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x50, 0x61, 0x79, 0x52, 0x65, 0x71, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x79,
	0x52, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x79,
	0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x6e, 0x69, 0x74, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x75, 0x6e, 0x69, 0x74, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x74, 0x72, 0x69, 0x61, 0x6c, 0x44, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x74, 0x72, 0x69, 0x61,
	0x6c, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x1b, 0x5a, 0x19, 0x6c, 0x69, 0x76,
	0x65, 0x4a, 0x6f, 0x62, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x6c, 0x69, 0x76, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_live_room_proto_rawDescOnce sync.Once
	file_live_room_proto_rawDescData = file_live_room_proto_rawDesc
)

func file_live_room_proto_rawDescGZIP() []byte {
	file_live_room_proto_rawDescOnce.Do(func() {
		file_live_room_proto_rawDescData = protoimpl.X.CompressGZIP(file_live_room_proto_rawDescData)
	})
	return file_live_room_proto_rawDescData
}

var file_live_room_proto_msgTypes = make([]protoimpl.MessageInfo, 44)
var file_live_room_proto_goTypes = []any{
	(*RoomStartBroadcastReq)(nil),                                 // 0: proto.RoomStartBroadcastReq
	(*RoomStartBroadcastResp)(nil),                                // 1: proto.RoomStartBroadcastResp
	(*RoomManageChangeReq)(nil),                                   // 2: proto.RoomManageChangeReq
	(*RoomManageListReq)(nil),                                     // 3: proto.RoomManageListReq
	(*HomeManageChangeReq)(nil),                                   // 4: proto.HomeManageChangeReq
	(*HomeManageListReq)(nil),                                     // 5: proto.HomeManageListReq
	(*RoomOpListResp)(nil),                                        // 6: proto.RoomOpListResp
	(*ListLiveRoomsReq)(nil),                                      // 7: proto.ListLiveRoomsReq
	(*ListLiveRoomsResp)(nil),                                     // 8: proto.ListLiveRoomsResp
	(*SearchAnchorReq)(nil),                                       // 9: proto.SearchAnchorReq
	(*SearchAnchorResp)(nil),                                      // 10: proto.SearchAnchorResp
	(*LiveRoomsDetailsReq)(nil),                                   // 11: proto.LiveRoomsDetailsReq
	(*LiveRoomsDetailsResp)(nil),                                  // 12: proto.LiveRoomsDetailsResp
	(*CloseBroadcastResp)(nil),                                    // 13: proto.CloseBroadcastResp
	(*RoomListManageResp)(nil),                                    // 14: proto.RoomListManageResp
	(*RoomAddManageReq)(nil),                                      // 15: proto.RoomAddManageReq
	(*RoomCancelManageReq)(nil),                                   // 16: proto.RoomCancelManageReq
	(*RoomManageStatusReq)(nil),                                   // 17: proto.RoomManageStatusReq
	(*RoomManageStatusResp)(nil),                                  // 18: proto.RoomManageStatusResp
	(*RoomSceneHistoryResp)(nil),                                  // 19: proto.RoomSceneHistoryResp
	(*RoomSceneHistoryIncomeReq)(nil),                             // 20: proto.RoomSceneHistoryIncomeReq
	(*RoomSceneHistoryIncomeResp)(nil),                            // 21: proto.RoomSceneHistoryIncomeResp
	(*RoomReceiveGiftListReq)(nil),                                // 22: proto.RoomReceiveGiftListReq
	(*RoomReceiveGiftListResp)(nil),                               // 23: proto.RoomReceiveGiftListResp
	(*RoomReceiveBarrageListResp)(nil),                            // 24: proto.RoomReceiveBarrageListResp
	(*HomeTopLiveRoomsResp)(nil),                                  // 25: proto.HomeTopLiveRoomsResp
	(*TopLiveRoomReq)(nil),                                        // 26: proto.TopLiveRoomReq
	(*TopLiveRoomResp)(nil),                                       // 27: proto.TopLiveRoomResp
	(*FollowLiveRoomResp)(nil),                                    // 28: proto.FollowLiveRoomResp
	(*AnchorTodayBarrageInfoResp)(nil),                            // 29: proto.AnchorTodayBarrageInfoResp
	(*LiveMinutePaidIncomeReq)(nil),                               // 30: proto.LiveMinutePaidIncomeReq
	(*GMRoomStartBroadcastReq)(nil),                               // 31: proto.GMRoomStartBroadcastReq
	(*AnchorRoomTransferPayReq)(nil),                              // 32: proto.AnchorRoomTransferPayReq
	(*RoomOpListResp_RoomOpListItem)(nil),                         // 33: proto.RoomOpListResp.RoomOpListItem
	(*ListLiveRoomsResp_ListLiveRoomsItem)(nil),                   // 34: proto.ListLiveRoomsResp.ListLiveRoomsItem
	(*SearchAnchorResp_SearchAnchorItem)(nil),                     // 35: proto.SearchAnchorResp.SearchAnchorItem
	(*RoomListManageResp_RoomListManageItem)(nil),                 // 36: proto.RoomListManageResp.RoomListManageItem
	(*RoomSceneHistoryResp_RoomSceneHistoryItem)(nil),             // 37: proto.RoomSceneHistoryResp.RoomSceneHistoryItem
	(*RoomSceneHistoryIncomeResp_RoomSceneHistoryIncomeItem)(nil), // 38: proto.RoomSceneHistoryIncomeResp.RoomSceneHistoryIncomeItem
	(*RoomReceiveGiftListResp_RoomReceiveGiftListItem)(nil),       // 39: proto.RoomReceiveGiftListResp.RoomReceiveGiftListItem
	(*RoomReceiveBarrageListResp_RoomReceiveBarrageListItem)(nil), // 40: proto.RoomReceiveBarrageListResp.RoomReceiveBarrageListItem
	(*HomeTopLiveRoomsResp_HomeTopLiveRoomsItem)(nil),             // 41: proto.HomeTopLiveRoomsResp.HomeTopLiveRoomsItem
	(*TopLiveRoomResp_TopLiveRoomItem)(nil),                       // 42: proto.TopLiveRoomResp.TopLiveRoomItem
	(*FollowLiveRoomResp_FollowLiveRoomItem)(nil),                 // 43: proto.FollowLiveRoomResp.FollowLiveRoomItem
}
var file_live_room_proto_depIdxs = []int32{
	33, // 0: proto.RoomOpListResp.list:type_name -> proto.RoomOpListResp.RoomOpListItem
	34, // 1: proto.ListLiveRoomsResp.list:type_name -> proto.ListLiveRoomsResp.ListLiveRoomsItem
	35, // 2: proto.SearchAnchorResp.list:type_name -> proto.SearchAnchorResp.SearchAnchorItem
	36, // 3: proto.RoomListManageResp.list:type_name -> proto.RoomListManageResp.RoomListManageItem
	37, // 4: proto.RoomSceneHistoryResp.list:type_name -> proto.RoomSceneHistoryResp.RoomSceneHistoryItem
	38, // 5: proto.RoomSceneHistoryIncomeResp.list:type_name -> proto.RoomSceneHistoryIncomeResp.RoomSceneHistoryIncomeItem
	39, // 6: proto.RoomReceiveGiftListResp.list:type_name -> proto.RoomReceiveGiftListResp.RoomReceiveGiftListItem
	40, // 7: proto.RoomReceiveBarrageListResp.list:type_name -> proto.RoomReceiveBarrageListResp.RoomReceiveBarrageListItem
	41, // 8: proto.HomeTopLiveRoomsResp.list:type_name -> proto.HomeTopLiveRoomsResp.HomeTopLiveRoomsItem
	42, // 9: proto.TopLiveRoomResp.list:type_name -> proto.TopLiveRoomResp.TopLiveRoomItem
	43, // 10: proto.FollowLiveRoomResp.list:type_name -> proto.FollowLiveRoomResp.FollowLiveRoomItem
	11, // [11:11] is the sub-list for method output_type
	11, // [11:11] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { file_live_room_proto_init() }
func file_live_room_proto_init() {
	if File_live_room_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_live_room_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*RoomStartBroadcastReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_live_room_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*RoomStartBroadcastResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_live_room_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*RoomManageChangeReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_live_room_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*RoomManageListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_live_room_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*HomeManageChangeReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_live_room_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*HomeManageListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_live_room_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*RoomOpListResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_live_room_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*ListLiveRoomsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_live_room_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*ListLiveRoomsResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_live_room_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*SearchAnchorReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_live_room_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*SearchAnchorResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_live_room_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*LiveRoomsDetailsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_live_room_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*LiveRoomsDetailsResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_live_room_proto_msgTypes[13].Exporter = func(v any, i int) any {
			switch v := v.(*CloseBroadcastResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_live_room_proto_msgTypes[14].Exporter = func(v any, i int) any {
			switch v := v.(*RoomListManageResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_live_room_proto_msgTypes[15].Exporter = func(v any, i int) any {
			switch v := v.(*RoomAddManageReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_live_room_proto_msgTypes[16].Exporter = func(v any, i int) any {
			switch v := v.(*RoomCancelManageReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_live_room_proto_msgTypes[17].Exporter = func(v any, i int) any {
			switch v := v.(*RoomManageStatusReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_live_room_proto_msgTypes[18].Exporter = func(v any, i int) any {
			switch v := v.(*RoomManageStatusResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_live_room_proto_msgTypes[19].Exporter = func(v any, i int) any {
			switch v := v.(*RoomSceneHistoryResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_live_room_proto_msgTypes[20].Exporter = func(v any, i int) any {
			switch v := v.(*RoomSceneHistoryIncomeReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_live_room_proto_msgTypes[21].Exporter = func(v any, i int) any {
			switch v := v.(*RoomSceneHistoryIncomeResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_live_room_proto_msgTypes[22].Exporter = func(v any, i int) any {
			switch v := v.(*RoomReceiveGiftListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_live_room_proto_msgTypes[23].Exporter = func(v any, i int) any {
			switch v := v.(*RoomReceiveGiftListResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_live_room_proto_msgTypes[24].Exporter = func(v any, i int) any {
			switch v := v.(*RoomReceiveBarrageListResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_live_room_proto_msgTypes[25].Exporter = func(v any, i int) any {
			switch v := v.(*HomeTopLiveRoomsResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_live_room_proto_msgTypes[26].Exporter = func(v any, i int) any {
			switch v := v.(*TopLiveRoomReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_live_room_proto_msgTypes[27].Exporter = func(v any, i int) any {
			switch v := v.(*TopLiveRoomResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_live_room_proto_msgTypes[28].Exporter = func(v any, i int) any {
			switch v := v.(*FollowLiveRoomResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_live_room_proto_msgTypes[29].Exporter = func(v any, i int) any {
			switch v := v.(*AnchorTodayBarrageInfoResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_live_room_proto_msgTypes[30].Exporter = func(v any, i int) any {
			switch v := v.(*LiveMinutePaidIncomeReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_live_room_proto_msgTypes[31].Exporter = func(v any, i int) any {
			switch v := v.(*GMRoomStartBroadcastReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_live_room_proto_msgTypes[32].Exporter = func(v any, i int) any {
			switch v := v.(*AnchorRoomTransferPayReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_live_room_proto_msgTypes[33].Exporter = func(v any, i int) any {
			switch v := v.(*RoomOpListResp_RoomOpListItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_live_room_proto_msgTypes[34].Exporter = func(v any, i int) any {
			switch v := v.(*ListLiveRoomsResp_ListLiveRoomsItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_live_room_proto_msgTypes[35].Exporter = func(v any, i int) any {
			switch v := v.(*SearchAnchorResp_SearchAnchorItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_live_room_proto_msgTypes[36].Exporter = func(v any, i int) any {
			switch v := v.(*RoomListManageResp_RoomListManageItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_live_room_proto_msgTypes[37].Exporter = func(v any, i int) any {
			switch v := v.(*RoomSceneHistoryResp_RoomSceneHistoryItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_live_room_proto_msgTypes[38].Exporter = func(v any, i int) any {
			switch v := v.(*RoomSceneHistoryIncomeResp_RoomSceneHistoryIncomeItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_live_room_proto_msgTypes[39].Exporter = func(v any, i int) any {
			switch v := v.(*RoomReceiveGiftListResp_RoomReceiveGiftListItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_live_room_proto_msgTypes[40].Exporter = func(v any, i int) any {
			switch v := v.(*RoomReceiveBarrageListResp_RoomReceiveBarrageListItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_live_room_proto_msgTypes[41].Exporter = func(v any, i int) any {
			switch v := v.(*HomeTopLiveRoomsResp_HomeTopLiveRoomsItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_live_room_proto_msgTypes[42].Exporter = func(v any, i int) any {
			switch v := v.(*TopLiveRoomResp_TopLiveRoomItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_live_room_proto_msgTypes[43].Exporter = func(v any, i int) any {
			switch v := v.(*FollowLiveRoomResp_FollowLiveRoomItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_live_room_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   44,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_live_room_proto_goTypes,
		DependencyIndexes: file_live_room_proto_depIdxs,
		MessageInfos:      file_live_room_proto_msgTypes,
	}.Build()
	File_live_room_proto = out.File
	file_live_room_proto_rawDesc = nil
	file_live_room_proto_goTypes = nil
	file_live_room_proto_depIdxs = nil
}
