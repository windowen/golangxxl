// Code generated by protoc-gen-go. DO NOT EDIT.
// source: live/live.proto

package live

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
	_ "queueJob/pkg/protobuf/common"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type RoomIdReq struct {
	RoomId               int32    `protobuf:"varint,1,opt,name=roomId,proto3" json:"roomId"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RoomIdReq) Reset()         { *m = RoomIdReq{} }
func (m *RoomIdReq) String() string { return proto.CompactTextString(m) }
func (*RoomIdReq) ProtoMessage()    {}
func (*RoomIdReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_acfc4eae1bcdf7db, []int{0}
}

func (m *RoomIdReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RoomIdReq.Unmarshal(m, b)
}
func (m *RoomIdReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RoomIdReq.Marshal(b, m, deterministic)
}
func (m *RoomIdReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoomIdReq.Merge(m, src)
}
func (m *RoomIdReq) XXX_Size() int {
	return xxx_messageInfo_RoomIdReq.Size(m)
}
func (m *RoomIdReq) XXX_DiscardUnknown() {
	xxx_messageInfo_RoomIdReq.DiscardUnknown(m)
}

var xxx_messageInfo_RoomIdReq proto.InternalMessageInfo

func (m *RoomIdReq) GetRoomId() int32 {
	if m != nil {
		return m.RoomId
	}
	return 0
}

type JoinLiveRoomReq struct {
	RoomId               int32    `protobuf:"varint,1,opt,name=roomId,proto3" json:"roomId"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *JoinLiveRoomReq) Reset()         { *m = JoinLiveRoomReq{} }
func (m *JoinLiveRoomReq) String() string { return proto.CompactTextString(m) }
func (*JoinLiveRoomReq) ProtoMessage()    {}
func (*JoinLiveRoomReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_acfc4eae1bcdf7db, []int{1}
}

func (m *JoinLiveRoomReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_JoinLiveRoomReq.Unmarshal(m, b)
}
func (m *JoinLiveRoomReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_JoinLiveRoomReq.Marshal(b, m, deterministic)
}
func (m *JoinLiveRoomReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JoinLiveRoomReq.Merge(m, src)
}
func (m *JoinLiveRoomReq) XXX_Size() int {
	return xxx_messageInfo_JoinLiveRoomReq.Size(m)
}
func (m *JoinLiveRoomReq) XXX_DiscardUnknown() {
	xxx_messageInfo_JoinLiveRoomReq.DiscardUnknown(m)
}

var xxx_messageInfo_JoinLiveRoomReq proto.InternalMessageInfo

func (m *JoinLiveRoomReq) GetRoomId() int32 {
	if m != nil {
		return m.RoomId
	}
	return 0
}

// 加入房间响应
type JoinLiveRoomResp struct {
	Token                string   `protobuf:"bytes,1,opt,name=token,proto3" json:"token"`
	IsTrial              int32    `protobuf:"varint,2,opt,name=isTrial,proto3" json:"isTrial"`
	ChatRoomId           string   `protobuf:"bytes,3,opt,name=chatRoomId,proto3" json:"chatRoomId"`
	UserId               int32    `protobuf:"varint,4,opt,name=userId,proto3" json:"userId"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *JoinLiveRoomResp) Reset()         { *m = JoinLiveRoomResp{} }
func (m *JoinLiveRoomResp) String() string { return proto.CompactTextString(m) }
func (*JoinLiveRoomResp) ProtoMessage()    {}
func (*JoinLiveRoomResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_acfc4eae1bcdf7db, []int{2}
}

func (m *JoinLiveRoomResp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_JoinLiveRoomResp.Unmarshal(m, b)
}
func (m *JoinLiveRoomResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_JoinLiveRoomResp.Marshal(b, m, deterministic)
}
func (m *JoinLiveRoomResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JoinLiveRoomResp.Merge(m, src)
}
func (m *JoinLiveRoomResp) XXX_Size() int {
	return xxx_messageInfo_JoinLiveRoomResp.Size(m)
}
func (m *JoinLiveRoomResp) XXX_DiscardUnknown() {
	xxx_messageInfo_JoinLiveRoomResp.DiscardUnknown(m)
}

var xxx_messageInfo_JoinLiveRoomResp proto.InternalMessageInfo

func (m *JoinLiveRoomResp) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *JoinLiveRoomResp) GetIsTrial() int32 {
	if m != nil {
		return m.IsTrial
	}
	return 0
}

func (m *JoinLiveRoomResp) GetChatRoomId() string {
	if m != nil {
		return m.ChatRoomId
	}
	return ""
}

func (m *JoinLiveRoomResp) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func init() {
	proto.RegisterType((*RoomIdReq)(nil), "proto.RoomIdReq")
	proto.RegisterType((*JoinLiveRoomReq)(nil), "proto.JoinLiveRoomReq")
	proto.RegisterType((*JoinLiveRoomResp)(nil), "proto.JoinLiveRoomResp")
}

func init() {
	proto.RegisterFile("live/live.proto", fileDescriptor_acfc4eae1bcdf7db)
}

var fileDescriptor_acfc4eae1bcdf7db = []byte{
	// 1445 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x58, 0x6f, 0x6f, 0xdb, 0xb6,
	0x13, 0x46, 0x7f, 0xbf, 0xa5, 0x6d, 0xb8, 0xfc, 0x71, 0x18, 0x37, 0x71, 0xdd, 0x3f, 0x6b, 0xda,
	0x01, 0xdb, 0xba, 0xa1, 0x19, 0xda, 0x6d, 0x40, 0x8b, 0x75, 0x5b, 0xec, 0x2c, 0xa9, 0xd3, 0x64,
	0x6b, 0x6d, 0x67, 0x2f, 0x36, 0x0c, 0x03, 0x2d, 0xd1, 0x0e, 0x11, 0x99, 0x54, 0x44, 0x3a, 0x85,
	0xf7, 0x89, 0xf6, 0x31, 0x07, 0xf2, 0x28, 0x8a, 0x94, 0xe4, 0x04, 0xd8, 0x9b, 0x18, 0x7a, 0x9e,
	0xe7, 0x8e, 0xa7, 0x13, 0xef, 0x78, 0x0c, 0x5a, 0x4f, 0xd8, 0x25, 0xdd, 0xd5, 0x7f, 0x9e, 0xa5,
	0x99, 0x50, 0x02, 0x2f, 0x99, 0x9f, 0x36, 0xe0, 0x99, 0x10, 0x53, 0xc0, 0xdb, 0x4d, 0x03, 0x44,
	0x67, 0x44, 0xfd, 0xe5, 0xa1, 0x20, 0x9b, 0xb0, 0xb1, 0xb2, 0xc0, 0x86, 0x01, 0xc6, 0x64, 0xca,
	0x92, 0xb9, 0x85, 0x36, 0xc1, 0x92, 0x24, 0xc9, 0x88, 0x44, 0xe7, 0x81, 0x2e, 0x12, 0x7c, 0xcc,
	0x26, 0x81, 0xaf, 0x99, 0xa4, 0x99, 0x05, 0x1a, 0x10, 0x1b, 0x19, 0xd1, 0xc4, 0x22, 0x6b, 0x06,
	0x49, 0xc9, 0x3c, 0x30, 0xc9, 0x08, 0xcf, 0xdd, 0x6e, 0x46, 0x62, 0x3a, 0x15, 0x7c, 0x17, 0x7e,
	0x00, 0x7c, 0xfc, 0x04, 0x2d, 0xf7, 0x85, 0x98, 0xf6, 0xe2, 0x3e, 0xbd, 0xc0, 0x5b, 0xe8, 0x66,
	0x66, 0x1e, 0x5a, 0x37, 0x1e, 0xdd, 0xf8, 0x7c, 0xa9, 0x6f, 0x9f, 0x1e, 0x7f, 0x81, 0xd6, 0x8f,
	0x04, 0xe3, 0xc7, 0xec, 0x92, 0x6a, 0xf1, 0x55, 0xd2, 0xbf, 0x51, 0x23, 0x94, 0xca, 0x14, 0x37,
	0xd1, 0x92, 0x12, 0xe7, 0x94, 0x1b, 0xe9, 0x72, 0x1f, 0x1e, 0x70, 0x0b, 0xdd, 0x62, 0x72, 0x98,
	0x31, 0x92, 0xb4, 0xfe, 0x67, 0x5c, 0xe4, 0x8f, 0xf8, 0x21, 0x42, 0x3a, 0x97, 0x10, 0x57, 0xeb,
	0xff, 0xc6, 0xc8, 0x43, 0xf4, 0xda, 0x3a, 0x13, 0xbd, 0xb8, 0xf5, 0x11, 0xac, 0x0d, 0x4f, 0xcf,
	0xff, 0x79, 0x8c, 0x90, 0x5e, 0x78, 0x40, 0xb3, 0x4b, 0x9a, 0xe1, 0xa7, 0xe8, 0x56, 0xd7, 0xe4,
	0x50, 0xe2, 0x15, 0x78, 0xdb, 0x67, 0x3f, 0x4f, 0x53, 0x35, 0x6f, 0x6f, 0xd8, 0x27, 0x60, 0x4d,
	0x88, 0x2f, 0x11, 0xda, 0xe3, 0xd1, 0x99, 0xc8, 0xfa, 0x84, 0x9f, 0xe3, 0xa6, 0x15, 0x14, 0x50,
	0x9f, 0x5e, 0xb4, 0xef, 0xd4, 0xa0, 0x32, 0xc5, 0x2f, 0xd0, 0xed, 0x53, 0x49, 0xc1, 0x10, 0x5b,
	0x49, 0x0e, 0x68, 0xb3, 0xcd, 0x0a, 0x26, 0x53, 0xfc, 0x16, 0x35, 0x0e, 0xa9, 0xea, 0x0f, 0xbb,
	0x10, 0xeb, 0x31, 0x93, 0x0a, 0xdf, 0xb7, 0xc2, 0x5f, 0x84, 0x62, 0x63, 0x16, 0x11, 0xc5, 0x04,
	0x07, 0x5a, 0xbb, 0xb9, 0xbb, 0x90, 0xc5, 0xdf, 0xa0, 0x15, 0xfd, 0xda, 0x5d, 0x92, 0x24, 0x1d,
	0x12, 0x9d, 0xe3, 0x2d, 0x2b, 0xf5, 0x41, 0xed, 0x22, 0xc8, 0x02, 0xfe, 0x11, 0xad, 0x74, 0xcf,
	0x88, 0xaa, 0x58, 0x45, 0x1e, 0xa8, 0xad, 0xb6, 0x6b, 0x71, 0x99, 0xe2, 0x03, 0xb4, 0xde, 0xcd,
	0x28, 0x51, 0xb4, 0x6b, 0x3f, 0x8d, 0xc4, 0xad, 0x3c, 0xb3, 0x01, 0xee, 0x87, 0x5f, 0x66, 0x20,
	0xf7, 0x80, 0xea, 0x0c, 0xb9, 0xdc, 0x17, 0x90, 0x9f, 0x7b, 0x1f, 0x95, 0x29, 0x7e, 0x83, 0xd6,
	0x0f, 0xa9, 0xca, 0xbd, 0xf5, 0xf8, 0x58, 0xe0, 0x7c, 0xa1, 0x12, 0xae, 0x9d, 0xb4, 0x17, 0x51,
	0xf0, 0x15, 0xf5, 0xbe, 0xd5, 0x98, 0xfb, 0x8a, 0x39, 0xe0, 0x7f, 0xc5, 0x02, 0x93, 0x29, 0x7e,
	0x8d, 0x56, 0xfb, 0x62, 0x24, 0x94, 0xb3, 0xcc, 0x73, 0x15, 0xa0, 0x0b, 0xcd, 0x5f, 0xa0, 0xdb,
	0x03, 0xca, 0xe3, 0x43, 0x36, 0x56, 0x6e, 0xcd, 0x1c, 0xf0, 0x8d, 0x0a, 0xac, 0x30, 0x3a, 0xa1,
	0x52, 0x06, 0x46, 0x1a, 0x28, 0x1b, 0x01, 0x06, 0x29, 0x1e, 0x8a, 0xc9, 0x24, 0xa1, 0xc7, 0xec,
	0x9c, 0xba, 0x14, 0x17, 0x90, 0x9f, 0x62, 0x1f, 0x95, 0x29, 0xfe, 0x0e, 0x2d, 0x1f, 0x53, 0x02,
	0xd5, 0x8c, 0x73, 0xe7, 0x0e, 0xd1, 0x86, 0xcd, 0x2a, 0x28, 0x53, 0xfc, 0x03, 0xda, 0xe8, 0x71,
	0x45, 0x33, 0x4e, 0x92, 0xff, 0x64, 0xff, 0x12, 0xa1, 0x03, 0x91, 0x24, 0xe2, 0x43, 0xb0, 0x2b,
	0x0a, 0xc8, 0x0f, 0xd9, 0x47, 0x65, 0xaa, 0x77, 0x76, 0x8f, 0x47, 0x62, 0x4a, 0x4d, 0xad, 0xcc,
	0xdd, 0xce, 0xf6, 0x41, 0x7f, 0x67, 0x87, 0x38, 0x38, 0x18, 0xcc, 0xa5, 0xa2, 0xd3, 0x92, 0x03,
	0x1f, 0xf4, 0x1d, 0x84, 0xb8, 0x4c, 0x71, 0x07, 0xad, 0x9e, 0xa6, 0x93, 0x8c, 0xc4, 0x79, 0x08,
	0xb9, 0x32, 0x40, 0xb5, 0x8b, 0x56, 0x3d, 0x21, 0x53, 0x3c, 0x46, 0x77, 0x7b, 0x5c, 0xce, 0xc6,
	0x63, 0x16, 0x31, 0xca, 0x55, 0x87, 0x24, 0x84, 0x47, 0x46, 0x10, 0x51, 0xfc, 0xc4, 0x85, 0xbe,
	0x40, 0xa1, 0x7d, 0x7f, 0x7a, 0xbd, 0x48, 0xa6, 0xf8, 0x0f, 0xb4, 0xe5, 0x15, 0xc4, 0xaf, 0x3c,
	0x61, 0xdc, 0x14, 0x98, 0xc4, 0x9f, 0x54, 0xeb, 0xa5, 0xa0, 0xf5, 0x02, 0x8f, 0xae, 0x16, 0xc8,
	0x14, 0xff, 0x69, 0x9c, 0x0f, 0xf6, 0xdf, 0x16, 0xf8, 0x40, 0x11, 0x35, 0x93, 0xd8, 0xb3, 0xad,
	0xa1, 0xb5, 0xf7, 0x9d, 0x6b, 0x14, 0x32, 0xc5, 0x43, 0xb4, 0x09, 0x6c, 0xbe, 0x3c, 0x04, 0xfe,
	0x20, 0xb0, 0x0c, 0x38, 0xed, 0xf8, 0xe1, 0x55, 0xb4, 0x29, 0xeb, 0xc6, 0x01, 0xe3, 0x71, 0x7e,
	0x86, 0x99, 0xb6, 0x12, 0x9e, 0x20, 0xf7, 0xbc, 0x0e, 0x6b, 0x3a, 0xdf, 0x3e, 0x55, 0x84, 0x25,
	0x60, 0xfe, 0x1e, 0x61, 0x8d, 0x0d, 0x14, 0xc9, 0x54, 0x27, 0x13, 0x24, 0x8e, 0x88, 0xd7, 0xdd,
	0xab, 0x94, 0x0e, 0xe9, 0xc1, 0x15, 0xac, 0x4c, 0xf1, 0x1e, 0x5a, 0xd3, 0xcc, 0x09, 0xe1, 0x64,
	0x42, 0xcd, 0x61, 0xd1, 0xf2, 0x0c, 0x0a, 0xd8, 0x2f, 0x0a, 0xf3, 0x35, 0x52, 0x40, 0x65, 0x8a,
	0xbf, 0x47, 0x8d, 0x42, 0xdb, 0x3d, 0x23, 0x7c, 0x42, 0x71, 0xbb, 0xe2, 0x04, 0x88, 0xea, 0x61,
	0xf1, 0x1a, 0xde, 0xa9, 0x9b, 0x08, 0x49, 0x8b, 0x77, 0x0a, 0x93, 0xe2, 0x5a, 0x7c, 0x20, 0x32,
	0x8b, 0x3f, 0x47, 0x8d, 0xc3, 0xb2, 0x71, 0xc3, 0x5b, 0xdc, 0x8c, 0x1f, 0xa5, 0x25, 0x5f, 0xc2,
	0x3b, 0xeb, 0x17, 0x80, 0xd8, 0x16, 0x2c, 0x17, 0x8a, 0x6c, 0xcf, 0x5a, 0xd5, 0xe8, 0x5e, 0x1c,
	0x5b, 0xcb, 0x6d, 0x4f, 0xeb, 0xd0, 0xea, 0x92, 0x36, 0x47, 0x5d, 0x5d, 0x21, 0x89, 0x35, 0xf5,
	0x73, 0xe4, 0x13, 0x75, 0x39, 0x6a, 0x1c, 0x98, 0xd9, 0x4e, 0x47, 0x03, 0x43, 0xc2, 0x82, 0x6d,
	0x53, 0x96, 0x99, 0xa0, 0x5f, 0xa1, 0x75, 0xc0, 0xf7, 0xe2, 0xd8, 0x5a, 0xdf, 0x0d, 0xf4, 0x0e,
	0xaf, 0x2e, 0xfd, 0x13, 0xc2, 0xa0, 0x81, 0x08, 0xad, 0xf9, 0xfd, 0xc0, 0xdc, 0xa7, 0xaa, 0x1e,
	0x8e, 0xd0, 0x36, 0xc8, 0x4e, 0x44, 0xcc, 0xc6, 0x73, 0x90, 0x0d, 0x22, 0x92, 0x50, 0xbc, 0x13,
	0xb8, 0xa9, 0xf0, 0x55, 0x5f, 0xdf, 0xa2, 0x15, 0xd0, 0x42, 0x55, 0x94, 0x92, 0xb0, 0x1d, 0xb8,
	0x03, 0x49, 0x5e, 0x37, 0xf6, 0x45, 0x8d, 0x73, 0xe8, 0xca, 0xa5, 0x97, 0xf0, 0x29, 0xbf, 0x6e,
	0xea, 0x58, 0xa8, 0x64, 0x53, 0x51, 0x11, 0xe5, 0xf4, 0x0d, 0x93, 0x4a, 0x64, 0xf3, 0x05, 0x9f,
	0xa4, 0x2c, 0xcb, 0xbb, 0x57, 0x19, 0xb7, 0x51, 0x3d, 0x5a, 0x60, 0x56, 0x44, 0xb6, 0x73, 0x8d,
	0x02, 0xba, 0x17, 0x1c, 0x77, 0x11, 0x65, 0x97, 0x54, 0x9f, 0xf0, 0xa6, 0xb4, 0xfd, 0x5e, 0x50,
	0xe2, 0xfc, 0xee, 0x55, 0x4b, 0xcb, 0x14, 0xf7, 0x20, 0x68, 0x4b, 0x75, 0x48, 0x96, 0xe5, 0x3d,
	0x23, 0x7c, 0xf3, 0x9d, 0xaa, 0x1f, 0x4f, 0x9c, 0xbb, 0x82, 0x94, 0x0e, 0x45, 0x4c, 0xe6, 0x96,
	0xad, 0x69, 0x87, 0x3b, 0xc1, 0x64, 0x5c, 0x16, 0x1b, 0x57, 0xfb, 0xa8, 0xa9, 0x9b, 0xe5, 0x09,
	0xe3, 0x33, 0x45, 0xdf, 0x11, 0x16, 0xdb, 0x44, 0x3e, 0xf4, 0x3a, 0x69, 0x99, 0xac, 0xee, 0xac,
	0x7d, 0xd4, 0x3c, 0x9c, 0xd6, 0x34, 0x57, 0xd7, 0xd1, 0x4f, 0xea, 0xdb, 0x6b, 0xe8, 0xe5, 0x00,
	0xdd, 0xb1, 0x65, 0x20, 0xc4, 0x74, 0x98, 0x11, 0x2e, 0xc7, 0x34, 0x7b, 0x47, 0xe6, 0xee, 0xc0,
	0xab, 0x65, 0x6b, 0x27, 0x68, 0xff, 0xae, 0xe3, 0xc6, 0x84, 0xd2, 0x5d, 0xc9, 0xed, 0xf8, 0xca,
	0xc5, 0xe8, 0x19, 0x5a, 0x79, 0x3f, 0x63, 0xca, 0x39, 0xb8, 0xae, 0x25, 0x76, 0xd0, 0xaa, 0xfe,
	0x36, 0xee, 0xd4, 0x71, 0x7d, 0x2d, 0x40, 0xfd, 0xb1, 0xa2, 0x44, 0xd8, 0xd9, 0x86, 0x92, 0x2c,
	0x3a, 0xb3, 0x4d, 0xc2, 0xcd, 0x36, 0x1e, 0x18, 0xcc, 0x36, 0x01, 0x0e, 0x57, 0x97, 0xf2, 0xb1,
	0xe7, 0x9a, 0x64, 0xf5, 0x3c, 0xbc, 0xb8, 0xfa, 0xac, 0xfc, 0x0c, 0x2d, 0xe9, 0xcd, 0x5b, 0xbe,
	0xa1, 0xe5, 0x89, 0x30, 0x5c, 0xbe, 0x6a, 0x71, 0x4a, 0xd9, 0x11, 0xa2, 0x7a, 0x7c, 0x15, 0xc3,
	0xc3, 0xbd, 0x85, 0x1c, 0xcc, 0xb4, 0x1d, 0x96, 0x24, 0xd2, 0x54, 0x45, 0x3e, 0x93, 0x3a, 0xc4,
	0x9f, 0x49, 0x3d, 0x50, 0xa6, 0xf8, 0x4b, 0xb4, 0x6c, 0x4e, 0x1a, 0x31, 0xe3, 0x6a, 0x41, 0xc4,
	0x86, 0xb3, 0xe2, 0xa5, 0x3a, 0x61, 0xd3, 0x17, 0x3a, 0xcf, 0xaf, 0xd0, 0x7a, 0x67, 0x36, 0xef,
	0x53, 0x4e, 0x3f, 0x90, 0x04, 0xcc, 0xf2, 0xe6, 0x5f, 0xc2, 0xab, 0xbb, 0xe2, 0x2b, 0x74, 0xfb,
	0x94, 0x4a, 0x30, 0x72, 0x17, 0x50, 0x0b, 0x54, 0xd5, 0x5f, 0x23, 0x74, 0xca, 0x9d, 0x3e, 0x8f,
	0xa6, 0x80, 0x6a, 0xdb, 0xb9, 0x8e, 0xf3, 0x37, 0x36, 0xca, 0x88, 0xaa, 0x9c, 0x69, 0xfe, 0x16,
	0xcc, 0x25, 0x79, 0x92, 0x07, 0x4c, 0xd1, 0x63, 0x32, 0xa2, 0x89, 0x4b, 0xb2, 0x43, 0xfc, 0x24,
	0x7b, 0x20, 0xf4, 0xec, 0x37, 0x62, 0x4a, 0x87, 0x22, 0x2d, 0xf6, 0x79, 0x7d, 0xcf, 0x2e, 0xcb,
	0xec, 0x9c, 0xf3, 0xb1, 0x87, 0xe1, 0xe2, 0x56, 0x93, 0xfa, 0x25, 0xb9, 0x55, 0x07, 0x9b, 0x5b,
	0xc7, 0x1a, 0x5c, 0x26, 0x9c, 0x83, 0xfa, 0xa1, 0x23, 0x14, 0x19, 0xd3, 0xa7, 0xe8, 0x96, 0x7e,
	0xd6, 0x7d, 0x64, 0xc3, 0xdb, 0xf2, 0xb5, 0x9d, 0x63, 0x0f, 0xad, 0xe9, 0xe0, 0x6b, 0xe6, 0xb9,
	0x10, 0xbe, 0x7a, 0x9e, 0x2b, 0xb4, 0xa5, 0x79, 0xae, 0x4c, 0x54, 0x02, 0xe8, 0xdc, 0xff, 0xbd,
	0x7d, 0x31, 0xa3, 0x33, 0x7a, 0x24, 0x46, 0xbb, 0xe9, 0xf9, 0x64, 0xd7, 0x70, 0xa3, 0xd9, 0xd8,
	0xfc, 0xb7, 0x6b, 0x74, 0xd3, 0x3c, 0xbe, 0xf8, 0x37, 0x00, 0x00, 0xff, 0xff, 0x7b, 0xd4, 0x05,
	0xab, 0x01, 0x13, 0x00, 0x00,
}
