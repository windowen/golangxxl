// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.5.1
// source: live/live.proto

package live

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	common "queueJob/pkg/protobuf/common"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	LiveServer_Configs_FullMethodName                   = "/proto.LiveServer/Configs"
	LiveServer_AnchorRank_FullMethodName                = "/proto.LiveServer/AnchorRank"
	LiveServer_UserRank_FullMethodName                  = "/proto.LiveServer/UserRank"
	LiveServer_GetRTCServerList_FullMethodName          = "/proto.LiveServer/GetRTCServerList"
	LiveServer_LiveCallBack_FullMethodName              = "/proto.LiveServer/LiveCallBack"
	LiveServer_ChatCallBack_FullMethodName              = "/proto.LiveServer/ChatCallBack"
	LiveServer_CreateChatRooms_FullMethodName           = "/proto.LiveServer/CreateChatRooms"
	LiveServer_CreateUser_FullMethodName                = "/proto.LiveServer/CreateUser"
	LiveServer_GetChatRoomInfo_FullMethodName           = "/proto.LiveServer/GetChatRoomInfo"
	LiveServer_JoinRoom_FullMethodName                  = "/proto.LiveServer/JoinRoom"
	LiveServer_RobotJoinRoom_FullMethodName             = "/proto.LiveServer/RobotJoinRoom"
	LiveServer_SendGift_FullMethodName                  = "/proto.LiveServer/SendGift"
	LiveServer_SendMess_FullMethodName                  = "/proto.LiveServer/SendMess"
	LiveServer_ToggleLike_FullMethodName                = "/proto.LiveServer/ToggleLike"
	LiveServer_LeaveRoom_FullMethodName                 = "/proto.LiveServer/LeaveRoom"
	LiveServer_InternalLeaveRoom_FullMethodName         = "/proto.LiveServer/InternalLeaveRoom"
	LiveServer_FollowUser_FullMethodName                = "/proto.LiveServer/FollowUser"
	LiveServer_IncomeNotify_FullMethodName              = "/proto.LiveServer/IncomeNotify"
	LiveServer_SystemNotify_FullMethodName              = "/proto.LiveServer/SystemNotify"
	LiveServer_UpgradeNotify_FullMethodName             = "/proto.LiveServer/UpgradeNotify"
	LiveServer_InsufficientBalanceNotice_FullMethodName = "/proto.LiveServer/InsufficientBalanceNotice"
	LiveServer_GetChatRoomOnlineUsers_FullMethodName    = "/proto.LiveServer/GetChatRoomOnlineUsers"
	LiveServer_GetSDKOnlineUserStatus_FullMethodName    = "/proto.LiveServer/GetSDKOnlineUserStatus"
	LiveServer_GetSDKChatRoomUsers_FullMethodName       = "/proto.LiveServer/GetSDKChatRoomUsers"
	LiveServer_FindLiveRoomInfo_FullMethodName          = "/proto.LiveServer/FindLiveRoomInfo"
	LiveServer_RoomStartBroadcast_FullMethodName        = "/proto.LiveServer/RoomStartBroadcast"
	LiveServer_RoomManageList_FullMethodName            = "/proto.LiveServer/RoomManageList"
	LiveServer_RoomManageChange_FullMethodName          = "/proto.LiveServer/RoomManageChange"
	LiveServer_RoomCloseBroadcast_FullMethodName        = "/proto.LiveServer/RoomCloseBroadcast"
	LiveServer_GmCloseBroadcast_FullMethodName          = "/proto.LiveServer/GmCloseBroadcast"
	LiveServer_RoomListManage_FullMethodName            = "/proto.LiveServer/RoomListManage"
	LiveServer_RoomAddManage_FullMethodName             = "/proto.LiveServer/RoomAddManage"
	LiveServer_RoomCancelManage_FullMethodName          = "/proto.LiveServer/RoomCancelManage"
	LiveServer_FamilyListAnchor_FullMethodName          = "/proto.LiveServer/FamilyListAnchor"
	LiveServer_FamilyAddAnchor_FullMethodName           = "/proto.LiveServer/FamilyAddAnchor"
	LiveServer_FamilyCancelAnchor_FullMethodName        = "/proto.LiveServer/FamilyCancelAnchor"
	LiveServer_FamilyModifyAnchorScale_FullMethodName   = "/proto.LiveServer/FamilyModifyAnchorScale"
	LiveServer_FamilyDetail_FullMethodName              = "/proto.LiveServer/FamilyDetail"
	LiveServer_FamilyAnchorIncome_FullMethodName        = "/proto.LiveServer/FamilyAnchorIncome"
	LiveServer_RoomSceneHistory_FullMethodName          = "/proto.LiveServer/RoomSceneHistory"
	LiveServer_RoomSceneHistoryIncome_FullMethodName    = "/proto.LiveServer/RoomSceneHistoryIncome"
	LiveServer_RoomReceiveGiftList_FullMethodName       = "/proto.LiveServer/RoomReceiveGiftList"
	LiveServer_RoomReceiveBarrageList_FullMethodName    = "/proto.LiveServer/RoomReceiveBarrageList"
	LiveServer_AnchorTodayBarrageInfo_FullMethodName    = "/proto.LiveServer/AnchorTodayBarrageInfo"
	LiveServer_LiveMinutePaidIncome_FullMethodName      = "/proto.LiveServer/LiveMinutePaidIncome"
	LiveServer_GmRoomStartBroadcast_FullMethodName      = "/proto.LiveServer/GmRoomStartBroadcast"
	LiveServer_AnchorRoomTransferPay_FullMethodName     = "/proto.LiveServer/AnchorRoomTransferPay"
	LiveServer_JoinLiveRoom_FullMethodName              = "/proto.LiveServer/JoinLiveRoom"
	LiveServer_QuitLiveRoom_FullMethodName              = "/proto.LiveServer/QuitLiveRoom"
	LiveServer_ListLiveRooms_FullMethodName             = "/proto.LiveServer/ListLiveRooms"
	LiveServer_SearchAnchor_FullMethodName              = "/proto.LiveServer/SearchAnchor"
	LiveServer_LiveRoomsDetails_FullMethodName          = "/proto.LiveServer/LiveRoomsDetails"
	LiveServer_Gifts_FullMethodName                     = "/proto.LiveServer/Gifts"
	LiveServer_RoomManageStatus_FullMethodName          = "/proto.LiveServer/RoomManageStatus"
	LiveServer_BillsList_FullMethodName                 = "/proto.LiveServer/BillsList"
	LiveServer_ListMount_FullMethodName                 = "/proto.LiveServer/ListMount"
	LiveServer_Mount_FullMethodName                     = "/proto.LiveServer/Mount"
	LiveServer_BuyRenewalMount_FullMethodName           = "/proto.LiveServer/BuyRenewalMount"
	LiveServer_UesMount_FullMethodName                  = "/proto.LiveServer/UesMount"
	LiveServer_UnUesMount_FullMethodName                = "/proto.LiveServer/UnUesMount"
	LiveServer_ListVibrator_FullMethodName              = "/proto.LiveServer/ListVibrator"
	LiveServer_SiteLabel_FullMethodName                 = "/proto.LiveServer/SiteLabel"
	LiveServer_HomeTopLiveRooms_FullMethodName          = "/proto.LiveServer/HomeTopLiveRooms"
	LiveServer_TopLiveRoom_FullMethodName               = "/proto.LiveServer/TopLiveRoom"
	LiveServer_FollowLiveRoom_FullMethodName            = "/proto.LiveServer/FollowLiveRoom"
	LiveServer_LivePay_FullMethodName                   = "/proto.LiveServer/LivePay"
	LiveServer_HomeManageList_FullMethodName            = "/proto.LiveServer/HomeManageList"
	LiveServer_HomeManageChange_FullMethodName          = "/proto.LiveServer/HomeManageChange"
)

// LiveServerClient is the client API for LiveServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LiveServerClient interface {
	Configs(ctx context.Context, in *common.Empty, opts ...grpc.CallOption) (*ConfigResp, error)
	AnchorRank(ctx context.Context, in *AnchorRankReq, opts ...grpc.CallOption) (*AnchorRankResp, error)
	UserRank(ctx context.Context, in *UserRankReq, opts ...grpc.CallOption) (*UserRankResp, error)
	// live
	GetRTCServerList(ctx context.Context, in *NotificationServerReq, opts ...grpc.CallOption) (*NotificationServer, error)
	LiveCallBack(ctx context.Context, in *LiveCallBackReq, opts ...grpc.CallOption) (*common.Empty, error)
	// im
	ChatCallBack(ctx context.Context, in *ChatCallBackReq, opts ...grpc.CallOption) (*ChatCallBackResp, error)
	CreateChatRooms(ctx context.Context, in *CreateChatRoomReq, opts ...grpc.CallOption) (*CreateChatRoomResp, error)
	CreateUser(ctx context.Context, in *CreateUserReq, opts ...grpc.CallOption) (*CreateUserResp, error)
	// chatroom
	GetChatRoomInfo(ctx context.Context, in *GetChatRoomInfoReq, opts ...grpc.CallOption) (*GetChatRoomInfoResp, error)
	JoinRoom(ctx context.Context, in *JoinRoomReq, opts ...grpc.CallOption) (*JoinRoomResp, error)
	RobotJoinRoom(ctx context.Context, in *RobotJoinRoomReq, opts ...grpc.CallOption) (*JoinRoomResp, error)
	SendGift(ctx context.Context, in *SendGiftReq, opts ...grpc.CallOption) (*SendGiftResp, error)
	SendMess(ctx context.Context, in *SendMessReq, opts ...grpc.CallOption) (*SendMessResp, error)
	ToggleLike(ctx context.Context, in *ToggleLikeReq, opts ...grpc.CallOption) (*ToggleLikeResp, error)
	LeaveRoom(ctx context.Context, in *LeaveRoomReq, opts ...grpc.CallOption) (*LeaveRoomResp, error)
	InternalLeaveRoom(ctx context.Context, in *LeaveRoomReq, opts ...grpc.CallOption) (*LeaveRoomResp, error)
	FollowUser(ctx context.Context, in *FollowUserReq, opts ...grpc.CallOption) (*FollowUserResp, error)
	IncomeNotify(ctx context.Context, in *IncomeNotifyReq, opts ...grpc.CallOption) (*IncomeNotifyResp, error)
	SystemNotify(ctx context.Context, in *SystemNotifyReq, opts ...grpc.CallOption) (*SystemNotifyResp, error)
	UpgradeNotify(ctx context.Context, in *UpgradeNotifyReq, opts ...grpc.CallOption) (*UpgradeNotifyResp, error)
	InsufficientBalanceNotice(ctx context.Context, in *InsufficientBalanceNoticeReq, opts ...grpc.CallOption) (*InsufficientBalanceNoticeResp, error)
	GetChatRoomOnlineUsers(ctx context.Context, in *GetChatRoomOnlineUserReq, opts ...grpc.CallOption) (*GetChatRoomOnlineUserResp, error)
	GetSDKOnlineUserStatus(ctx context.Context, in *GetSDKOnlineUserStatusReq, opts ...grpc.CallOption) (*GetSDKOnlineUserStatusResp, error)
	GetSDKChatRoomUsers(ctx context.Context, in *GetSDKChatRoomUsersReq, opts ...grpc.CallOption) (*GetSDKChatRoomUsersResp, error)
	// 主播
	FindLiveRoomInfo(ctx context.Context, in *common.Empty, opts ...grpc.CallOption) (*LiveRoomsDetailsResp, error)
	RoomStartBroadcast(ctx context.Context, in *RoomStartBroadcastReq, opts ...grpc.CallOption) (*RoomStartBroadcastResp, error)
	RoomManageList(ctx context.Context, in *RoomManageListReq, opts ...grpc.CallOption) (*RoomOpListResp, error)
	RoomManageChange(ctx context.Context, in *RoomManageChangeReq, opts ...grpc.CallOption) (*common.Empty, error)
	RoomCloseBroadcast(ctx context.Context, in *common.Empty, opts ...grpc.CallOption) (*CloseBroadcastResp, error)
	GmCloseBroadcast(ctx context.Context, in *RoomIdReq, opts ...grpc.CallOption) (*common.Empty, error)
	RoomListManage(ctx context.Context, in *common.Empty, opts ...grpc.CallOption) (*RoomListManageResp, error)
	RoomAddManage(ctx context.Context, in *RoomAddManageReq, opts ...grpc.CallOption) (*common.Empty, error)
	RoomCancelManage(ctx context.Context, in *RoomCancelManageReq, opts ...grpc.CallOption) (*common.Empty, error)
	FamilyListAnchor(ctx context.Context, in *common.Empty, opts ...grpc.CallOption) (*FamilyListAnchorResp, error)
	FamilyAddAnchor(ctx context.Context, in *FamilyAddAnchorReq, opts ...grpc.CallOption) (*common.Empty, error)
	FamilyCancelAnchor(ctx context.Context, in *FamilyCancelAnchorReq, opts ...grpc.CallOption) (*common.Empty, error)
	FamilyModifyAnchorScale(ctx context.Context, in *FamilyModifyAnchorScaleReq, opts ...grpc.CallOption) (*common.Empty, error)
	FamilyDetail(ctx context.Context, in *common.Empty, opts ...grpc.CallOption) (*FamilyDetailResp, error)
	FamilyAnchorIncome(ctx context.Context, in *FamilyAnchorIncomeReq, opts ...grpc.CallOption) (*FamilyAnchorIncomeResp, error)
	RoomSceneHistory(ctx context.Context, in *common.Empty, opts ...grpc.CallOption) (*RoomSceneHistoryResp, error)
	RoomSceneHistoryIncome(ctx context.Context, in *RoomSceneHistoryIncomeReq, opts ...grpc.CallOption) (*RoomSceneHistoryIncomeResp, error)
	RoomReceiveGiftList(ctx context.Context, in *RoomReceiveGiftListReq, opts ...grpc.CallOption) (*RoomReceiveGiftListResp, error)
	RoomReceiveBarrageList(ctx context.Context, in *common.Empty, opts ...grpc.CallOption) (*RoomReceiveBarrageListResp, error)
	AnchorTodayBarrageInfo(ctx context.Context, in *common.Empty, opts ...grpc.CallOption) (*AnchorTodayBarrageInfoResp, error)
	LiveMinutePaidIncome(ctx context.Context, in *LiveMinutePaidIncomeReq, opts ...grpc.CallOption) (*common.Empty, error)
	GmRoomStartBroadcast(ctx context.Context, in *GMRoomStartBroadcastReq, opts ...grpc.CallOption) (*common.Empty, error)
	AnchorRoomTransferPay(ctx context.Context, in *AnchorRoomTransferPayReq, opts ...grpc.CallOption) (*common.Empty, error)
	// 用户
	JoinLiveRoom(ctx context.Context, in *JoinLiveRoomReq, opts ...grpc.CallOption) (*JoinLiveRoomResp, error)
	QuitLiveRoom(ctx context.Context, in *RoomIdReq, opts ...grpc.CallOption) (*common.Empty, error)
	ListLiveRooms(ctx context.Context, in *ListLiveRoomsReq, opts ...grpc.CallOption) (*ListLiveRoomsResp, error)
	SearchAnchor(ctx context.Context, in *SearchAnchorReq, opts ...grpc.CallOption) (*SearchAnchorResp, error)
	LiveRoomsDetails(ctx context.Context, in *LiveRoomsDetailsReq, opts ...grpc.CallOption) (*LiveRoomsDetailsResp, error)
	Gifts(ctx context.Context, in *common.Empty, opts ...grpc.CallOption) (*GiftsResp, error)
	RoomManageStatus(ctx context.Context, in *RoomManageStatusReq, opts ...grpc.CallOption) (*RoomManageStatusResp, error)
	BillsList(ctx context.Context, in *BillsListReq, opts ...grpc.CallOption) (*BillsListResp, error)
	ListMount(ctx context.Context, in *common.Empty, opts ...grpc.CallOption) (*MountResp, error)
	Mount(ctx context.Context, in *common.Empty, opts ...grpc.CallOption) (*MountListResp, error)
	BuyRenewalMount(ctx context.Context, in *BuyRenewalMountReq, opts ...grpc.CallOption) (*common.Empty, error)
	UesMount(ctx context.Context, in *UesMountReq, opts ...grpc.CallOption) (*common.Empty, error)
	UnUesMount(ctx context.Context, in *UnUesMountReq, opts ...grpc.CallOption) (*common.Empty, error)
	ListVibrator(ctx context.Context, in *common.Empty, opts ...grpc.CallOption) (*ListVibratorResp, error)
	SiteLabel(ctx context.Context, in *SiteLabelReq, opts ...grpc.CallOption) (*SiteLabelResp, error)
	HomeTopLiveRooms(ctx context.Context, in *common.Empty, opts ...grpc.CallOption) (*HomeTopLiveRoomsResp, error)
	TopLiveRoom(ctx context.Context, in *TopLiveRoomReq, opts ...grpc.CallOption) (*TopLiveRoomResp, error)
	FollowLiveRoom(ctx context.Context, in *common.Empty, opts ...grpc.CallOption) (*FollowLiveRoomResp, error)
	LivePay(ctx context.Context, in *LivePayReq, opts ...grpc.CallOption) (*common.Empty, error)
	HomeManageList(ctx context.Context, in *HomeManageListReq, opts ...grpc.CallOption) (*RoomOpListResp, error)
	HomeManageChange(ctx context.Context, in *HomeManageChangeReq, opts ...grpc.CallOption) (*common.Empty, error)
}

type liveServerClient struct {
	cc grpc.ClientConnInterface
}

func NewLiveServerClient(cc grpc.ClientConnInterface) LiveServerClient {
	return &liveServerClient{cc}
}

func (c *liveServerClient) Configs(ctx context.Context, in *common.Empty, opts ...grpc.CallOption) (*ConfigResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ConfigResp)
	err := c.cc.Invoke(ctx, LiveServer_Configs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *liveServerClient) AnchorRank(ctx context.Context, in *AnchorRankReq, opts ...grpc.CallOption) (*AnchorRankResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AnchorRankResp)
	err := c.cc.Invoke(ctx, LiveServer_AnchorRank_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *liveServerClient) UserRank(ctx context.Context, in *UserRankReq, opts ...grpc.CallOption) (*UserRankResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserRankResp)
	err := c.cc.Invoke(ctx, LiveServer_UserRank_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *liveServerClient) GetRTCServerList(ctx context.Context, in *NotificationServerReq, opts ...grpc.CallOption) (*NotificationServer, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NotificationServer)
	err := c.cc.Invoke(ctx, LiveServer_GetRTCServerList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *liveServerClient) LiveCallBack(ctx context.Context, in *LiveCallBackReq, opts ...grpc.CallOption) (*common.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(common.Empty)
	err := c.cc.Invoke(ctx, LiveServer_LiveCallBack_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *liveServerClient) ChatCallBack(ctx context.Context, in *ChatCallBackReq, opts ...grpc.CallOption) (*ChatCallBackResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ChatCallBackResp)
	err := c.cc.Invoke(ctx, LiveServer_ChatCallBack_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *liveServerClient) CreateChatRooms(ctx context.Context, in *CreateChatRoomReq, opts ...grpc.CallOption) (*CreateChatRoomResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateChatRoomResp)
	err := c.cc.Invoke(ctx, LiveServer_CreateChatRooms_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *liveServerClient) CreateUser(ctx context.Context, in *CreateUserReq, opts ...grpc.CallOption) (*CreateUserResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateUserResp)
	err := c.cc.Invoke(ctx, LiveServer_CreateUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *liveServerClient) GetChatRoomInfo(ctx context.Context, in *GetChatRoomInfoReq, opts ...grpc.CallOption) (*GetChatRoomInfoResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetChatRoomInfoResp)
	err := c.cc.Invoke(ctx, LiveServer_GetChatRoomInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *liveServerClient) JoinRoom(ctx context.Context, in *JoinRoomReq, opts ...grpc.CallOption) (*JoinRoomResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(JoinRoomResp)
	err := c.cc.Invoke(ctx, LiveServer_JoinRoom_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *liveServerClient) RobotJoinRoom(ctx context.Context, in *RobotJoinRoomReq, opts ...grpc.CallOption) (*JoinRoomResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(JoinRoomResp)
	err := c.cc.Invoke(ctx, LiveServer_RobotJoinRoom_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *liveServerClient) SendGift(ctx context.Context, in *SendGiftReq, opts ...grpc.CallOption) (*SendGiftResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SendGiftResp)
	err := c.cc.Invoke(ctx, LiveServer_SendGift_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *liveServerClient) SendMess(ctx context.Context, in *SendMessReq, opts ...grpc.CallOption) (*SendMessResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SendMessResp)
	err := c.cc.Invoke(ctx, LiveServer_SendMess_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *liveServerClient) ToggleLike(ctx context.Context, in *ToggleLikeReq, opts ...grpc.CallOption) (*ToggleLikeResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ToggleLikeResp)
	err := c.cc.Invoke(ctx, LiveServer_ToggleLike_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *liveServerClient) LeaveRoom(ctx context.Context, in *LeaveRoomReq, opts ...grpc.CallOption) (*LeaveRoomResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LeaveRoomResp)
	err := c.cc.Invoke(ctx, LiveServer_LeaveRoom_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *liveServerClient) InternalLeaveRoom(ctx context.Context, in *LeaveRoomReq, opts ...grpc.CallOption) (*LeaveRoomResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LeaveRoomResp)
	err := c.cc.Invoke(ctx, LiveServer_InternalLeaveRoom_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *liveServerClient) FollowUser(ctx context.Context, in *FollowUserReq, opts ...grpc.CallOption) (*FollowUserResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FollowUserResp)
	err := c.cc.Invoke(ctx, LiveServer_FollowUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *liveServerClient) IncomeNotify(ctx context.Context, in *IncomeNotifyReq, opts ...grpc.CallOption) (*IncomeNotifyResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IncomeNotifyResp)
	err := c.cc.Invoke(ctx, LiveServer_IncomeNotify_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *liveServerClient) SystemNotify(ctx context.Context, in *SystemNotifyReq, opts ...grpc.CallOption) (*SystemNotifyResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SystemNotifyResp)
	err := c.cc.Invoke(ctx, LiveServer_SystemNotify_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *liveServerClient) UpgradeNotify(ctx context.Context, in *UpgradeNotifyReq, opts ...grpc.CallOption) (*UpgradeNotifyResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpgradeNotifyResp)
	err := c.cc.Invoke(ctx, LiveServer_UpgradeNotify_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *liveServerClient) InsufficientBalanceNotice(ctx context.Context, in *InsufficientBalanceNoticeReq, opts ...grpc.CallOption) (*InsufficientBalanceNoticeResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InsufficientBalanceNoticeResp)
	err := c.cc.Invoke(ctx, LiveServer_InsufficientBalanceNotice_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *liveServerClient) GetChatRoomOnlineUsers(ctx context.Context, in *GetChatRoomOnlineUserReq, opts ...grpc.CallOption) (*GetChatRoomOnlineUserResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetChatRoomOnlineUserResp)
	err := c.cc.Invoke(ctx, LiveServer_GetChatRoomOnlineUsers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *liveServerClient) GetSDKOnlineUserStatus(ctx context.Context, in *GetSDKOnlineUserStatusReq, opts ...grpc.CallOption) (*GetSDKOnlineUserStatusResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSDKOnlineUserStatusResp)
	err := c.cc.Invoke(ctx, LiveServer_GetSDKOnlineUserStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *liveServerClient) GetSDKChatRoomUsers(ctx context.Context, in *GetSDKChatRoomUsersReq, opts ...grpc.CallOption) (*GetSDKChatRoomUsersResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSDKChatRoomUsersResp)
	err := c.cc.Invoke(ctx, LiveServer_GetSDKChatRoomUsers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *liveServerClient) FindLiveRoomInfo(ctx context.Context, in *common.Empty, opts ...grpc.CallOption) (*LiveRoomsDetailsResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LiveRoomsDetailsResp)
	err := c.cc.Invoke(ctx, LiveServer_FindLiveRoomInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *liveServerClient) RoomStartBroadcast(ctx context.Context, in *RoomStartBroadcastReq, opts ...grpc.CallOption) (*RoomStartBroadcastResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RoomStartBroadcastResp)
	err := c.cc.Invoke(ctx, LiveServer_RoomStartBroadcast_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *liveServerClient) RoomManageList(ctx context.Context, in *RoomManageListReq, opts ...grpc.CallOption) (*RoomOpListResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RoomOpListResp)
	err := c.cc.Invoke(ctx, LiveServer_RoomManageList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *liveServerClient) RoomManageChange(ctx context.Context, in *RoomManageChangeReq, opts ...grpc.CallOption) (*common.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(common.Empty)
	err := c.cc.Invoke(ctx, LiveServer_RoomManageChange_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *liveServerClient) RoomCloseBroadcast(ctx context.Context, in *common.Empty, opts ...grpc.CallOption) (*CloseBroadcastResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CloseBroadcastResp)
	err := c.cc.Invoke(ctx, LiveServer_RoomCloseBroadcast_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *liveServerClient) GmCloseBroadcast(ctx context.Context, in *RoomIdReq, opts ...grpc.CallOption) (*common.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(common.Empty)
	err := c.cc.Invoke(ctx, LiveServer_GmCloseBroadcast_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *liveServerClient) RoomListManage(ctx context.Context, in *common.Empty, opts ...grpc.CallOption) (*RoomListManageResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RoomListManageResp)
	err := c.cc.Invoke(ctx, LiveServer_RoomListManage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *liveServerClient) RoomAddManage(ctx context.Context, in *RoomAddManageReq, opts ...grpc.CallOption) (*common.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(common.Empty)
	err := c.cc.Invoke(ctx, LiveServer_RoomAddManage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *liveServerClient) RoomCancelManage(ctx context.Context, in *RoomCancelManageReq, opts ...grpc.CallOption) (*common.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(common.Empty)
	err := c.cc.Invoke(ctx, LiveServer_RoomCancelManage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *liveServerClient) FamilyListAnchor(ctx context.Context, in *common.Empty, opts ...grpc.CallOption) (*FamilyListAnchorResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FamilyListAnchorResp)
	err := c.cc.Invoke(ctx, LiveServer_FamilyListAnchor_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *liveServerClient) FamilyAddAnchor(ctx context.Context, in *FamilyAddAnchorReq, opts ...grpc.CallOption) (*common.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(common.Empty)
	err := c.cc.Invoke(ctx, LiveServer_FamilyAddAnchor_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *liveServerClient) FamilyCancelAnchor(ctx context.Context, in *FamilyCancelAnchorReq, opts ...grpc.CallOption) (*common.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(common.Empty)
	err := c.cc.Invoke(ctx, LiveServer_FamilyCancelAnchor_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *liveServerClient) FamilyModifyAnchorScale(ctx context.Context, in *FamilyModifyAnchorScaleReq, opts ...grpc.CallOption) (*common.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(common.Empty)
	err := c.cc.Invoke(ctx, LiveServer_FamilyModifyAnchorScale_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *liveServerClient) FamilyDetail(ctx context.Context, in *common.Empty, opts ...grpc.CallOption) (*FamilyDetailResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FamilyDetailResp)
	err := c.cc.Invoke(ctx, LiveServer_FamilyDetail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *liveServerClient) FamilyAnchorIncome(ctx context.Context, in *FamilyAnchorIncomeReq, opts ...grpc.CallOption) (*FamilyAnchorIncomeResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FamilyAnchorIncomeResp)
	err := c.cc.Invoke(ctx, LiveServer_FamilyAnchorIncome_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *liveServerClient) RoomSceneHistory(ctx context.Context, in *common.Empty, opts ...grpc.CallOption) (*RoomSceneHistoryResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RoomSceneHistoryResp)
	err := c.cc.Invoke(ctx, LiveServer_RoomSceneHistory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *liveServerClient) RoomSceneHistoryIncome(ctx context.Context, in *RoomSceneHistoryIncomeReq, opts ...grpc.CallOption) (*RoomSceneHistoryIncomeResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RoomSceneHistoryIncomeResp)
	err := c.cc.Invoke(ctx, LiveServer_RoomSceneHistoryIncome_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *liveServerClient) RoomReceiveGiftList(ctx context.Context, in *RoomReceiveGiftListReq, opts ...grpc.CallOption) (*RoomReceiveGiftListResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RoomReceiveGiftListResp)
	err := c.cc.Invoke(ctx, LiveServer_RoomReceiveGiftList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *liveServerClient) RoomReceiveBarrageList(ctx context.Context, in *common.Empty, opts ...grpc.CallOption) (*RoomReceiveBarrageListResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RoomReceiveBarrageListResp)
	err := c.cc.Invoke(ctx, LiveServer_RoomReceiveBarrageList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *liveServerClient) AnchorTodayBarrageInfo(ctx context.Context, in *common.Empty, opts ...grpc.CallOption) (*AnchorTodayBarrageInfoResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AnchorTodayBarrageInfoResp)
	err := c.cc.Invoke(ctx, LiveServer_AnchorTodayBarrageInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *liveServerClient) LiveMinutePaidIncome(ctx context.Context, in *LiveMinutePaidIncomeReq, opts ...grpc.CallOption) (*common.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(common.Empty)
	err := c.cc.Invoke(ctx, LiveServer_LiveMinutePaidIncome_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *liveServerClient) GmRoomStartBroadcast(ctx context.Context, in *GMRoomStartBroadcastReq, opts ...grpc.CallOption) (*common.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(common.Empty)
	err := c.cc.Invoke(ctx, LiveServer_GmRoomStartBroadcast_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *liveServerClient) AnchorRoomTransferPay(ctx context.Context, in *AnchorRoomTransferPayReq, opts ...grpc.CallOption) (*common.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(common.Empty)
	err := c.cc.Invoke(ctx, LiveServer_AnchorRoomTransferPay_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *liveServerClient) JoinLiveRoom(ctx context.Context, in *JoinLiveRoomReq, opts ...grpc.CallOption) (*JoinLiveRoomResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(JoinLiveRoomResp)
	err := c.cc.Invoke(ctx, LiveServer_JoinLiveRoom_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *liveServerClient) QuitLiveRoom(ctx context.Context, in *RoomIdReq, opts ...grpc.CallOption) (*common.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(common.Empty)
	err := c.cc.Invoke(ctx, LiveServer_QuitLiveRoom_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *liveServerClient) ListLiveRooms(ctx context.Context, in *ListLiveRoomsReq, opts ...grpc.CallOption) (*ListLiveRoomsResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListLiveRoomsResp)
	err := c.cc.Invoke(ctx, LiveServer_ListLiveRooms_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *liveServerClient) SearchAnchor(ctx context.Context, in *SearchAnchorReq, opts ...grpc.CallOption) (*SearchAnchorResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SearchAnchorResp)
	err := c.cc.Invoke(ctx, LiveServer_SearchAnchor_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *liveServerClient) LiveRoomsDetails(ctx context.Context, in *LiveRoomsDetailsReq, opts ...grpc.CallOption) (*LiveRoomsDetailsResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LiveRoomsDetailsResp)
	err := c.cc.Invoke(ctx, LiveServer_LiveRoomsDetails_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *liveServerClient) Gifts(ctx context.Context, in *common.Empty, opts ...grpc.CallOption) (*GiftsResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GiftsResp)
	err := c.cc.Invoke(ctx, LiveServer_Gifts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *liveServerClient) RoomManageStatus(ctx context.Context, in *RoomManageStatusReq, opts ...grpc.CallOption) (*RoomManageStatusResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RoomManageStatusResp)
	err := c.cc.Invoke(ctx, LiveServer_RoomManageStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *liveServerClient) BillsList(ctx context.Context, in *BillsListReq, opts ...grpc.CallOption) (*BillsListResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BillsListResp)
	err := c.cc.Invoke(ctx, LiveServer_BillsList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *liveServerClient) ListMount(ctx context.Context, in *common.Empty, opts ...grpc.CallOption) (*MountResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MountResp)
	err := c.cc.Invoke(ctx, LiveServer_ListMount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *liveServerClient) Mount(ctx context.Context, in *common.Empty, opts ...grpc.CallOption) (*MountListResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MountListResp)
	err := c.cc.Invoke(ctx, LiveServer_Mount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *liveServerClient) BuyRenewalMount(ctx context.Context, in *BuyRenewalMountReq, opts ...grpc.CallOption) (*common.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(common.Empty)
	err := c.cc.Invoke(ctx, LiveServer_BuyRenewalMount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *liveServerClient) UesMount(ctx context.Context, in *UesMountReq, opts ...grpc.CallOption) (*common.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(common.Empty)
	err := c.cc.Invoke(ctx, LiveServer_UesMount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *liveServerClient) UnUesMount(ctx context.Context, in *UnUesMountReq, opts ...grpc.CallOption) (*common.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(common.Empty)
	err := c.cc.Invoke(ctx, LiveServer_UnUesMount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *liveServerClient) ListVibrator(ctx context.Context, in *common.Empty, opts ...grpc.CallOption) (*ListVibratorResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListVibratorResp)
	err := c.cc.Invoke(ctx, LiveServer_ListVibrator_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *liveServerClient) SiteLabel(ctx context.Context, in *SiteLabelReq, opts ...grpc.CallOption) (*SiteLabelResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SiteLabelResp)
	err := c.cc.Invoke(ctx, LiveServer_SiteLabel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *liveServerClient) HomeTopLiveRooms(ctx context.Context, in *common.Empty, opts ...grpc.CallOption) (*HomeTopLiveRoomsResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HomeTopLiveRoomsResp)
	err := c.cc.Invoke(ctx, LiveServer_HomeTopLiveRooms_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *liveServerClient) TopLiveRoom(ctx context.Context, in *TopLiveRoomReq, opts ...grpc.CallOption) (*TopLiveRoomResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TopLiveRoomResp)
	err := c.cc.Invoke(ctx, LiveServer_TopLiveRoom_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *liveServerClient) FollowLiveRoom(ctx context.Context, in *common.Empty, opts ...grpc.CallOption) (*FollowLiveRoomResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FollowLiveRoomResp)
	err := c.cc.Invoke(ctx, LiveServer_FollowLiveRoom_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *liveServerClient) LivePay(ctx context.Context, in *LivePayReq, opts ...grpc.CallOption) (*common.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(common.Empty)
	err := c.cc.Invoke(ctx, LiveServer_LivePay_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *liveServerClient) HomeManageList(ctx context.Context, in *HomeManageListReq, opts ...grpc.CallOption) (*RoomOpListResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RoomOpListResp)
	err := c.cc.Invoke(ctx, LiveServer_HomeManageList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *liveServerClient) HomeManageChange(ctx context.Context, in *HomeManageChangeReq, opts ...grpc.CallOption) (*common.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(common.Empty)
	err := c.cc.Invoke(ctx, LiveServer_HomeManageChange_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LiveServerServer is the server API for LiveServer service.
// All implementations must embed UnimplementedLiveServerServer
// for forward compatibility.
type LiveServerServer interface {
	Configs(context.Context, *common.Empty) (*ConfigResp, error)
	AnchorRank(context.Context, *AnchorRankReq) (*AnchorRankResp, error)
	UserRank(context.Context, *UserRankReq) (*UserRankResp, error)
	// live
	GetRTCServerList(context.Context, *NotificationServerReq) (*NotificationServer, error)
	LiveCallBack(context.Context, *LiveCallBackReq) (*common.Empty, error)
	// im
	ChatCallBack(context.Context, *ChatCallBackReq) (*ChatCallBackResp, error)
	CreateChatRooms(context.Context, *CreateChatRoomReq) (*CreateChatRoomResp, error)
	CreateUser(context.Context, *CreateUserReq) (*CreateUserResp, error)
	// chatroom
	GetChatRoomInfo(context.Context, *GetChatRoomInfoReq) (*GetChatRoomInfoResp, error)
	JoinRoom(context.Context, *JoinRoomReq) (*JoinRoomResp, error)
	RobotJoinRoom(context.Context, *RobotJoinRoomReq) (*JoinRoomResp, error)
	SendGift(context.Context, *SendGiftReq) (*SendGiftResp, error)
	SendMess(context.Context, *SendMessReq) (*SendMessResp, error)
	ToggleLike(context.Context, *ToggleLikeReq) (*ToggleLikeResp, error)
	LeaveRoom(context.Context, *LeaveRoomReq) (*LeaveRoomResp, error)
	InternalLeaveRoom(context.Context, *LeaveRoomReq) (*LeaveRoomResp, error)
	FollowUser(context.Context, *FollowUserReq) (*FollowUserResp, error)
	IncomeNotify(context.Context, *IncomeNotifyReq) (*IncomeNotifyResp, error)
	SystemNotify(context.Context, *SystemNotifyReq) (*SystemNotifyResp, error)
	UpgradeNotify(context.Context, *UpgradeNotifyReq) (*UpgradeNotifyResp, error)
	InsufficientBalanceNotice(context.Context, *InsufficientBalanceNoticeReq) (*InsufficientBalanceNoticeResp, error)
	GetChatRoomOnlineUsers(context.Context, *GetChatRoomOnlineUserReq) (*GetChatRoomOnlineUserResp, error)
	GetSDKOnlineUserStatus(context.Context, *GetSDKOnlineUserStatusReq) (*GetSDKOnlineUserStatusResp, error)
	GetSDKChatRoomUsers(context.Context, *GetSDKChatRoomUsersReq) (*GetSDKChatRoomUsersResp, error)
	// 主播
	FindLiveRoomInfo(context.Context, *common.Empty) (*LiveRoomsDetailsResp, error)
	RoomStartBroadcast(context.Context, *RoomStartBroadcastReq) (*RoomStartBroadcastResp, error)
	RoomManageList(context.Context, *RoomManageListReq) (*RoomOpListResp, error)
	RoomManageChange(context.Context, *RoomManageChangeReq) (*common.Empty, error)
	RoomCloseBroadcast(context.Context, *common.Empty) (*CloseBroadcastResp, error)
	GmCloseBroadcast(context.Context, *RoomIdReq) (*common.Empty, error)
	RoomListManage(context.Context, *common.Empty) (*RoomListManageResp, error)
	RoomAddManage(context.Context, *RoomAddManageReq) (*common.Empty, error)
	RoomCancelManage(context.Context, *RoomCancelManageReq) (*common.Empty, error)
	FamilyListAnchor(context.Context, *common.Empty) (*FamilyListAnchorResp, error)
	FamilyAddAnchor(context.Context, *FamilyAddAnchorReq) (*common.Empty, error)
	FamilyCancelAnchor(context.Context, *FamilyCancelAnchorReq) (*common.Empty, error)
	FamilyModifyAnchorScale(context.Context, *FamilyModifyAnchorScaleReq) (*common.Empty, error)
	FamilyDetail(context.Context, *common.Empty) (*FamilyDetailResp, error)
	FamilyAnchorIncome(context.Context, *FamilyAnchorIncomeReq) (*FamilyAnchorIncomeResp, error)
	RoomSceneHistory(context.Context, *common.Empty) (*RoomSceneHistoryResp, error)
	RoomSceneHistoryIncome(context.Context, *RoomSceneHistoryIncomeReq) (*RoomSceneHistoryIncomeResp, error)
	RoomReceiveGiftList(context.Context, *RoomReceiveGiftListReq) (*RoomReceiveGiftListResp, error)
	RoomReceiveBarrageList(context.Context, *common.Empty) (*RoomReceiveBarrageListResp, error)
	AnchorTodayBarrageInfo(context.Context, *common.Empty) (*AnchorTodayBarrageInfoResp, error)
	LiveMinutePaidIncome(context.Context, *LiveMinutePaidIncomeReq) (*common.Empty, error)
	GmRoomStartBroadcast(context.Context, *GMRoomStartBroadcastReq) (*common.Empty, error)
	AnchorRoomTransferPay(context.Context, *AnchorRoomTransferPayReq) (*common.Empty, error)
	// 用户
	JoinLiveRoom(context.Context, *JoinLiveRoomReq) (*JoinLiveRoomResp, error)
	QuitLiveRoom(context.Context, *RoomIdReq) (*common.Empty, error)
	ListLiveRooms(context.Context, *ListLiveRoomsReq) (*ListLiveRoomsResp, error)
	SearchAnchor(context.Context, *SearchAnchorReq) (*SearchAnchorResp, error)
	LiveRoomsDetails(context.Context, *LiveRoomsDetailsReq) (*LiveRoomsDetailsResp, error)
	Gifts(context.Context, *common.Empty) (*GiftsResp, error)
	RoomManageStatus(context.Context, *RoomManageStatusReq) (*RoomManageStatusResp, error)
	BillsList(context.Context, *BillsListReq) (*BillsListResp, error)
	ListMount(context.Context, *common.Empty) (*MountResp, error)
	Mount(context.Context, *common.Empty) (*MountListResp, error)
	BuyRenewalMount(context.Context, *BuyRenewalMountReq) (*common.Empty, error)
	UesMount(context.Context, *UesMountReq) (*common.Empty, error)
	UnUesMount(context.Context, *UnUesMountReq) (*common.Empty, error)
	ListVibrator(context.Context, *common.Empty) (*ListVibratorResp, error)
	SiteLabel(context.Context, *SiteLabelReq) (*SiteLabelResp, error)
	HomeTopLiveRooms(context.Context, *common.Empty) (*HomeTopLiveRoomsResp, error)
	TopLiveRoom(context.Context, *TopLiveRoomReq) (*TopLiveRoomResp, error)
	FollowLiveRoom(context.Context, *common.Empty) (*FollowLiveRoomResp, error)
	LivePay(context.Context, *LivePayReq) (*common.Empty, error)
	HomeManageList(context.Context, *HomeManageListReq) (*RoomOpListResp, error)
	HomeManageChange(context.Context, *HomeManageChangeReq) (*common.Empty, error)
	mustEmbedUnimplementedLiveServerServer()
}

// UnimplementedLiveServerServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedLiveServerServer struct{}

func (UnimplementedLiveServerServer) Configs(context.Context, *common.Empty) (*ConfigResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Configs not implemented")
}
func (UnimplementedLiveServerServer) AnchorRank(context.Context, *AnchorRankReq) (*AnchorRankResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AnchorRank not implemented")
}
func (UnimplementedLiveServerServer) UserRank(context.Context, *UserRankReq) (*UserRankResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserRank not implemented")
}
func (UnimplementedLiveServerServer) GetRTCServerList(context.Context, *NotificationServerReq) (*NotificationServer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRTCServerList not implemented")
}
func (UnimplementedLiveServerServer) LiveCallBack(context.Context, *LiveCallBackReq) (*common.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LiveCallBack not implemented")
}
func (UnimplementedLiveServerServer) ChatCallBack(context.Context, *ChatCallBackReq) (*ChatCallBackResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChatCallBack not implemented")
}
func (UnimplementedLiveServerServer) CreateChatRooms(context.Context, *CreateChatRoomReq) (*CreateChatRoomResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateChatRooms not implemented")
}
func (UnimplementedLiveServerServer) CreateUser(context.Context, *CreateUserReq) (*CreateUserResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (UnimplementedLiveServerServer) GetChatRoomInfo(context.Context, *GetChatRoomInfoReq) (*GetChatRoomInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChatRoomInfo not implemented")
}
func (UnimplementedLiveServerServer) JoinRoom(context.Context, *JoinRoomReq) (*JoinRoomResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JoinRoom not implemented")
}
func (UnimplementedLiveServerServer) RobotJoinRoom(context.Context, *RobotJoinRoomReq) (*JoinRoomResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RobotJoinRoom not implemented")
}
func (UnimplementedLiveServerServer) SendGift(context.Context, *SendGiftReq) (*SendGiftResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendGift not implemented")
}
func (UnimplementedLiveServerServer) SendMess(context.Context, *SendMessReq) (*SendMessResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendMess not implemented")
}
func (UnimplementedLiveServerServer) ToggleLike(context.Context, *ToggleLikeReq) (*ToggleLikeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ToggleLike not implemented")
}
func (UnimplementedLiveServerServer) LeaveRoom(context.Context, *LeaveRoomReq) (*LeaveRoomResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LeaveRoom not implemented")
}
func (UnimplementedLiveServerServer) InternalLeaveRoom(context.Context, *LeaveRoomReq) (*LeaveRoomResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InternalLeaveRoom not implemented")
}
func (UnimplementedLiveServerServer) FollowUser(context.Context, *FollowUserReq) (*FollowUserResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FollowUser not implemented")
}
func (UnimplementedLiveServerServer) IncomeNotify(context.Context, *IncomeNotifyReq) (*IncomeNotifyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IncomeNotify not implemented")
}
func (UnimplementedLiveServerServer) SystemNotify(context.Context, *SystemNotifyReq) (*SystemNotifyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SystemNotify not implemented")
}
func (UnimplementedLiveServerServer) UpgradeNotify(context.Context, *UpgradeNotifyReq) (*UpgradeNotifyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpgradeNotify not implemented")
}
func (UnimplementedLiveServerServer) InsufficientBalanceNotice(context.Context, *InsufficientBalanceNoticeReq) (*InsufficientBalanceNoticeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InsufficientBalanceNotice not implemented")
}
func (UnimplementedLiveServerServer) GetChatRoomOnlineUsers(context.Context, *GetChatRoomOnlineUserReq) (*GetChatRoomOnlineUserResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChatRoomOnlineUsers not implemented")
}
func (UnimplementedLiveServerServer) GetSDKOnlineUserStatus(context.Context, *GetSDKOnlineUserStatusReq) (*GetSDKOnlineUserStatusResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSDKOnlineUserStatus not implemented")
}
func (UnimplementedLiveServerServer) GetSDKChatRoomUsers(context.Context, *GetSDKChatRoomUsersReq) (*GetSDKChatRoomUsersResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSDKChatRoomUsers not implemented")
}
func (UnimplementedLiveServerServer) FindLiveRoomInfo(context.Context, *common.Empty) (*LiveRoomsDetailsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindLiveRoomInfo not implemented")
}
func (UnimplementedLiveServerServer) RoomStartBroadcast(context.Context, *RoomStartBroadcastReq) (*RoomStartBroadcastResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RoomStartBroadcast not implemented")
}
func (UnimplementedLiveServerServer) RoomManageList(context.Context, *RoomManageListReq) (*RoomOpListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RoomManageList not implemented")
}
func (UnimplementedLiveServerServer) RoomManageChange(context.Context, *RoomManageChangeReq) (*common.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RoomManageChange not implemented")
}
func (UnimplementedLiveServerServer) RoomCloseBroadcast(context.Context, *common.Empty) (*CloseBroadcastResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RoomCloseBroadcast not implemented")
}
func (UnimplementedLiveServerServer) GmCloseBroadcast(context.Context, *RoomIdReq) (*common.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GmCloseBroadcast not implemented")
}
func (UnimplementedLiveServerServer) RoomListManage(context.Context, *common.Empty) (*RoomListManageResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RoomListManage not implemented")
}
func (UnimplementedLiveServerServer) RoomAddManage(context.Context, *RoomAddManageReq) (*common.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RoomAddManage not implemented")
}
func (UnimplementedLiveServerServer) RoomCancelManage(context.Context, *RoomCancelManageReq) (*common.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RoomCancelManage not implemented")
}
func (UnimplementedLiveServerServer) FamilyListAnchor(context.Context, *common.Empty) (*FamilyListAnchorResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FamilyListAnchor not implemented")
}
func (UnimplementedLiveServerServer) FamilyAddAnchor(context.Context, *FamilyAddAnchorReq) (*common.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FamilyAddAnchor not implemented")
}
func (UnimplementedLiveServerServer) FamilyCancelAnchor(context.Context, *FamilyCancelAnchorReq) (*common.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FamilyCancelAnchor not implemented")
}
func (UnimplementedLiveServerServer) FamilyModifyAnchorScale(context.Context, *FamilyModifyAnchorScaleReq) (*common.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FamilyModifyAnchorScale not implemented")
}
func (UnimplementedLiveServerServer) FamilyDetail(context.Context, *common.Empty) (*FamilyDetailResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FamilyDetail not implemented")
}
func (UnimplementedLiveServerServer) FamilyAnchorIncome(context.Context, *FamilyAnchorIncomeReq) (*FamilyAnchorIncomeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FamilyAnchorIncome not implemented")
}
func (UnimplementedLiveServerServer) RoomSceneHistory(context.Context, *common.Empty) (*RoomSceneHistoryResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RoomSceneHistory not implemented")
}
func (UnimplementedLiveServerServer) RoomSceneHistoryIncome(context.Context, *RoomSceneHistoryIncomeReq) (*RoomSceneHistoryIncomeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RoomSceneHistoryIncome not implemented")
}
func (UnimplementedLiveServerServer) RoomReceiveGiftList(context.Context, *RoomReceiveGiftListReq) (*RoomReceiveGiftListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RoomReceiveGiftList not implemented")
}
func (UnimplementedLiveServerServer) RoomReceiveBarrageList(context.Context, *common.Empty) (*RoomReceiveBarrageListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RoomReceiveBarrageList not implemented")
}
func (UnimplementedLiveServerServer) AnchorTodayBarrageInfo(context.Context, *common.Empty) (*AnchorTodayBarrageInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AnchorTodayBarrageInfo not implemented")
}
func (UnimplementedLiveServerServer) LiveMinutePaidIncome(context.Context, *LiveMinutePaidIncomeReq) (*common.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LiveMinutePaidIncome not implemented")
}
func (UnimplementedLiveServerServer) GmRoomStartBroadcast(context.Context, *GMRoomStartBroadcastReq) (*common.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GmRoomStartBroadcast not implemented")
}
func (UnimplementedLiveServerServer) AnchorRoomTransferPay(context.Context, *AnchorRoomTransferPayReq) (*common.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AnchorRoomTransferPay not implemented")
}
func (UnimplementedLiveServerServer) JoinLiveRoom(context.Context, *JoinLiveRoomReq) (*JoinLiveRoomResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JoinLiveRoom not implemented")
}
func (UnimplementedLiveServerServer) QuitLiveRoom(context.Context, *RoomIdReq) (*common.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QuitLiveRoom not implemented")
}
func (UnimplementedLiveServerServer) ListLiveRooms(context.Context, *ListLiveRoomsReq) (*ListLiveRoomsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListLiveRooms not implemented")
}
func (UnimplementedLiveServerServer) SearchAnchor(context.Context, *SearchAnchorReq) (*SearchAnchorResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchAnchor not implemented")
}
func (UnimplementedLiveServerServer) LiveRoomsDetails(context.Context, *LiveRoomsDetailsReq) (*LiveRoomsDetailsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LiveRoomsDetails not implemented")
}
func (UnimplementedLiveServerServer) Gifts(context.Context, *common.Empty) (*GiftsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Gifts not implemented")
}
func (UnimplementedLiveServerServer) RoomManageStatus(context.Context, *RoomManageStatusReq) (*RoomManageStatusResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RoomManageStatus not implemented")
}
func (UnimplementedLiveServerServer) BillsList(context.Context, *BillsListReq) (*BillsListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BillsList not implemented")
}
func (UnimplementedLiveServerServer) ListMount(context.Context, *common.Empty) (*MountResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMount not implemented")
}
func (UnimplementedLiveServerServer) Mount(context.Context, *common.Empty) (*MountListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Mount not implemented")
}
func (UnimplementedLiveServerServer) BuyRenewalMount(context.Context, *BuyRenewalMountReq) (*common.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BuyRenewalMount not implemented")
}
func (UnimplementedLiveServerServer) UesMount(context.Context, *UesMountReq) (*common.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UesMount not implemented")
}
func (UnimplementedLiveServerServer) UnUesMount(context.Context, *UnUesMountReq) (*common.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnUesMount not implemented")
}
func (UnimplementedLiveServerServer) ListVibrator(context.Context, *common.Empty) (*ListVibratorResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListVibrator not implemented")
}
func (UnimplementedLiveServerServer) SiteLabel(context.Context, *SiteLabelReq) (*SiteLabelResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SiteLabel not implemented")
}
func (UnimplementedLiveServerServer) HomeTopLiveRooms(context.Context, *common.Empty) (*HomeTopLiveRoomsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HomeTopLiveRooms not implemented")
}
func (UnimplementedLiveServerServer) TopLiveRoom(context.Context, *TopLiveRoomReq) (*TopLiveRoomResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TopLiveRoom not implemented")
}
func (UnimplementedLiveServerServer) FollowLiveRoom(context.Context, *common.Empty) (*FollowLiveRoomResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FollowLiveRoom not implemented")
}
func (UnimplementedLiveServerServer) LivePay(context.Context, *LivePayReq) (*common.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LivePay not implemented")
}
func (UnimplementedLiveServerServer) HomeManageList(context.Context, *HomeManageListReq) (*RoomOpListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HomeManageList not implemented")
}
func (UnimplementedLiveServerServer) HomeManageChange(context.Context, *HomeManageChangeReq) (*common.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HomeManageChange not implemented")
}
func (UnimplementedLiveServerServer) mustEmbedUnimplementedLiveServerServer() {}
func (UnimplementedLiveServerServer) testEmbeddedByValue()                    {}

// UnsafeLiveServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LiveServerServer will
// result in compilation errors.
type UnsafeLiveServerServer interface {
	mustEmbedUnimplementedLiveServerServer()
}

func RegisterLiveServerServer(s grpc.ServiceRegistrar, srv LiveServerServer) {
	// If the following call pancis, it indicates UnimplementedLiveServerServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&LiveServer_ServiceDesc, srv)
}

func _LiveServer_Configs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiveServerServer).Configs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LiveServer_Configs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiveServerServer).Configs(ctx, req.(*common.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _LiveServer_AnchorRank_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AnchorRankReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiveServerServer).AnchorRank(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LiveServer_AnchorRank_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiveServerServer).AnchorRank(ctx, req.(*AnchorRankReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _LiveServer_UserRank_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRankReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiveServerServer).UserRank(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LiveServer_UserRank_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiveServerServer).UserRank(ctx, req.(*UserRankReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _LiveServer_GetRTCServerList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NotificationServerReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiveServerServer).GetRTCServerList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LiveServer_GetRTCServerList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiveServerServer).GetRTCServerList(ctx, req.(*NotificationServerReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _LiveServer_LiveCallBack_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LiveCallBackReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiveServerServer).LiveCallBack(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LiveServer_LiveCallBack_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiveServerServer).LiveCallBack(ctx, req.(*LiveCallBackReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _LiveServer_ChatCallBack_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChatCallBackReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiveServerServer).ChatCallBack(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LiveServer_ChatCallBack_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiveServerServer).ChatCallBack(ctx, req.(*ChatCallBackReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _LiveServer_CreateChatRooms_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateChatRoomReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiveServerServer).CreateChatRooms(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LiveServer_CreateChatRooms_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiveServerServer).CreateChatRooms(ctx, req.(*CreateChatRoomReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _LiveServer_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiveServerServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LiveServer_CreateUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiveServerServer).CreateUser(ctx, req.(*CreateUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _LiveServer_GetChatRoomInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChatRoomInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiveServerServer).GetChatRoomInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LiveServer_GetChatRoomInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiveServerServer).GetChatRoomInfo(ctx, req.(*GetChatRoomInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _LiveServer_JoinRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JoinRoomReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiveServerServer).JoinRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LiveServer_JoinRoom_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiveServerServer).JoinRoom(ctx, req.(*JoinRoomReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _LiveServer_RobotJoinRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RobotJoinRoomReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiveServerServer).RobotJoinRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LiveServer_RobotJoinRoom_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiveServerServer).RobotJoinRoom(ctx, req.(*RobotJoinRoomReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _LiveServer_SendGift_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendGiftReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiveServerServer).SendGift(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LiveServer_SendGift_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiveServerServer).SendGift(ctx, req.(*SendGiftReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _LiveServer_SendMess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendMessReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiveServerServer).SendMess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LiveServer_SendMess_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiveServerServer).SendMess(ctx, req.(*SendMessReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _LiveServer_ToggleLike_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ToggleLikeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiveServerServer).ToggleLike(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LiveServer_ToggleLike_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiveServerServer).ToggleLike(ctx, req.(*ToggleLikeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _LiveServer_LeaveRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LeaveRoomReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiveServerServer).LeaveRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LiveServer_LeaveRoom_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiveServerServer).LeaveRoom(ctx, req.(*LeaveRoomReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _LiveServer_InternalLeaveRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LeaveRoomReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiveServerServer).InternalLeaveRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LiveServer_InternalLeaveRoom_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiveServerServer).InternalLeaveRoom(ctx, req.(*LeaveRoomReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _LiveServer_FollowUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FollowUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiveServerServer).FollowUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LiveServer_FollowUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiveServerServer).FollowUser(ctx, req.(*FollowUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _LiveServer_IncomeNotify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IncomeNotifyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiveServerServer).IncomeNotify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LiveServer_IncomeNotify_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiveServerServer).IncomeNotify(ctx, req.(*IncomeNotifyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _LiveServer_SystemNotify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SystemNotifyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiveServerServer).SystemNotify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LiveServer_SystemNotify_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiveServerServer).SystemNotify(ctx, req.(*SystemNotifyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _LiveServer_UpgradeNotify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpgradeNotifyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiveServerServer).UpgradeNotify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LiveServer_UpgradeNotify_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiveServerServer).UpgradeNotify(ctx, req.(*UpgradeNotifyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _LiveServer_InsufficientBalanceNotice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InsufficientBalanceNoticeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiveServerServer).InsufficientBalanceNotice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LiveServer_InsufficientBalanceNotice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiveServerServer).InsufficientBalanceNotice(ctx, req.(*InsufficientBalanceNoticeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _LiveServer_GetChatRoomOnlineUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChatRoomOnlineUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiveServerServer).GetChatRoomOnlineUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LiveServer_GetChatRoomOnlineUsers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiveServerServer).GetChatRoomOnlineUsers(ctx, req.(*GetChatRoomOnlineUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _LiveServer_GetSDKOnlineUserStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSDKOnlineUserStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiveServerServer).GetSDKOnlineUserStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LiveServer_GetSDKOnlineUserStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiveServerServer).GetSDKOnlineUserStatus(ctx, req.(*GetSDKOnlineUserStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _LiveServer_GetSDKChatRoomUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSDKChatRoomUsersReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiveServerServer).GetSDKChatRoomUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LiveServer_GetSDKChatRoomUsers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiveServerServer).GetSDKChatRoomUsers(ctx, req.(*GetSDKChatRoomUsersReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _LiveServer_FindLiveRoomInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiveServerServer).FindLiveRoomInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LiveServer_FindLiveRoomInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiveServerServer).FindLiveRoomInfo(ctx, req.(*common.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _LiveServer_RoomStartBroadcast_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoomStartBroadcastReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiveServerServer).RoomStartBroadcast(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LiveServer_RoomStartBroadcast_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiveServerServer).RoomStartBroadcast(ctx, req.(*RoomStartBroadcastReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _LiveServer_RoomManageList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoomManageListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiveServerServer).RoomManageList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LiveServer_RoomManageList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiveServerServer).RoomManageList(ctx, req.(*RoomManageListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _LiveServer_RoomManageChange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoomManageChangeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiveServerServer).RoomManageChange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LiveServer_RoomManageChange_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiveServerServer).RoomManageChange(ctx, req.(*RoomManageChangeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _LiveServer_RoomCloseBroadcast_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiveServerServer).RoomCloseBroadcast(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LiveServer_RoomCloseBroadcast_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiveServerServer).RoomCloseBroadcast(ctx, req.(*common.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _LiveServer_GmCloseBroadcast_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoomIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiveServerServer).GmCloseBroadcast(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LiveServer_GmCloseBroadcast_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiveServerServer).GmCloseBroadcast(ctx, req.(*RoomIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _LiveServer_RoomListManage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiveServerServer).RoomListManage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LiveServer_RoomListManage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiveServerServer).RoomListManage(ctx, req.(*common.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _LiveServer_RoomAddManage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoomAddManageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiveServerServer).RoomAddManage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LiveServer_RoomAddManage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiveServerServer).RoomAddManage(ctx, req.(*RoomAddManageReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _LiveServer_RoomCancelManage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoomCancelManageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiveServerServer).RoomCancelManage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LiveServer_RoomCancelManage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiveServerServer).RoomCancelManage(ctx, req.(*RoomCancelManageReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _LiveServer_FamilyListAnchor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiveServerServer).FamilyListAnchor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LiveServer_FamilyListAnchor_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiveServerServer).FamilyListAnchor(ctx, req.(*common.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _LiveServer_FamilyAddAnchor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FamilyAddAnchorReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiveServerServer).FamilyAddAnchor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LiveServer_FamilyAddAnchor_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiveServerServer).FamilyAddAnchor(ctx, req.(*FamilyAddAnchorReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _LiveServer_FamilyCancelAnchor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FamilyCancelAnchorReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiveServerServer).FamilyCancelAnchor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LiveServer_FamilyCancelAnchor_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiveServerServer).FamilyCancelAnchor(ctx, req.(*FamilyCancelAnchorReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _LiveServer_FamilyModifyAnchorScale_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FamilyModifyAnchorScaleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiveServerServer).FamilyModifyAnchorScale(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LiveServer_FamilyModifyAnchorScale_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiveServerServer).FamilyModifyAnchorScale(ctx, req.(*FamilyModifyAnchorScaleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _LiveServer_FamilyDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiveServerServer).FamilyDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LiveServer_FamilyDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiveServerServer).FamilyDetail(ctx, req.(*common.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _LiveServer_FamilyAnchorIncome_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FamilyAnchorIncomeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiveServerServer).FamilyAnchorIncome(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LiveServer_FamilyAnchorIncome_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiveServerServer).FamilyAnchorIncome(ctx, req.(*FamilyAnchorIncomeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _LiveServer_RoomSceneHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiveServerServer).RoomSceneHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LiveServer_RoomSceneHistory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiveServerServer).RoomSceneHistory(ctx, req.(*common.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _LiveServer_RoomSceneHistoryIncome_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoomSceneHistoryIncomeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiveServerServer).RoomSceneHistoryIncome(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LiveServer_RoomSceneHistoryIncome_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiveServerServer).RoomSceneHistoryIncome(ctx, req.(*RoomSceneHistoryIncomeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _LiveServer_RoomReceiveGiftList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoomReceiveGiftListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiveServerServer).RoomReceiveGiftList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LiveServer_RoomReceiveGiftList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiveServerServer).RoomReceiveGiftList(ctx, req.(*RoomReceiveGiftListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _LiveServer_RoomReceiveBarrageList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiveServerServer).RoomReceiveBarrageList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LiveServer_RoomReceiveBarrageList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiveServerServer).RoomReceiveBarrageList(ctx, req.(*common.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _LiveServer_AnchorTodayBarrageInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiveServerServer).AnchorTodayBarrageInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LiveServer_AnchorTodayBarrageInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiveServerServer).AnchorTodayBarrageInfo(ctx, req.(*common.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _LiveServer_LiveMinutePaidIncome_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LiveMinutePaidIncomeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiveServerServer).LiveMinutePaidIncome(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LiveServer_LiveMinutePaidIncome_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiveServerServer).LiveMinutePaidIncome(ctx, req.(*LiveMinutePaidIncomeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _LiveServer_GmRoomStartBroadcast_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GMRoomStartBroadcastReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiveServerServer).GmRoomStartBroadcast(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LiveServer_GmRoomStartBroadcast_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiveServerServer).GmRoomStartBroadcast(ctx, req.(*GMRoomStartBroadcastReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _LiveServer_AnchorRoomTransferPay_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AnchorRoomTransferPayReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiveServerServer).AnchorRoomTransferPay(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LiveServer_AnchorRoomTransferPay_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiveServerServer).AnchorRoomTransferPay(ctx, req.(*AnchorRoomTransferPayReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _LiveServer_JoinLiveRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JoinLiveRoomReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiveServerServer).JoinLiveRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LiveServer_JoinLiveRoom_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiveServerServer).JoinLiveRoom(ctx, req.(*JoinLiveRoomReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _LiveServer_QuitLiveRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoomIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiveServerServer).QuitLiveRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LiveServer_QuitLiveRoom_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiveServerServer).QuitLiveRoom(ctx, req.(*RoomIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _LiveServer_ListLiveRooms_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListLiveRoomsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiveServerServer).ListLiveRooms(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LiveServer_ListLiveRooms_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiveServerServer).ListLiveRooms(ctx, req.(*ListLiveRoomsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _LiveServer_SearchAnchor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchAnchorReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiveServerServer).SearchAnchor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LiveServer_SearchAnchor_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiveServerServer).SearchAnchor(ctx, req.(*SearchAnchorReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _LiveServer_LiveRoomsDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LiveRoomsDetailsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiveServerServer).LiveRoomsDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LiveServer_LiveRoomsDetails_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiveServerServer).LiveRoomsDetails(ctx, req.(*LiveRoomsDetailsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _LiveServer_Gifts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiveServerServer).Gifts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LiveServer_Gifts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiveServerServer).Gifts(ctx, req.(*common.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _LiveServer_RoomManageStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoomManageStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiveServerServer).RoomManageStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LiveServer_RoomManageStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiveServerServer).RoomManageStatus(ctx, req.(*RoomManageStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _LiveServer_BillsList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BillsListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiveServerServer).BillsList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LiveServer_BillsList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiveServerServer).BillsList(ctx, req.(*BillsListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _LiveServer_ListMount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiveServerServer).ListMount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LiveServer_ListMount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiveServerServer).ListMount(ctx, req.(*common.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _LiveServer_Mount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiveServerServer).Mount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LiveServer_Mount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiveServerServer).Mount(ctx, req.(*common.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _LiveServer_BuyRenewalMount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BuyRenewalMountReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiveServerServer).BuyRenewalMount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LiveServer_BuyRenewalMount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiveServerServer).BuyRenewalMount(ctx, req.(*BuyRenewalMountReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _LiveServer_UesMount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UesMountReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiveServerServer).UesMount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LiveServer_UesMount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiveServerServer).UesMount(ctx, req.(*UesMountReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _LiveServer_UnUesMount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnUesMountReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiveServerServer).UnUesMount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LiveServer_UnUesMount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiveServerServer).UnUesMount(ctx, req.(*UnUesMountReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _LiveServer_ListVibrator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiveServerServer).ListVibrator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LiveServer_ListVibrator_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiveServerServer).ListVibrator(ctx, req.(*common.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _LiveServer_SiteLabel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SiteLabelReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiveServerServer).SiteLabel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LiveServer_SiteLabel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiveServerServer).SiteLabel(ctx, req.(*SiteLabelReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _LiveServer_HomeTopLiveRooms_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiveServerServer).HomeTopLiveRooms(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LiveServer_HomeTopLiveRooms_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiveServerServer).HomeTopLiveRooms(ctx, req.(*common.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _LiveServer_TopLiveRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TopLiveRoomReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiveServerServer).TopLiveRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LiveServer_TopLiveRoom_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiveServerServer).TopLiveRoom(ctx, req.(*TopLiveRoomReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _LiveServer_FollowLiveRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiveServerServer).FollowLiveRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LiveServer_FollowLiveRoom_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiveServerServer).FollowLiveRoom(ctx, req.(*common.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _LiveServer_LivePay_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LivePayReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiveServerServer).LivePay(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LiveServer_LivePay_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiveServerServer).LivePay(ctx, req.(*LivePayReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _LiveServer_HomeManageList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HomeManageListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiveServerServer).HomeManageList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LiveServer_HomeManageList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiveServerServer).HomeManageList(ctx, req.(*HomeManageListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _LiveServer_HomeManageChange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HomeManageChangeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiveServerServer).HomeManageChange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LiveServer_HomeManageChange_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiveServerServer).HomeManageChange(ctx, req.(*HomeManageChangeReq))
	}
	return interceptor(ctx, in, info, handler)
}

// LiveServer_ServiceDesc is the grpc.ServiceDesc for LiveServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LiveServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.LiveServer",
	HandlerType: (*LiveServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Configs",
			Handler:    _LiveServer_Configs_Handler,
		},
		{
			MethodName: "AnchorRank",
			Handler:    _LiveServer_AnchorRank_Handler,
		},
		{
			MethodName: "UserRank",
			Handler:    _LiveServer_UserRank_Handler,
		},
		{
			MethodName: "GetRTCServerList",
			Handler:    _LiveServer_GetRTCServerList_Handler,
		},
		{
			MethodName: "LiveCallBack",
			Handler:    _LiveServer_LiveCallBack_Handler,
		},
		{
			MethodName: "ChatCallBack",
			Handler:    _LiveServer_ChatCallBack_Handler,
		},
		{
			MethodName: "CreateChatRooms",
			Handler:    _LiveServer_CreateChatRooms_Handler,
		},
		{
			MethodName: "CreateUser",
			Handler:    _LiveServer_CreateUser_Handler,
		},
		{
			MethodName: "GetChatRoomInfo",
			Handler:    _LiveServer_GetChatRoomInfo_Handler,
		},
		{
			MethodName: "JoinRoom",
			Handler:    _LiveServer_JoinRoom_Handler,
		},
		{
			MethodName: "RobotJoinRoom",
			Handler:    _LiveServer_RobotJoinRoom_Handler,
		},
		{
			MethodName: "SendGift",
			Handler:    _LiveServer_SendGift_Handler,
		},
		{
			MethodName: "SendMess",
			Handler:    _LiveServer_SendMess_Handler,
		},
		{
			MethodName: "ToggleLike",
			Handler:    _LiveServer_ToggleLike_Handler,
		},
		{
			MethodName: "LeaveRoom",
			Handler:    _LiveServer_LeaveRoom_Handler,
		},
		{
			MethodName: "InternalLeaveRoom",
			Handler:    _LiveServer_InternalLeaveRoom_Handler,
		},
		{
			MethodName: "FollowUser",
			Handler:    _LiveServer_FollowUser_Handler,
		},
		{
			MethodName: "IncomeNotify",
			Handler:    _LiveServer_IncomeNotify_Handler,
		},
		{
			MethodName: "SystemNotify",
			Handler:    _LiveServer_SystemNotify_Handler,
		},
		{
			MethodName: "UpgradeNotify",
			Handler:    _LiveServer_UpgradeNotify_Handler,
		},
		{
			MethodName: "InsufficientBalanceNotice",
			Handler:    _LiveServer_InsufficientBalanceNotice_Handler,
		},
		{
			MethodName: "GetChatRoomOnlineUsers",
			Handler:    _LiveServer_GetChatRoomOnlineUsers_Handler,
		},
		{
			MethodName: "GetSDKOnlineUserStatus",
			Handler:    _LiveServer_GetSDKOnlineUserStatus_Handler,
		},
		{
			MethodName: "GetSDKChatRoomUsers",
			Handler:    _LiveServer_GetSDKChatRoomUsers_Handler,
		},
		{
			MethodName: "FindLiveRoomInfo",
			Handler:    _LiveServer_FindLiveRoomInfo_Handler,
		},
		{
			MethodName: "RoomStartBroadcast",
			Handler:    _LiveServer_RoomStartBroadcast_Handler,
		},
		{
			MethodName: "RoomManageList",
			Handler:    _LiveServer_RoomManageList_Handler,
		},
		{
			MethodName: "RoomManageChange",
			Handler:    _LiveServer_RoomManageChange_Handler,
		},
		{
			MethodName: "RoomCloseBroadcast",
			Handler:    _LiveServer_RoomCloseBroadcast_Handler,
		},
		{
			MethodName: "GmCloseBroadcast",
			Handler:    _LiveServer_GmCloseBroadcast_Handler,
		},
		{
			MethodName: "RoomListManage",
			Handler:    _LiveServer_RoomListManage_Handler,
		},
		{
			MethodName: "RoomAddManage",
			Handler:    _LiveServer_RoomAddManage_Handler,
		},
		{
			MethodName: "RoomCancelManage",
			Handler:    _LiveServer_RoomCancelManage_Handler,
		},
		{
			MethodName: "FamilyListAnchor",
			Handler:    _LiveServer_FamilyListAnchor_Handler,
		},
		{
			MethodName: "FamilyAddAnchor",
			Handler:    _LiveServer_FamilyAddAnchor_Handler,
		},
		{
			MethodName: "FamilyCancelAnchor",
			Handler:    _LiveServer_FamilyCancelAnchor_Handler,
		},
		{
			MethodName: "FamilyModifyAnchorScale",
			Handler:    _LiveServer_FamilyModifyAnchorScale_Handler,
		},
		{
			MethodName: "FamilyDetail",
			Handler:    _LiveServer_FamilyDetail_Handler,
		},
		{
			MethodName: "FamilyAnchorIncome",
			Handler:    _LiveServer_FamilyAnchorIncome_Handler,
		},
		{
			MethodName: "RoomSceneHistory",
			Handler:    _LiveServer_RoomSceneHistory_Handler,
		},
		{
			MethodName: "RoomSceneHistoryIncome",
			Handler:    _LiveServer_RoomSceneHistoryIncome_Handler,
		},
		{
			MethodName: "RoomReceiveGiftList",
			Handler:    _LiveServer_RoomReceiveGiftList_Handler,
		},
		{
			MethodName: "RoomReceiveBarrageList",
			Handler:    _LiveServer_RoomReceiveBarrageList_Handler,
		},
		{
			MethodName: "AnchorTodayBarrageInfo",
			Handler:    _LiveServer_AnchorTodayBarrageInfo_Handler,
		},
		{
			MethodName: "LiveMinutePaidIncome",
			Handler:    _LiveServer_LiveMinutePaidIncome_Handler,
		},
		{
			MethodName: "GmRoomStartBroadcast",
			Handler:    _LiveServer_GmRoomStartBroadcast_Handler,
		},
		{
			MethodName: "AnchorRoomTransferPay",
			Handler:    _LiveServer_AnchorRoomTransferPay_Handler,
		},
		{
			MethodName: "JoinLiveRoom",
			Handler:    _LiveServer_JoinLiveRoom_Handler,
		},
		{
			MethodName: "QuitLiveRoom",
			Handler:    _LiveServer_QuitLiveRoom_Handler,
		},
		{
			MethodName: "ListLiveRooms",
			Handler:    _LiveServer_ListLiveRooms_Handler,
		},
		{
			MethodName: "SearchAnchor",
			Handler:    _LiveServer_SearchAnchor_Handler,
		},
		{
			MethodName: "LiveRoomsDetails",
			Handler:    _LiveServer_LiveRoomsDetails_Handler,
		},
		{
			MethodName: "Gifts",
			Handler:    _LiveServer_Gifts_Handler,
		},
		{
			MethodName: "RoomManageStatus",
			Handler:    _LiveServer_RoomManageStatus_Handler,
		},
		{
			MethodName: "BillsList",
			Handler:    _LiveServer_BillsList_Handler,
		},
		{
			MethodName: "ListMount",
			Handler:    _LiveServer_ListMount_Handler,
		},
		{
			MethodName: "Mount",
			Handler:    _LiveServer_Mount_Handler,
		},
		{
			MethodName: "BuyRenewalMount",
			Handler:    _LiveServer_BuyRenewalMount_Handler,
		},
		{
			MethodName: "UesMount",
			Handler:    _LiveServer_UesMount_Handler,
		},
		{
			MethodName: "UnUesMount",
			Handler:    _LiveServer_UnUesMount_Handler,
		},
		{
			MethodName: "ListVibrator",
			Handler:    _LiveServer_ListVibrator_Handler,
		},
		{
			MethodName: "SiteLabel",
			Handler:    _LiveServer_SiteLabel_Handler,
		},
		{
			MethodName: "HomeTopLiveRooms",
			Handler:    _LiveServer_HomeTopLiveRooms_Handler,
		},
		{
			MethodName: "TopLiveRoom",
			Handler:    _LiveServer_TopLiveRoom_Handler,
		},
		{
			MethodName: "FollowLiveRoom",
			Handler:    _LiveServer_FollowLiveRoom_Handler,
		},
		{
			MethodName: "LivePay",
			Handler:    _LiveServer_LivePay_Handler,
		},
		{
			MethodName: "HomeManageList",
			Handler:    _LiveServer_HomeManageList_Handler,
		},
		{
			MethodName: "HomeManageChange",
			Handler:    _LiveServer_HomeManageChange_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "live/live.proto",
}
