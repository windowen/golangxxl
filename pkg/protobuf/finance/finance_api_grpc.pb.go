// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.19.4
// source: finance/finance_api.proto

package finance

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	common "liveJob/pkg/protobuf/common"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	FinanceServer_PayIn_FullMethodName                    = "/proto.FinanceServer/PayIn"
	FinanceServer_PayInQuery_FullMethodName               = "/proto.FinanceServer/PayInQuery"
	FinanceServer_PayOut_FullMethodName                   = "/proto.FinanceServer/PayOut"
	FinanceServer_PayOutQuery_FullMethodName              = "/proto.FinanceServer/PayOutQuery"
	FinanceServer_PayNotification_FullMethodName          = "/proto.FinanceServer/PayNotification"
	FinanceServer_PayOutNotify_FullMethodName             = "/proto.FinanceServer/PayOutNotify"
	FinanceServer_Balance_FullMethodName                  = "/proto.FinanceServer/Balance"
	FinanceServer_WithdrawApply_FullMethodName            = "/proto.FinanceServer/WithdrawApply"
	FinanceServer_PlatPay_FullMethodName                  = "/proto.FinanceServer/PlatPay"
	FinanceServer_PlatRejectPay_FullMethodName            = "/proto.FinanceServer/PlatRejectPay"
	FinanceServer_PlatFreezeLiveRoomDetail_FullMethodName = "/proto.FinanceServer/PlatFreezeLiveRoomDetail"
	FinanceServer_GetLoginRechargeCenter_FullMethodName   = "/proto.FinanceServer/GetLoginRechargeCenter"
	FinanceServer_GetUnLoginRechargeCenter_FullMethodName = "/proto.FinanceServer/GetUnLoginRechargeCenter"
	FinanceServer_GetZoneByPayTypeCode_FullMethodName     = "/proto.FinanceServer/GetZoneByPayTypeCode"
	FinanceServer_GetPayRandomCode_FullMethodName         = "/proto.FinanceServer/GetPayRandomCode"
	FinanceServer_GetDiamond_FullMethodName               = "/proto.FinanceServer/GetDiamond"
	FinanceServer_DiamondExchange_FullMethodName          = "/proto.FinanceServer/DiamondExchange"
	FinanceServer_RechargeRecordList_FullMethodName       = "/proto.FinanceServer/RechargeRecordList"
	FinanceServer_WithdrawRecordList_FullMethodName       = "/proto.FinanceServer/WithdrawRecordList"
	FinanceServer_CheckWithdrawDetail_FullMethodName      = "/proto.FinanceServer/CheckWithdrawDetail"
	FinanceServer_MyAsset_FullMethodName                  = "/proto.FinanceServer/MyAsset"
	FinanceServer_MyWallet_FullMethodName                 = "/proto.FinanceServer/MyWallet"
	FinanceServer_GetIncomeDetailList_FullMethodName      = "/proto.FinanceServer/GetIncomeDetailList"
	FinanceServer_CheckIncomeDetail_FullMethodName        = "/proto.FinanceServer/CheckIncomeDetail"
	FinanceServer_WithdrawBind_FullMethodName             = "/proto.FinanceServer/WithdrawBind"
	FinanceServer_GetWithdrawConfigList_FullMethodName    = "/proto.FinanceServer/GetWithdrawConfigList"
	FinanceServer_GetWithdrawTypeList_FullMethodName      = "/proto.FinanceServer/GetWithdrawTypeList"
	FinanceServer_GetStreamerIncome_FullMethodName        = "/proto.FinanceServer/GetStreamerIncome"
	FinanceServer_GetStreamerSettle_FullMethodName        = "/proto.FinanceServer/GetStreamerSettle"
	FinanceServer_PaymentDiamond_FullMethodName           = "/proto.FinanceServer/PaymentDiamond"
	FinanceServer_SystemDiamond_FullMethodName            = "/proto.FinanceServer/SystemDiamond"
)

// FinanceServerClient is the client API for FinanceServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FinanceServerClient interface {
	PayIn(ctx context.Context, in *PayInReq, opts ...grpc.CallOption) (*PayInResp, error)
	PayInQuery(ctx context.Context, in *PayInQueryReq, opts ...grpc.CallOption) (*PayInQueryResp, error)
	PayOut(ctx context.Context, in *PayOutReq, opts ...grpc.CallOption) (*PayOutResp, error)
	PayOutQuery(ctx context.Context, in *PayOutQueryReq, opts ...grpc.CallOption) (*PayOutQueryResp, error)
	PayNotification(ctx context.Context, in *PayNotificationReq, opts ...grpc.CallOption) (*PayNotificationResp, error)
	PayOutNotify(ctx context.Context, in *PayOutNotifyReq, opts ...grpc.CallOption) (*PayOutNotifyResp, error)
	Balance(ctx context.Context, in *BalanceReq, opts ...grpc.CallOption) (*BalanceResp, error)
	WithdrawApply(ctx context.Context, in *WithdrawReq, opts ...grpc.CallOption) (*WithdrawResp, error)
	PlatPay(ctx context.Context, in *PlatPayReq, opts ...grpc.CallOption) (*PlatPayResp, error)
	PlatRejectPay(ctx context.Context, in *PlatRejectPayReq, opts ...grpc.CallOption) (*PlatRejectPayResp, error)
	PlatFreezeLiveRoomDetail(ctx context.Context, in *PlatFreezeLiveRoomDetailReq, opts ...grpc.CallOption) (*PlatFreezeLiveRoomDetailResp, error)
	// 充值中心功能
	GetLoginRechargeCenter(ctx context.Context, in *common.Empty, opts ...grpc.CallOption) (*GetRechargeCenterResp, error)
	GetUnLoginRechargeCenter(ctx context.Context, in *common.Empty, opts ...grpc.CallOption) (*GetRechargeCenterResp, error)
	GetZoneByPayTypeCode(ctx context.Context, in *GetZoneByPayTypeCodeReq, opts ...grpc.CallOption) (*GetZoneByPayTypeCodeResp, error)
	GetPayRandomCode(ctx context.Context, in *common.Empty, opts ...grpc.CallOption) (*GetPayRandomCodeResp, error)
	GetDiamond(ctx context.Context, in *common.Empty, opts ...grpc.CallOption) (*GetDiamondResp, error)
	DiamondExchange(ctx context.Context, in *DiamondExchangeReq, opts ...grpc.CallOption) (*common.Empty, error)
	RechargeRecordList(ctx context.Context, in *RechargeRecordListReq, opts ...grpc.CallOption) (*RechargeRecordListResp, error)
	WithdrawRecordList(ctx context.Context, in *WithdrawRecordListReq, opts ...grpc.CallOption) (*WithdrawRecordListResp, error)
	CheckWithdrawDetail(ctx context.Context, in *CheckWithdrawDetailReq, opts ...grpc.CallOption) (*CheckWithdrawDetailResp, error)
	MyAsset(ctx context.Context, in *common.Empty, opts ...grpc.CallOption) (*MyAssetResp, error)
	MyWallet(ctx context.Context, in *MyWalletReq, opts ...grpc.CallOption) (*MyWalletResp, error)
	// 我的
	GetIncomeDetailList(ctx context.Context, in *GetIncomeDetailListReq, opts ...grpc.CallOption) (*GetIncomeDetailListResp, error)
	CheckIncomeDetail(ctx context.Context, in *CheckIncomeDetailReq, opts ...grpc.CallOption) (*CheckIncomeDetailResp, error)
	WithdrawBind(ctx context.Context, in *WithdrawBindReq, opts ...grpc.CallOption) (*WithdrawBindResp, error)
	GetWithdrawConfigList(ctx context.Context, in *common.Empty, opts ...grpc.CallOption) (*WithdrawListResp, error)
	GetWithdrawTypeList(ctx context.Context, in *WithdrawTypeListReq, opts ...grpc.CallOption) (*WithdrawTypeListResp, error)
	// 主播直播间
	GetStreamerIncome(ctx context.Context, in *StreamerIncomeReq, opts ...grpc.CallOption) (*StreamerIncomeResp, error)
	GetStreamerSettle(ctx context.Context, in *StreamerSettleReq, opts ...grpc.CallOption) (*StreamerSettleResp, error)
	// 内部服务器钻石操作接口
	PaymentDiamond(ctx context.Context, in *PayDiamondReq, opts ...grpc.CallOption) (*PayDiamondResp, error)
	SystemDiamond(ctx context.Context, in *DiamondReq, opts ...grpc.CallOption) (*DiamondResp, error)
}

type financeServerClient struct {
	cc grpc.ClientConnInterface
}

func NewFinanceServerClient(cc grpc.ClientConnInterface) FinanceServerClient {
	return &financeServerClient{cc}
}

func (c *financeServerClient) PayIn(ctx context.Context, in *PayInReq, opts ...grpc.CallOption) (*PayInResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PayInResp)
	err := c.cc.Invoke(ctx, FinanceServer_PayIn_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *financeServerClient) PayInQuery(ctx context.Context, in *PayInQueryReq, opts ...grpc.CallOption) (*PayInQueryResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PayInQueryResp)
	err := c.cc.Invoke(ctx, FinanceServer_PayInQuery_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *financeServerClient) PayOut(ctx context.Context, in *PayOutReq, opts ...grpc.CallOption) (*PayOutResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PayOutResp)
	err := c.cc.Invoke(ctx, FinanceServer_PayOut_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *financeServerClient) PayOutQuery(ctx context.Context, in *PayOutQueryReq, opts ...grpc.CallOption) (*PayOutQueryResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PayOutQueryResp)
	err := c.cc.Invoke(ctx, FinanceServer_PayOutQuery_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *financeServerClient) PayNotification(ctx context.Context, in *PayNotificationReq, opts ...grpc.CallOption) (*PayNotificationResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PayNotificationResp)
	err := c.cc.Invoke(ctx, FinanceServer_PayNotification_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *financeServerClient) PayOutNotify(ctx context.Context, in *PayOutNotifyReq, opts ...grpc.CallOption) (*PayOutNotifyResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PayOutNotifyResp)
	err := c.cc.Invoke(ctx, FinanceServer_PayOutNotify_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *financeServerClient) Balance(ctx context.Context, in *BalanceReq, opts ...grpc.CallOption) (*BalanceResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BalanceResp)
	err := c.cc.Invoke(ctx, FinanceServer_Balance_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *financeServerClient) WithdrawApply(ctx context.Context, in *WithdrawReq, opts ...grpc.CallOption) (*WithdrawResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WithdrawResp)
	err := c.cc.Invoke(ctx, FinanceServer_WithdrawApply_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *financeServerClient) PlatPay(ctx context.Context, in *PlatPayReq, opts ...grpc.CallOption) (*PlatPayResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PlatPayResp)
	err := c.cc.Invoke(ctx, FinanceServer_PlatPay_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *financeServerClient) PlatRejectPay(ctx context.Context, in *PlatRejectPayReq, opts ...grpc.CallOption) (*PlatRejectPayResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PlatRejectPayResp)
	err := c.cc.Invoke(ctx, FinanceServer_PlatRejectPay_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *financeServerClient) PlatFreezeLiveRoomDetail(ctx context.Context, in *PlatFreezeLiveRoomDetailReq, opts ...grpc.CallOption) (*PlatFreezeLiveRoomDetailResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PlatFreezeLiveRoomDetailResp)
	err := c.cc.Invoke(ctx, FinanceServer_PlatFreezeLiveRoomDetail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *financeServerClient) GetLoginRechargeCenter(ctx context.Context, in *common.Empty, opts ...grpc.CallOption) (*GetRechargeCenterResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetRechargeCenterResp)
	err := c.cc.Invoke(ctx, FinanceServer_GetLoginRechargeCenter_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *financeServerClient) GetUnLoginRechargeCenter(ctx context.Context, in *common.Empty, opts ...grpc.CallOption) (*GetRechargeCenterResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetRechargeCenterResp)
	err := c.cc.Invoke(ctx, FinanceServer_GetUnLoginRechargeCenter_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *financeServerClient) GetZoneByPayTypeCode(ctx context.Context, in *GetZoneByPayTypeCodeReq, opts ...grpc.CallOption) (*GetZoneByPayTypeCodeResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetZoneByPayTypeCodeResp)
	err := c.cc.Invoke(ctx, FinanceServer_GetZoneByPayTypeCode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *financeServerClient) GetPayRandomCode(ctx context.Context, in *common.Empty, opts ...grpc.CallOption) (*GetPayRandomCodeResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPayRandomCodeResp)
	err := c.cc.Invoke(ctx, FinanceServer_GetPayRandomCode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *financeServerClient) GetDiamond(ctx context.Context, in *common.Empty, opts ...grpc.CallOption) (*GetDiamondResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetDiamondResp)
	err := c.cc.Invoke(ctx, FinanceServer_GetDiamond_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *financeServerClient) DiamondExchange(ctx context.Context, in *DiamondExchangeReq, opts ...grpc.CallOption) (*common.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(common.Empty)
	err := c.cc.Invoke(ctx, FinanceServer_DiamondExchange_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *financeServerClient) RechargeRecordList(ctx context.Context, in *RechargeRecordListReq, opts ...grpc.CallOption) (*RechargeRecordListResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RechargeRecordListResp)
	err := c.cc.Invoke(ctx, FinanceServer_RechargeRecordList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *financeServerClient) WithdrawRecordList(ctx context.Context, in *WithdrawRecordListReq, opts ...grpc.CallOption) (*WithdrawRecordListResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WithdrawRecordListResp)
	err := c.cc.Invoke(ctx, FinanceServer_WithdrawRecordList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *financeServerClient) CheckWithdrawDetail(ctx context.Context, in *CheckWithdrawDetailReq, opts ...grpc.CallOption) (*CheckWithdrawDetailResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CheckWithdrawDetailResp)
	err := c.cc.Invoke(ctx, FinanceServer_CheckWithdrawDetail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *financeServerClient) MyAsset(ctx context.Context, in *common.Empty, opts ...grpc.CallOption) (*MyAssetResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MyAssetResp)
	err := c.cc.Invoke(ctx, FinanceServer_MyAsset_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *financeServerClient) MyWallet(ctx context.Context, in *MyWalletReq, opts ...grpc.CallOption) (*MyWalletResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MyWalletResp)
	err := c.cc.Invoke(ctx, FinanceServer_MyWallet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *financeServerClient) GetIncomeDetailList(ctx context.Context, in *GetIncomeDetailListReq, opts ...grpc.CallOption) (*GetIncomeDetailListResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetIncomeDetailListResp)
	err := c.cc.Invoke(ctx, FinanceServer_GetIncomeDetailList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *financeServerClient) CheckIncomeDetail(ctx context.Context, in *CheckIncomeDetailReq, opts ...grpc.CallOption) (*CheckIncomeDetailResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CheckIncomeDetailResp)
	err := c.cc.Invoke(ctx, FinanceServer_CheckIncomeDetail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *financeServerClient) WithdrawBind(ctx context.Context, in *WithdrawBindReq, opts ...grpc.CallOption) (*WithdrawBindResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WithdrawBindResp)
	err := c.cc.Invoke(ctx, FinanceServer_WithdrawBind_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *financeServerClient) GetWithdrawConfigList(ctx context.Context, in *common.Empty, opts ...grpc.CallOption) (*WithdrawListResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WithdrawListResp)
	err := c.cc.Invoke(ctx, FinanceServer_GetWithdrawConfigList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *financeServerClient) GetWithdrawTypeList(ctx context.Context, in *WithdrawTypeListReq, opts ...grpc.CallOption) (*WithdrawTypeListResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WithdrawTypeListResp)
	err := c.cc.Invoke(ctx, FinanceServer_GetWithdrawTypeList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *financeServerClient) GetStreamerIncome(ctx context.Context, in *StreamerIncomeReq, opts ...grpc.CallOption) (*StreamerIncomeResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StreamerIncomeResp)
	err := c.cc.Invoke(ctx, FinanceServer_GetStreamerIncome_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *financeServerClient) GetStreamerSettle(ctx context.Context, in *StreamerSettleReq, opts ...grpc.CallOption) (*StreamerSettleResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StreamerSettleResp)
	err := c.cc.Invoke(ctx, FinanceServer_GetStreamerSettle_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *financeServerClient) PaymentDiamond(ctx context.Context, in *PayDiamondReq, opts ...grpc.CallOption) (*PayDiamondResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PayDiamondResp)
	err := c.cc.Invoke(ctx, FinanceServer_PaymentDiamond_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *financeServerClient) SystemDiamond(ctx context.Context, in *DiamondReq, opts ...grpc.CallOption) (*DiamondResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DiamondResp)
	err := c.cc.Invoke(ctx, FinanceServer_SystemDiamond_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FinanceServerServer is the server API for FinanceServer service.
// All implementations must embed UnimplementedFinanceServerServer
// for forward compatibility.
type FinanceServerServer interface {
	PayIn(context.Context, *PayInReq) (*PayInResp, error)
	PayInQuery(context.Context, *PayInQueryReq) (*PayInQueryResp, error)
	PayOut(context.Context, *PayOutReq) (*PayOutResp, error)
	PayOutQuery(context.Context, *PayOutQueryReq) (*PayOutQueryResp, error)
	PayNotification(context.Context, *PayNotificationReq) (*PayNotificationResp, error)
	PayOutNotify(context.Context, *PayOutNotifyReq) (*PayOutNotifyResp, error)
	Balance(context.Context, *BalanceReq) (*BalanceResp, error)
	WithdrawApply(context.Context, *WithdrawReq) (*WithdrawResp, error)
	PlatPay(context.Context, *PlatPayReq) (*PlatPayResp, error)
	PlatRejectPay(context.Context, *PlatRejectPayReq) (*PlatRejectPayResp, error)
	PlatFreezeLiveRoomDetail(context.Context, *PlatFreezeLiveRoomDetailReq) (*PlatFreezeLiveRoomDetailResp, error)
	// 充值中心功能
	GetLoginRechargeCenter(context.Context, *common.Empty) (*GetRechargeCenterResp, error)
	GetUnLoginRechargeCenter(context.Context, *common.Empty) (*GetRechargeCenterResp, error)
	GetZoneByPayTypeCode(context.Context, *GetZoneByPayTypeCodeReq) (*GetZoneByPayTypeCodeResp, error)
	GetPayRandomCode(context.Context, *common.Empty) (*GetPayRandomCodeResp, error)
	GetDiamond(context.Context, *common.Empty) (*GetDiamondResp, error)
	DiamondExchange(context.Context, *DiamondExchangeReq) (*common.Empty, error)
	RechargeRecordList(context.Context, *RechargeRecordListReq) (*RechargeRecordListResp, error)
	WithdrawRecordList(context.Context, *WithdrawRecordListReq) (*WithdrawRecordListResp, error)
	CheckWithdrawDetail(context.Context, *CheckWithdrawDetailReq) (*CheckWithdrawDetailResp, error)
	MyAsset(context.Context, *common.Empty) (*MyAssetResp, error)
	MyWallet(context.Context, *MyWalletReq) (*MyWalletResp, error)
	// 我的
	GetIncomeDetailList(context.Context, *GetIncomeDetailListReq) (*GetIncomeDetailListResp, error)
	CheckIncomeDetail(context.Context, *CheckIncomeDetailReq) (*CheckIncomeDetailResp, error)
	WithdrawBind(context.Context, *WithdrawBindReq) (*WithdrawBindResp, error)
	GetWithdrawConfigList(context.Context, *common.Empty) (*WithdrawListResp, error)
	GetWithdrawTypeList(context.Context, *WithdrawTypeListReq) (*WithdrawTypeListResp, error)
	// 主播直播间
	GetStreamerIncome(context.Context, *StreamerIncomeReq) (*StreamerIncomeResp, error)
	GetStreamerSettle(context.Context, *StreamerSettleReq) (*StreamerSettleResp, error)
	// 内部服务器钻石操作接口
	PaymentDiamond(context.Context, *PayDiamondReq) (*PayDiamondResp, error)
	SystemDiamond(context.Context, *DiamondReq) (*DiamondResp, error)
	mustEmbedUnimplementedFinanceServerServer()
}

// UnimplementedFinanceServerServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedFinanceServerServer struct{}

func (UnimplementedFinanceServerServer) PayIn(context.Context, *PayInReq) (*PayInResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PayIn not implemented")
}
func (UnimplementedFinanceServerServer) PayInQuery(context.Context, *PayInQueryReq) (*PayInQueryResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PayInQuery not implemented")
}
func (UnimplementedFinanceServerServer) PayOut(context.Context, *PayOutReq) (*PayOutResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PayOut not implemented")
}
func (UnimplementedFinanceServerServer) PayOutQuery(context.Context, *PayOutQueryReq) (*PayOutQueryResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PayOutQuery not implemented")
}
func (UnimplementedFinanceServerServer) PayNotification(context.Context, *PayNotificationReq) (*PayNotificationResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PayNotification not implemented")
}
func (UnimplementedFinanceServerServer) PayOutNotify(context.Context, *PayOutNotifyReq) (*PayOutNotifyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PayOutNotify not implemented")
}
func (UnimplementedFinanceServerServer) Balance(context.Context, *BalanceReq) (*BalanceResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Balance not implemented")
}
func (UnimplementedFinanceServerServer) WithdrawApply(context.Context, *WithdrawReq) (*WithdrawResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WithdrawApply not implemented")
}
func (UnimplementedFinanceServerServer) PlatPay(context.Context, *PlatPayReq) (*PlatPayResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PlatPay not implemented")
}
func (UnimplementedFinanceServerServer) PlatRejectPay(context.Context, *PlatRejectPayReq) (*PlatRejectPayResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PlatRejectPay not implemented")
}
func (UnimplementedFinanceServerServer) PlatFreezeLiveRoomDetail(context.Context, *PlatFreezeLiveRoomDetailReq) (*PlatFreezeLiveRoomDetailResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PlatFreezeLiveRoomDetail not implemented")
}
func (UnimplementedFinanceServerServer) GetLoginRechargeCenter(context.Context, *common.Empty) (*GetRechargeCenterResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLoginRechargeCenter not implemented")
}
func (UnimplementedFinanceServerServer) GetUnLoginRechargeCenter(context.Context, *common.Empty) (*GetRechargeCenterResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUnLoginRechargeCenter not implemented")
}
func (UnimplementedFinanceServerServer) GetZoneByPayTypeCode(context.Context, *GetZoneByPayTypeCodeReq) (*GetZoneByPayTypeCodeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetZoneByPayTypeCode not implemented")
}
func (UnimplementedFinanceServerServer) GetPayRandomCode(context.Context, *common.Empty) (*GetPayRandomCodeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPayRandomCode not implemented")
}
func (UnimplementedFinanceServerServer) GetDiamond(context.Context, *common.Empty) (*GetDiamondResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDiamond not implemented")
}
func (UnimplementedFinanceServerServer) DiamondExchange(context.Context, *DiamondExchangeReq) (*common.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DiamondExchange not implemented")
}
func (UnimplementedFinanceServerServer) RechargeRecordList(context.Context, *RechargeRecordListReq) (*RechargeRecordListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RechargeRecordList not implemented")
}
func (UnimplementedFinanceServerServer) WithdrawRecordList(context.Context, *WithdrawRecordListReq) (*WithdrawRecordListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WithdrawRecordList not implemented")
}
func (UnimplementedFinanceServerServer) CheckWithdrawDetail(context.Context, *CheckWithdrawDetailReq) (*CheckWithdrawDetailResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckWithdrawDetail not implemented")
}
func (UnimplementedFinanceServerServer) MyAsset(context.Context, *common.Empty) (*MyAssetResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MyAsset not implemented")
}
func (UnimplementedFinanceServerServer) MyWallet(context.Context, *MyWalletReq) (*MyWalletResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MyWallet not implemented")
}
func (UnimplementedFinanceServerServer) GetIncomeDetailList(context.Context, *GetIncomeDetailListReq) (*GetIncomeDetailListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIncomeDetailList not implemented")
}
func (UnimplementedFinanceServerServer) CheckIncomeDetail(context.Context, *CheckIncomeDetailReq) (*CheckIncomeDetailResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckIncomeDetail not implemented")
}
func (UnimplementedFinanceServerServer) WithdrawBind(context.Context, *WithdrawBindReq) (*WithdrawBindResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WithdrawBind not implemented")
}
func (UnimplementedFinanceServerServer) GetWithdrawConfigList(context.Context, *common.Empty) (*WithdrawListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWithdrawConfigList not implemented")
}
func (UnimplementedFinanceServerServer) GetWithdrawTypeList(context.Context, *WithdrawTypeListReq) (*WithdrawTypeListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWithdrawTypeList not implemented")
}
func (UnimplementedFinanceServerServer) GetStreamerIncome(context.Context, *StreamerIncomeReq) (*StreamerIncomeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStreamerIncome not implemented")
}
func (UnimplementedFinanceServerServer) GetStreamerSettle(context.Context, *StreamerSettleReq) (*StreamerSettleResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStreamerSettle not implemented")
}
func (UnimplementedFinanceServerServer) PaymentDiamond(context.Context, *PayDiamondReq) (*PayDiamondResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PaymentDiamond not implemented")
}
func (UnimplementedFinanceServerServer) SystemDiamond(context.Context, *DiamondReq) (*DiamondResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SystemDiamond not implemented")
}
func (UnimplementedFinanceServerServer) mustEmbedUnimplementedFinanceServerServer() {}
func (UnimplementedFinanceServerServer) testEmbeddedByValue()                       {}

// UnsafeFinanceServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FinanceServerServer will
// result in compilation errors.
type UnsafeFinanceServerServer interface {
	mustEmbedUnimplementedFinanceServerServer()
}

func RegisterFinanceServerServer(s grpc.ServiceRegistrar, srv FinanceServerServer) {
	// If the following call pancis, it indicates UnimplementedFinanceServerServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&FinanceServer_ServiceDesc, srv)
}

func _FinanceServer_PayIn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PayInReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FinanceServerServer).PayIn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FinanceServer_PayIn_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FinanceServerServer).PayIn(ctx, req.(*PayInReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _FinanceServer_PayInQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PayInQueryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FinanceServerServer).PayInQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FinanceServer_PayInQuery_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FinanceServerServer).PayInQuery(ctx, req.(*PayInQueryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _FinanceServer_PayOut_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PayOutReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FinanceServerServer).PayOut(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FinanceServer_PayOut_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FinanceServerServer).PayOut(ctx, req.(*PayOutReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _FinanceServer_PayOutQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PayOutQueryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FinanceServerServer).PayOutQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FinanceServer_PayOutQuery_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FinanceServerServer).PayOutQuery(ctx, req.(*PayOutQueryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _FinanceServer_PayNotification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PayNotificationReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FinanceServerServer).PayNotification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FinanceServer_PayNotification_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FinanceServerServer).PayNotification(ctx, req.(*PayNotificationReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _FinanceServer_PayOutNotify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PayOutNotifyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FinanceServerServer).PayOutNotify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FinanceServer_PayOutNotify_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FinanceServerServer).PayOutNotify(ctx, req.(*PayOutNotifyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _FinanceServer_Balance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BalanceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FinanceServerServer).Balance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FinanceServer_Balance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FinanceServerServer).Balance(ctx, req.(*BalanceReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _FinanceServer_WithdrawApply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WithdrawReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FinanceServerServer).WithdrawApply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FinanceServer_WithdrawApply_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FinanceServerServer).WithdrawApply(ctx, req.(*WithdrawReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _FinanceServer_PlatPay_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlatPayReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FinanceServerServer).PlatPay(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FinanceServer_PlatPay_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FinanceServerServer).PlatPay(ctx, req.(*PlatPayReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _FinanceServer_PlatRejectPay_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlatRejectPayReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FinanceServerServer).PlatRejectPay(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FinanceServer_PlatRejectPay_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FinanceServerServer).PlatRejectPay(ctx, req.(*PlatRejectPayReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _FinanceServer_PlatFreezeLiveRoomDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlatFreezeLiveRoomDetailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FinanceServerServer).PlatFreezeLiveRoomDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FinanceServer_PlatFreezeLiveRoomDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FinanceServerServer).PlatFreezeLiveRoomDetail(ctx, req.(*PlatFreezeLiveRoomDetailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _FinanceServer_GetLoginRechargeCenter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FinanceServerServer).GetLoginRechargeCenter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FinanceServer_GetLoginRechargeCenter_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FinanceServerServer).GetLoginRechargeCenter(ctx, req.(*common.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _FinanceServer_GetUnLoginRechargeCenter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FinanceServerServer).GetUnLoginRechargeCenter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FinanceServer_GetUnLoginRechargeCenter_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FinanceServerServer).GetUnLoginRechargeCenter(ctx, req.(*common.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _FinanceServer_GetZoneByPayTypeCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetZoneByPayTypeCodeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FinanceServerServer).GetZoneByPayTypeCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FinanceServer_GetZoneByPayTypeCode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FinanceServerServer).GetZoneByPayTypeCode(ctx, req.(*GetZoneByPayTypeCodeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _FinanceServer_GetPayRandomCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FinanceServerServer).GetPayRandomCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FinanceServer_GetPayRandomCode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FinanceServerServer).GetPayRandomCode(ctx, req.(*common.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _FinanceServer_GetDiamond_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FinanceServerServer).GetDiamond(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FinanceServer_GetDiamond_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FinanceServerServer).GetDiamond(ctx, req.(*common.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _FinanceServer_DiamondExchange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DiamondExchangeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FinanceServerServer).DiamondExchange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FinanceServer_DiamondExchange_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FinanceServerServer).DiamondExchange(ctx, req.(*DiamondExchangeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _FinanceServer_RechargeRecordList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RechargeRecordListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FinanceServerServer).RechargeRecordList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FinanceServer_RechargeRecordList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FinanceServerServer).RechargeRecordList(ctx, req.(*RechargeRecordListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _FinanceServer_WithdrawRecordList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WithdrawRecordListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FinanceServerServer).WithdrawRecordList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FinanceServer_WithdrawRecordList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FinanceServerServer).WithdrawRecordList(ctx, req.(*WithdrawRecordListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _FinanceServer_CheckWithdrawDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckWithdrawDetailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FinanceServerServer).CheckWithdrawDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FinanceServer_CheckWithdrawDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FinanceServerServer).CheckWithdrawDetail(ctx, req.(*CheckWithdrawDetailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _FinanceServer_MyAsset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FinanceServerServer).MyAsset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FinanceServer_MyAsset_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FinanceServerServer).MyAsset(ctx, req.(*common.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _FinanceServer_MyWallet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MyWalletReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FinanceServerServer).MyWallet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FinanceServer_MyWallet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FinanceServerServer).MyWallet(ctx, req.(*MyWalletReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _FinanceServer_GetIncomeDetailList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetIncomeDetailListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FinanceServerServer).GetIncomeDetailList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FinanceServer_GetIncomeDetailList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FinanceServerServer).GetIncomeDetailList(ctx, req.(*GetIncomeDetailListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _FinanceServer_CheckIncomeDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckIncomeDetailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FinanceServerServer).CheckIncomeDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FinanceServer_CheckIncomeDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FinanceServerServer).CheckIncomeDetail(ctx, req.(*CheckIncomeDetailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _FinanceServer_WithdrawBind_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WithdrawBindReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FinanceServerServer).WithdrawBind(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FinanceServer_WithdrawBind_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FinanceServerServer).WithdrawBind(ctx, req.(*WithdrawBindReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _FinanceServer_GetWithdrawConfigList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FinanceServerServer).GetWithdrawConfigList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FinanceServer_GetWithdrawConfigList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FinanceServerServer).GetWithdrawConfigList(ctx, req.(*common.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _FinanceServer_GetWithdrawTypeList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WithdrawTypeListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FinanceServerServer).GetWithdrawTypeList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FinanceServer_GetWithdrawTypeList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FinanceServerServer).GetWithdrawTypeList(ctx, req.(*WithdrawTypeListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _FinanceServer_GetStreamerIncome_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StreamerIncomeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FinanceServerServer).GetStreamerIncome(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FinanceServer_GetStreamerIncome_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FinanceServerServer).GetStreamerIncome(ctx, req.(*StreamerIncomeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _FinanceServer_GetStreamerSettle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StreamerSettleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FinanceServerServer).GetStreamerSettle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FinanceServer_GetStreamerSettle_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FinanceServerServer).GetStreamerSettle(ctx, req.(*StreamerSettleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _FinanceServer_PaymentDiamond_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PayDiamondReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FinanceServerServer).PaymentDiamond(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FinanceServer_PaymentDiamond_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FinanceServerServer).PaymentDiamond(ctx, req.(*PayDiamondReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _FinanceServer_SystemDiamond_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DiamondReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FinanceServerServer).SystemDiamond(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FinanceServer_SystemDiamond_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FinanceServerServer).SystemDiamond(ctx, req.(*DiamondReq))
	}
	return interceptor(ctx, in, info, handler)
}

// FinanceServer_ServiceDesc is the grpc.ServiceDesc for FinanceServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FinanceServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.FinanceServer",
	HandlerType: (*FinanceServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PayIn",
			Handler:    _FinanceServer_PayIn_Handler,
		},
		{
			MethodName: "PayInQuery",
			Handler:    _FinanceServer_PayInQuery_Handler,
		},
		{
			MethodName: "PayOut",
			Handler:    _FinanceServer_PayOut_Handler,
		},
		{
			MethodName: "PayOutQuery",
			Handler:    _FinanceServer_PayOutQuery_Handler,
		},
		{
			MethodName: "PayNotification",
			Handler:    _FinanceServer_PayNotification_Handler,
		},
		{
			MethodName: "PayOutNotify",
			Handler:    _FinanceServer_PayOutNotify_Handler,
		},
		{
			MethodName: "Balance",
			Handler:    _FinanceServer_Balance_Handler,
		},
		{
			MethodName: "WithdrawApply",
			Handler:    _FinanceServer_WithdrawApply_Handler,
		},
		{
			MethodName: "PlatPay",
			Handler:    _FinanceServer_PlatPay_Handler,
		},
		{
			MethodName: "PlatRejectPay",
			Handler:    _FinanceServer_PlatRejectPay_Handler,
		},
		{
			MethodName: "PlatFreezeLiveRoomDetail",
			Handler:    _FinanceServer_PlatFreezeLiveRoomDetail_Handler,
		},
		{
			MethodName: "GetLoginRechargeCenter",
			Handler:    _FinanceServer_GetLoginRechargeCenter_Handler,
		},
		{
			MethodName: "GetUnLoginRechargeCenter",
			Handler:    _FinanceServer_GetUnLoginRechargeCenter_Handler,
		},
		{
			MethodName: "GetZoneByPayTypeCode",
			Handler:    _FinanceServer_GetZoneByPayTypeCode_Handler,
		},
		{
			MethodName: "GetPayRandomCode",
			Handler:    _FinanceServer_GetPayRandomCode_Handler,
		},
		{
			MethodName: "GetDiamond",
			Handler:    _FinanceServer_GetDiamond_Handler,
		},
		{
			MethodName: "DiamondExchange",
			Handler:    _FinanceServer_DiamondExchange_Handler,
		},
		{
			MethodName: "RechargeRecordList",
			Handler:    _FinanceServer_RechargeRecordList_Handler,
		},
		{
			MethodName: "WithdrawRecordList",
			Handler:    _FinanceServer_WithdrawRecordList_Handler,
		},
		{
			MethodName: "CheckWithdrawDetail",
			Handler:    _FinanceServer_CheckWithdrawDetail_Handler,
		},
		{
			MethodName: "MyAsset",
			Handler:    _FinanceServer_MyAsset_Handler,
		},
		{
			MethodName: "MyWallet",
			Handler:    _FinanceServer_MyWallet_Handler,
		},
		{
			MethodName: "GetIncomeDetailList",
			Handler:    _FinanceServer_GetIncomeDetailList_Handler,
		},
		{
			MethodName: "CheckIncomeDetail",
			Handler:    _FinanceServer_CheckIncomeDetail_Handler,
		},
		{
			MethodName: "WithdrawBind",
			Handler:    _FinanceServer_WithdrawBind_Handler,
		},
		{
			MethodName: "GetWithdrawConfigList",
			Handler:    _FinanceServer_GetWithdrawConfigList_Handler,
		},
		{
			MethodName: "GetWithdrawTypeList",
			Handler:    _FinanceServer_GetWithdrawTypeList_Handler,
		},
		{
			MethodName: "GetStreamerIncome",
			Handler:    _FinanceServer_GetStreamerIncome_Handler,
		},
		{
			MethodName: "GetStreamerSettle",
			Handler:    _FinanceServer_GetStreamerSettle_Handler,
		},
		{
			MethodName: "PaymentDiamond",
			Handler:    _FinanceServer_PaymentDiamond_Handler,
		},
		{
			MethodName: "SystemDiamond",
			Handler:    _FinanceServer_SystemDiamond_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "finance/finance_api.proto",
}
